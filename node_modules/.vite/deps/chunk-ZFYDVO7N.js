import {
  DefaultAmplify
} from "./chunk-5LMEXU6I.js";
import {
  AuthAction,
  Category,
  ConsoleLogger,
  GeoAction,
  Hub,
  I18n,
  InAppMessagingAction,
  StorageAction,
  __assign,
  autoSignIn,
  confirmResetPassword,
  confirmSignIn,
  confirmSignUp,
  confirmUserAttribute,
  deleteUser,
  fetchUserAttributes,
  getCurrentUser,
  init_tslib_es6,
  resendSignUpCode,
  resetPassword,
  sendUserAttributeVerificationCode,
  setCustomUserAgent,
  signIn,
  signInWithRedirect,
  signOut,
  signUp,
  updatePassword
} from "./chunk-6SW32IDD.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/lower-case/dist.es2015/index.js
function lowerCase(str) {
  return str.toLowerCase();
}
var init_dist = __esm({
  "node_modules/lower-case/dist.es2015/index.js"() {
  }
});

// node_modules/no-case/dist.es2015/index.js
function noCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.splitRegexp, splitRegexp = _a2 === void 0 ? DEFAULT_SPLIT_REGEXP : _a2, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
  var result = replace(replace(input2, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  var start3 = 0;
  var end = result.length;
  while (result.charAt(start3) === "\0")
    start3++;
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start3, end).split("\0").map(transform).join(delimiter);
}
function replace(input2, re, value) {
  if (re instanceof RegExp)
    return input2.replace(re, value);
  return re.reduce(function(input3, re2) {
    return input3.replace(re2, value);
  }, input2);
}
var DEFAULT_SPLIT_REGEXP, DEFAULT_STRIP_REGEXP;
var init_dist2 = __esm({
  "node_modules/no-case/dist.es2015/index.js"() {
    init_dist();
    DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
    DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
  }
});

// node_modules/pascal-case/dist.es2015/index.js
function pascalCaseTransform(input2, index2) {
  var firstChar = input2.charAt(0);
  var lowerChars = input2.substr(1).toLowerCase();
  if (index2 > 0 && firstChar >= "0" && firstChar <= "9") {
    return "_" + firstChar + lowerChars;
  }
  return "" + firstChar.toUpperCase() + lowerChars;
}
function pascalCaseTransformMerge(input2) {
  return input2.charAt(0).toUpperCase() + input2.slice(1).toLowerCase();
}
function pascalCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input2, __assign({ delimiter: "", transform: pascalCaseTransform }, options));
}
var init_dist3 = __esm({
  "node_modules/pascal-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist2();
  }
});

// node_modules/camel-case/dist.es2015/index.js
function camelCaseTransform(input2, index2) {
  if (index2 === 0)
    return input2.toLowerCase();
  return pascalCaseTransform(input2, index2);
}
function camelCaseTransformMerge(input2, index2) {
  if (index2 === 0)
    return input2.toLowerCase();
  return pascalCaseTransformMerge(input2);
}
function camelCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return pascalCase(input2, __assign({ transform: camelCaseTransform }, options));
}
var init_dist4 = __esm({
  "node_modules/camel-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist3();
  }
});

// node_modules/upper-case-first/dist.es2015/index.js
function upperCaseFirst(input2) {
  return input2.charAt(0).toUpperCase() + input2.substr(1);
}
var init_dist5 = __esm({
  "node_modules/upper-case-first/dist.es2015/index.js"() {
  }
});

// node_modules/capital-case/dist.es2015/index.js
function capitalCaseTransform(input2) {
  return upperCaseFirst(input2.toLowerCase());
}
function capitalCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input2, __assign({ delimiter: " ", transform: capitalCaseTransform }, options));
}
var init_dist6 = __esm({
  "node_modules/capital-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist2();
    init_dist5();
  }
});

// node_modules/upper-case/dist.es2015/index.js
function upperCase(str) {
  return str.toUpperCase();
}
var init_dist7 = __esm({
  "node_modules/upper-case/dist.es2015/index.js"() {
  }
});

// node_modules/constant-case/dist.es2015/index.js
function constantCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input2, __assign({ delimiter: "_", transform: upperCase }, options));
}
var init_dist8 = __esm({
  "node_modules/constant-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist2();
    init_dist7();
  }
});

// node_modules/dot-case/dist.es2015/index.js
function dotCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input2, __assign({ delimiter: "." }, options));
}
var init_dist9 = __esm({
  "node_modules/dot-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist2();
  }
});

// node_modules/header-case/dist.es2015/index.js
function headerCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return capitalCase(input2, __assign({ delimiter: "-" }, options));
}
var init_dist10 = __esm({
  "node_modules/header-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist6();
  }
});

// node_modules/param-case/dist.es2015/index.js
function paramCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input2, __assign({ delimiter: "-" }, options));
}
var init_dist11 = __esm({
  "node_modules/param-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist9();
  }
});

// node_modules/path-case/dist.es2015/index.js
function pathCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input2, __assign({ delimiter: "/" }, options));
}
var init_dist12 = __esm({
  "node_modules/path-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist9();
  }
});

// node_modules/sentence-case/dist.es2015/index.js
function sentenceCaseTransform(input2, index2) {
  var result = input2.toLowerCase();
  if (index2 === 0)
    return upperCaseFirst(result);
  return result;
}
function sentenceCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input2, __assign({ delimiter: " ", transform: sentenceCaseTransform }, options));
}
var init_dist13 = __esm({
  "node_modules/sentence-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist2();
    init_dist5();
  }
});

// node_modules/snake-case/dist.es2015/index.js
function snakeCase(input2, options) {
  if (options === void 0) {
    options = {};
  }
  return dotCase(input2, __assign({ delimiter: "_" }, options));
}
var init_dist14 = __esm({
  "node_modules/snake-case/dist.es2015/index.js"() {
    init_tslib_es6();
    init_dist9();
  }
});

// node_modules/change-case/dist.es2015/index.js
var dist_exports = {};
__export(dist_exports, {
  camelCase: () => camelCase,
  camelCaseTransform: () => camelCaseTransform,
  camelCaseTransformMerge: () => camelCaseTransformMerge,
  capitalCase: () => capitalCase,
  capitalCaseTransform: () => capitalCaseTransform,
  constantCase: () => constantCase,
  dotCase: () => dotCase,
  headerCase: () => headerCase,
  noCase: () => noCase,
  paramCase: () => paramCase,
  pascalCase: () => pascalCase,
  pascalCaseTransform: () => pascalCaseTransform,
  pascalCaseTransformMerge: () => pascalCaseTransformMerge,
  pathCase: () => pathCase,
  sentenceCase: () => sentenceCase,
  sentenceCaseTransform: () => sentenceCaseTransform,
  snakeCase: () => snakeCase
});
var init_dist15 = __esm({
  "node_modules/change-case/dist.es2015/index.js"() {
    init_dist4();
    init_dist6();
    init_dist8();
    init_dist9();
    init_dist10();
    init_dist2();
    init_dist11();
    init_dist3();
    init_dist12();
    init_dist13();
    init_dist14();
  }
});

// node_modules/style-dictionary/lib/utils/es6_.js
var require_es6 = __commonJS({
  "node_modules/style-dictionary/lib/utils/es6_.js"(exports, module) {
    var ChangeCase = (init_dist15(), __toCommonJS(dist_exports));
    var reduce = function(obj, f, accumulator_init) {
      return Object.keys(obj || {}).reduce((accumulator, key) => {
        let value = obj[key];
        return f(accumulator, value, key, obj);
      }, accumulator_init);
    };
    var forEach = function(obj, f) {
      Object.keys(obj || {}).forEach((key) => {
        let value = obj[key];
        f(value, key);
      });
    };
    var clone = function(object) {
      return Object.assign(new object.constructor(), object);
    };
    var cloneDeep = function(obj) {
      if (obj === null || obj === void 0 || typeof obj !== "object") {
        return obj;
      }
      if (obj instanceof Array) {
        return obj.reduce((arr, item, i) => {
          arr[i] = cloneDeep(item);
          return arr;
        }, []);
      }
      if (obj instanceof Object) {
        return Object.keys(obj || {}).reduce((cpObj, key) => {
          cpObj[key] = cloneDeep(obj[key]);
          return cpObj;
        }, {});
      }
    };
    var isObject3 = function(value) {
      const type = typeof value;
      return value != null && (type === "object" || type === "function");
    };
    var isString4 = function(obj) {
      return typeof obj === "string" || obj instanceof String;
    };
    var isArray3 = function(obj) {
      return Array.isArray(obj);
    };
    var isEmpty2 = function(obj) {
      return [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length;
    };
    function isPlainObject2(value) {
      if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {
        return false;
      }
      if (Object.getPrototypeOf(value) === null) {
        return true;
      }
      let proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
    }
    var filter = function(arr, filter2) {
      if (typeof filter2 !== "function") {
        throw "filter is not a function";
      }
      if (typeof arr === "undefined") {
        return [];
      }
      return arr.filter(filter2);
    };
    var assign5 = function() {
      let args = Array.prototype.slice.call(arguments);
      args.unshift({});
      return Object.assign(...args);
    };
    var pull = function(arr, ...removeList) {
      var removeSet = new Set(removeList);
      for (let i = arr.length - 1; i >= 0; i--) {
        if (removeSet.has(arr[i])) {
          arr.splice(i, 1);
        }
      }
    };
    var unique = function(arr) {
      return [...new Set(arr)];
    };
    var upperFirst = function(str) {
      return str ? str[0].toUpperCase() + str.substr(1) : "";
    };
    var matchFn = function(inputObj, testObj) {
      if (isObject3(testObj)) {
        return Object.keys(testObj).every((key) => matchFn(inputObj[key], testObj[key]));
      } else {
        return inputObj == testObj;
      }
    };
    var matches = function(matchObj) {
      let cloneObj = cloneDeep(matchObj);
      let matchesFn = (inputObj) => matchFn(inputObj, cloneObj);
      return matchesFn;
    };
    var DEFAULT_OPTIONS = {
      transform: ChangeCase.camelCaseTransformMerge
    };
    var changeDefaultCaseTransform = function(caseFunction, default_options) {
      return (caseToChange, options) => caseFunction(caseToChange, Object.assign({}, DEFAULT_OPTIONS, default_options, options));
    };
    module.exports = {
      each: forEach,
      forEach,
      forIn: forEach,
      keys: Object.keys,
      clone,
      cloneDeep,
      extend: Object.assign,
      isString: isString4,
      isArray: isArray3,
      isObject: isObject3,
      isPlainObject: isPlainObject2,
      isEmpty: isEmpty2,
      filter,
      reduce,
      assign: assign5,
      upperFirst,
      camelCase: changeDefaultCaseTransform(ChangeCase.camelCase),
      snakeCase: ChangeCase.snakeCase,
      kebabCase: ChangeCase.paramCase,
      pull,
      matches,
      unique
    };
  }
});

// node_modules/style-dictionary/lib/utils/deepExtend.js
var require_deepExtend = __commonJS({
  "node_modules/style-dictionary/lib/utils/deepExtend.js"(exports, module) {
    var _ = require_es6();
    function deepExtend2(objects, collision, path2) {
      if (objects == null)
        return {};
      var src, copyIsArray, copy2, name, options, clone, target = objects[0] || {}, i = 1, length = objects.length;
      path2 = path2 || [];
      if (typeof target !== "object") {
        target = {};
      }
      for (; i < length; i++) {
        if ((options = objects[i]) != null) {
          for (name in options) {
            if (!options.hasOwnProperty(name))
              continue;
            if (name === "__proto__")
              continue;
            src = target[name];
            copy2 = options[name];
            if (target === copy2) {
              continue;
            }
            if (copy2 && (_.isPlainObject(copy2) || (copyIsArray = _.isArray(copy2)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && _.isArray(src) ? src : [];
              } else {
                clone = src && _.isPlainObject(src) ? src : {};
              }
              var nextPath = path2.slice(0);
              nextPath.push(name);
              target[name] = deepExtend2([clone, copy2], collision, nextPath);
            } else if (copy2 !== void 0) {
              if (src != null && typeof collision == "function") {
                collision({ target, copy: options, path: path2, key: name });
              }
              target[name] = copy2;
            }
          }
        }
      }
      return target;
    }
    module.exports = deepExtend2;
  }
});

// node_modules/style-dictionary/lib/utils/flattenProperties.js
var require_flattenProperties = __commonJS({
  "node_modules/style-dictionary/lib/utils/flattenProperties.js"(exports, module) {
    var _ = require_es6();
    function flattenProperties2(properties, to_ret) {
      to_ret = to_ret || [];
      for (var name in properties) {
        if (properties.hasOwnProperty(name)) {
          if (_.isPlainObject(properties[name]) && "value" in properties[name]) {
            to_ret.push(properties[name]);
          } else if (_.isPlainObject(properties[name])) {
            flattenProperties2(properties[name], to_ret);
          }
        }
      }
      return to_ret;
    }
    module.exports = flattenProperties2;
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports, module) {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array[index2], index2, array);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  }
});

// node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "node_modules/lodash/_basePropertyOf.js"(exports, module) {
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = basePropertyOf;
  }
});

// node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "node_modules/lodash/_deburrLetter.js"(exports, module) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module.exports = deburrLetter;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray3 = Array.isArray;
    module.exports = isArray3;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray3 = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray3(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "node_modules/lodash/deburr.js"(exports, module) {
    var deburrLetter = require_deburrLetter();
    var toString = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "node_modules/lodash/_asciiWords.js"(exports, module) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    module.exports = asciiWords;
  }
});

// node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "node_modules/lodash/_hasUnicodeWord.js"(exports, module) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    module.exports = hasUnicodeWord;
  }
});

// node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "node_modules/lodash/_unicodeWords.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['’]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    module.exports = unicodeWords;
  }
});

// node_modules/lodash/words.js
var require_words = __commonJS({
  "node_modules/lodash/words.js"(exports, module) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module.exports = words;
  }
});

// node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "node_modules/lodash/_createCompounder.js"(exports, module) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['’]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    module.exports = createCompounder;
  }
});

// node_modules/lodash/kebabCase.js
var require_kebabCase = __commonJS({
  "node_modules/lodash/kebabCase.js"(exports, module) {
    var createCompounder = require_createCompounder();
    var kebabCase2 = createCompounder(function(result, word, index2) {
      return result + (index2 ? "-" : "") + word.toLowerCase();
    });
    module.exports = kebabCase2;
  }
});

// node_modules/style-dictionary/lib/utils/references/defaults.js
var require_defaults = __commonJS({
  "node_modules/style-dictionary/lib/utils/references/defaults.js"(exports, module) {
    var defaults = {
      opening_character: "{",
      closing_character: "}",
      separator: "."
    };
    module.exports = defaults;
  }
});

// node_modules/style-dictionary/lib/utils/references/createReferenceRegex.js
var require_createReferenceRegex = __commonJS({
  "node_modules/style-dictionary/lib/utils/references/createReferenceRegex.js"(exports, module) {
    var defaults = require_defaults();
    function createReferenceRegex(opts = {}) {
      const options = Object.assign({}, defaults, opts);
      return new RegExp(
        "\\" + options.opening_character + "([^" + options.closing_character + "]+)\\" + options.closing_character,
        "g"
      );
    }
    module.exports = createReferenceRegex;
  }
});

// node_modules/style-dictionary/lib/utils/references/usesReference.js
var require_usesReference = __commonJS({
  "node_modules/style-dictionary/lib/utils/references/usesReference.js"(exports, module) {
    var createRegex = require_createReferenceRegex();
    function usesReference2(value, regexOrOptions = {}) {
      const regex = regexOrOptions instanceof RegExp ? regexOrOptions : createRegex(regexOrOptions);
      if (typeof value === "string") {
        return regex.test(value);
      }
      if (typeof value === "object") {
        let hasReference = false;
        for (const key in value) {
          if (value.hasOwnProperty(key)) {
            const element = value[key];
            let reference = usesReference2(element, regexOrOptions);
            if (reference) {
              hasReference = true;
              break;
            }
          }
        }
        return hasReference;
      }
      return false;
    }
    module.exports = usesReference2;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject3(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject3;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject3 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction4(value) {
      if (!isObject3(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction4;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction4 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject3 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject3(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction4(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index2 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (predicate(array[index2], index2, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index2 < arrLength) {
        var arrValue = array[index2], othValue = other[index2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index2 = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index2 = -1, length = values.length, offset = array.length;
      while (++index2 < length) {
        array[offset + index2] = values[index2];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray3 = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray3(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array[index2];
        if (predicate(value, index2, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray3 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction4 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction4(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index2 = objLength;
      while (index2--) {
        var key = objProps[index2];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index2 < objLength) {
        key = objProps[index2];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray3 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray3(object), othIsArr = isArray3(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index2 = matchData.length, length = index2, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index2--) {
        var data = matchData[index2];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index2 < length) {
        data = matchData[index2];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject3 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject3(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray3 = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey2(value, object) {
      if (isArray3(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey2;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath2 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath2;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray3 = require_isArray();
    var isKey2 = require_isKey();
    var stringToPath2 = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray3(value)) {
        return value;
      }
      return isKey2(value, object) ? [value] : stringToPath2(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet2(object, path2) {
      path2 = castPath(path2, object);
      var index2 = 0, length = path2.length;
      while (object != null && index2 < length) {
        object = object[toKey(path2[index2++])];
      }
      return index2 && index2 == length ? object : void 0;
    }
    module.exports = baseGet2;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet2 = require_baseGet();
    function get2(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet2(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get2;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray3 = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path2, hasFunc) {
      path2 = castPath(path2, object);
      var index2 = -1, length = path2.length, result = false;
      while (++index2 < length) {
        var key = toKey(path2[index2]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index2 != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray3(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey2 = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path2, srcValue) {
      if (isKey2(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet2 = require_baseGet();
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet2(object, path2);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey2 = require_isKey();
    var toKey = require_toKey();
    function property(path2) {
      return isKey2(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray3 = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray3(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject3 = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path2, value, customizer) {
      if (!isObject3(object)) {
        return object;
      }
      path2 = castPath(path2, object);
      var index2 = -1, length = path2.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index2 < length) {
        var key = toKey(path2[index2]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index2 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject3(objValue) ? objValue : isIndex(path2[index2 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet2 = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index2 = -1, length = paths.length, result = {};
      while (++index2 < length) {
        var path2 = paths[index2], value = baseGet2(object, path2);
        if (predicate(value, path2)) {
          baseSet(result, castPath(path2, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject3 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject3(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/pickBy.js
var require_pickBy = __commonJS({
  "node_modules/lodash/pickBy.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var basePickBy = require_basePickBy();
    var getAllKeysIn = require_getAllKeysIn();
    function pickBy2(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value, path2) {
        return predicate(value, path2[0]);
      });
    }
    module.exports = pickBy2;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index2];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index2 = -1, length = source.length;
      array || (array = Array(length));
      while (++index2 < length) {
        array[index2] = source[index2];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject3 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject3(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject2;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray3 = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction4 = require_isFunction();
    var isObject3 = require_isObject();
    var isPlainObject2 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray3(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray3(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject3(objValue) || isFunction4(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject3 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject3(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start3, transform) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
        while (++index2 < length) {
          array[index2] = args[start3 + index2];
        }
        index2 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index2 < start3) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start3] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject3 = require_isObject();
    function isIterateeCall(value, index2, object) {
      if (!isObject3(object)) {
        return false;
      }
      var type = typeof index2;
      if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
        return eq(object[index2], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index2 < length) {
          var source = sources[index2];
          if (source) {
            assigner(object, source, index2, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React5 = require_react();
        var ReactSharedInternals = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error3(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState2 = React5.useState, useEffect7 = React5.useEffect, useLayoutEffect2 = React5.useLayoutEffect, useDebugValue = React5.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React5.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error3("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error3("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState2({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect2(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect7(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error4) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React5.useSyncExternalStore !== void 0 ? React5.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React5 = require_react();
        var shim = require_shim();
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef5 = React5.useRef, useEffect7 = React5.useEffect, useMemo3 = React5.useMemo, useDebugValue = React5.useDebugValue;
        function useSyncExternalStoreWithSelector4(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
          var instRef = useRef5(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo3(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect7(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector4;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/de.mjs
var deDict = {
  "Account recovery requires verified contact information": "Zurücksetzen des Account benötigt einen verifizierten Account",
  "Back to Sign In": "Zurück zur Anmeldung",
  "Change Password": "Passwort ändern",
  Changing: "Ändern von",
  Code: "Code",
  "Confirm Password": "Passwort bestätigen",
  "Please confirm your Password": "Bitte bestätigen Sie Ihr Passwort",
  "Confirm Sign Up": "Registrierung bestätigen",
  "Confirm SMS Code": "SMS-Code bestätigen",
  "Confirm TOTP Code": "TOTP-Code bestätigen",
  Confirm: "Bestätigen",
  "Confirmation Code": "Bestätigungs-Code",
  Confirming: "Wird bestätigt",
  "Create a new account": "Einen neuen Account erstellen",
  "Create Account": "Account erstellen",
  "Creating Account": "Account wird erstellt",
  "Dismiss alert": "Warnung verwerfen",
  Email: "Email",
  "Enter your code": "Geben Sie Ihren Code ein",
  "Enter your Email": "Geben Sie Ihre E-Mail ein",
  "Enter your phone number": "Geben Sie Ihre Telefonnummer ein",
  "Enter your username": "Geben Sie Ihren Benutzernamen ein",
  "Forgot your password?": "Passwort vergessen? ",
  "Hide password": "Passwort verbergen",
  "It may take a minute to arrive": "Es kann eine Minute dauern, bis er ankommt",
  Loading: "Wird geladen",
  "New password": "Neues Passwort",
  or: "oder",
  Password: "Passwort",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Code erneut senden",
  "Reset your Password": "Zurücksetzen des Passwort",
  "Reset your password": "Zurücksetzen des passwort",
  "Send code": "Code senden",
  "Send Code": "Code senden",
  Sending: "Wird gesendet",
  "Setup TOTP": "TOTP einrichten",
  "Show password": "Passwort anzeigen",
  "Sign in to your account": "Melden Sie sich mit Ihrem Account an",
  "Sign In with Amazon": "Mit Amazon anmelden",
  "Sign In with Apple": "Mit Apple anmelden",
  "Sign In with Facebook": "Mit Facebook anmelden",
  "Sign In with Google": "Mit Google anmelden",
  "Sign in": "Anmelden",
  "Sign In": "Anmelden",
  "Signing in": "Wird angemeldet",
  Skip: "Überspringen",
  Submit: "Abschicken",
  Submitting: "Wird gesendet",
  Username: "Benutzername",
  "Verify Contact": "Kontakt verifizieren",
  Verify: "Verifizieren",
  "We Sent A Code": "Wir haben einen Code gesendet",
  "We Texted You": "Wir haben Ihnen eine SMS gesendet",
  "Your code is on the way. To log in, enter the code we sent you": "Ihr Code ist unterwegs. Um sich anzumelden, geben Sie den Code ein, den wir Ihnen gesendet haben",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ein Account mit dieser Email existiert bereits.",
  "Confirm a Code": "Code bestätigen",
  "Confirm Sign In": "Anmeldung bestätigen",
  "Create account": "Hier registrieren",
  "Enter your password": "Geben Sie Ihr Passwort ein",
  "Enter your Password": "Geben Sie Ihr Passwort ein",
  "Sign Up with Facebook": "Mit Facebook registrieren",
  "Sign Up with Google": "Mit Google registrieren",
  "Forgot Password": "Passwort vergessen",
  "Have an account? ": "Schon registriert? ",
  "Incorrect username or password": "Falscher Benutzername oder falsches Passwort",
  "Invalid password format": "Ungültiges Passwort-Format",
  "Invalid phone number format": `Ungültiges Telefonummern-Format. Benutze eine Nummer im Format: +12345678900`,
  "It may take a minute to arrive.": "Es könnte eine Minute dauern, bis der Code eintrifft.",
  "Lost your code? ": "Code verloren? ",
  "New Password": "Neues Passwort",
  "No account? ": "Kein Account? ",
  "Password attempts exceeded": "Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht",
  "Reset password": "Passwort zurücksetzen",
  "Sign Out": "Abmelden",
  "Sign Up": "Registrieren",
  "User already exists": "Dieser Benutzer existiert bereits",
  "User does not exist": "Dieser Benutzer existiert nicht",
  "Username cannot be empty": "Benutzername darf nicht leer sein",
  "We Emailed You": "Email wurde versendet",
  "Your code is on the way. To log in, enter the code we emailed to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir verschickt haben an",
  "Your code is on the way. To log in, enter the code we texted to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir verschickt haben an"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/en.mjs
var enDict = {
  "Account recovery requires verified contact information": "Account recovery requires verified contact information",
  "Add your Profile": "Add your Profile",
  "Add your Website": "Add your Website",
  "Back to Sign In": "Back to Sign In",
  "Change Password": "Change Password",
  Changing: "Changing",
  Code: "Code",
  "Confirm Password": "Confirm Password",
  "Confirm Sign Up": "Confirm Sign Up",
  "Confirm SMS Code": "Confirm SMS Code",
  "Confirm MFA Code": "Confirm MFA Code",
  "Confirm TOTP Code": "Confirm TOTP Code",
  Confirm: "Confirm",
  "Confirmation Code": "Confirmation Code",
  Confirming: "Confirming",
  "Create a new account": "Create a new account",
  "Create Account": "Create Account",
  "Creating Account": "Creating Account",
  "Dismiss alert": "Dismiss alert",
  Email: "Email",
  "Enter your Birthdate": "Enter your Birthdate",
  "Enter your code": "Enter your code",
  "Enter your Confirmation Code": "Enter your Confirmation Code",
  "Enter your Email": "Enter your Email",
  "Enter your Family Name": "Enter your Family Name",
  "Enter your Given Name": "Enter your Given Name",
  "Enter your Middle Name": "Enter your Middle Name",
  "Enter your Name": "Enter your Name",
  "Enter your Nickname": "Enter your Nickname",
  "Enter your Password": "Enter your Password",
  "Enter your phone number": "Enter your phone number",
  "Enter your Preferred Username": "Enter your Preferred Username",
  "Enter your username": "Enter your username",
  "Forgot password?": "Forgot password?",
  "Forgot your password?": "Forgot your password?",
  "Hide password": "Hide password",
  "It may take a minute to arrive": "It may take a minute to arrive",
  Loading: "Loading",
  "New password": "New password",
  or: "or",
  Password: "Password",
  "Phone Number": "Phone Number",
  "Please confirm your Password": "Please confirm your Password",
  "Resend Code": "Resend Code",
  "Reset your password": "Reset your password",
  "Reset your Password": "Reset your Password",
  "Send code": "Send code",
  "Send Code": "Send Code",
  Sending: "Sending",
  "Setup TOTP": "Setup TOTP",
  "Show password": "Show password",
  "Sign in to your account": "Sign in to your account",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "Sign in",
  "Sign In": "Sign In",
  "Signing in": "Signing in",
  Skip: "Skip",
  Submit: "Submit",
  Submitting: "Submitting",
  Username: "Username",
  "Verify Contact": "Verify Contact",
  Verify: "Verify",
  "We Emailed You": "We Emailed You",
  "We Sent A Code": "We Sent A Code",
  "We Texted You": "We Texted You",
  "Your code is on the way. To log in, enter the code we emailed to": "Your code is on the way. To log in, enter the code we emailed to",
  "Your code is on the way. To log in, enter the code we sent you": "Your code is on the way. To log in, enter the code we sent you",
  "Your code is on the way. To log in, enter the code we texted to": "Your code is on the way. To log in, enter the code we texted to"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/es.mjs
var esDict = {
  "Account recovery requires verified contact information": "La recuperación de la cuenta requiere información de contacto verificada",
  "Back to Sign In": "Volver a inicio de sesión",
  "Change Password": "Cambiar contraseña",
  Changing: "Cambiando",
  Code: "Código",
  "Confirm Password": "Confirmar contraseña",
  "Confirm Sign Up": "Confirmar registro",
  "Confirm SMS Code": "Confirmar el código de SMS",
  "Confirm TOTP Code": "Confirmar código TOTP",
  Confirm: "Confirmar",
  "Confirmation Code": "Código de confirmación",
  Confirming: "Confirmando",
  "Create a new account": "Crear una cuenta nueva",
  "Create Account": "Crear cuenta",
  "Creating Account": "Creando cuenta",
  "Dismiss alert": "Descartar alerta",
  Email: "Email",
  "Enter your code": "Ingrese el código",
  "Enter your Email": "Escriba su Email",
  "Enter your Password": "Escriba su Contraseña",
  "Enter your phone number": "Ingrese el número de teléfono",
  "Enter your username": "Ingrese el nombre de usuario",
  "Forgot your password?": "¿Olvidó su contraseña?",
  "Hide password": "Ocultar contraseña",
  "It may take a minute to arrive": "Es posible que tarde un minuto en llegar",
  Loading: "Cargando",
  "New password": "Nueva contraseña",
  or: "o",
  Password: "Contraseña",
  "Phone Number": "Número de teléfono",
  "Resend Code": "Reenviar código",
  "Reset your password": "Restablecer su contraseña",
  "Reset your Password": "Restablecer su Contraseña",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar contraseña",
  "Sign in to your account": "Iniciar sesión en tu cuenta",
  "Sign In with Amazon": "Iniciar Sesión con Amazon",
  "Sign In with Apple": "Iniciar Sesión con Apple",
  "Sign In with Facebook": "Iniciar Sesión con Facebook",
  "Sign In with Google": "Iniciar Sesión con Google",
  "Sign in": "Iniciar sesión",
  "Sign In": "Iniciar Sesión",
  "Signing in": "Iniciando sesión",
  Skip: "Omitir",
  Submit: "Enviar",
  Submitting: "Enviando",
  Username: "Nombre de usuario",
  "Verify Contact": "Verificar contacto",
  Verify: "Verificar",
  "We Emailed You": "Le hemos enviado un correo electrónico",
  "We Sent A Code": "Hemos enviado un código",
  "We Texted You": "Le hemos enviado un mensaje de texto",
  "Your code is on the way. To log in, enter the code we emailed to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por correo electrónico a",
  "Your code is on the way. To log in, enter the code we sent you": "El código está en camino. Para iniciar sesión, escriba el código que le hemos enviado",
  "Your code is on the way. To log in, enter the code we texted to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por mensaje de texto a",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ya existe una cuenta con el correo ingresado.",
  "Confirm a Code": "Confirmar un código",
  "Confirm Sign In": "Confirmar inicio de sesión",
  "Forgot Password": "Olvidé mi contraseña",
  "Incorrect username or password.": "Nombre de usuario o contraseña incorrecta",
  "Invalid password format": "Formato de contraseña inválido",
  "Invalid phone number format": "Formato de número de teléfono inválido",
  "Loading...": "Cargando...",
  "New Password": "Nueva contraseña",
  "Resend a Code": "Reenviar un código",
  "Sign Out": "Cerrar sesión",
  "Sign Up with Amazon": "Crear cuenta con Amazon",
  "Sign Up with Apple": "Crear cuenta con Apple",
  "Sign Up with Facebook": "Crear cuenta con Facebook",
  "Sign Up with Google": "Crear cuenta con Google",
  "Sign Up": "Crear cuenta",
  "User already exists": "El usuario ya existe",
  "User does not exist": "El usuario no existe",
  "Username cannot be empty": "El nombre de usuario no puede estar vacío",
  "Your passwords must match": "Las contraseñas deben coincidir"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/fr.mjs
var frDict = {
  "Account recovery requires verified contact information": "La récupération du compte nécessite des informations de contact vérifiées",
  "Back to Sign In": "Retour à la connexion",
  "Change Password": "Modifier le mot de passe",
  Changing: "Modification en cours",
  Code: "Code",
  "Confirm Password": "Confirmez le mot de passe",
  "Confirm Sign Up": "Confirmer l'inscription",
  "Confirm SMS Code": "Confirmer le code SMS",
  "Confirm TOTP Code": "Confirmer le code TOTP",
  Confirm: "Confirmer",
  "Confirmation Code": "Code de confirmation",
  Confirming: "Confirmation",
  "Create a new account": "Créer un nouveau compte",
  "Create Account": "Créer un compte",
  "Creating Account": `Création d'un compte`,
  "Dismiss alert": `Supprimer l'alerte`,
  Email: "Email",
  "Enter your code": "Saisissez cotre code de confirmation",
  "Enter your Email": "Saisissez votre adresse email",
  "Enter your phone number": "Saisissez votre numéro de téléphone",
  "Enter your username": "Saisissez votre nom d'utilisateur",
  "Forgot your password?": "Mot de passe oublié ? ",
  "Hide password": "Masquer le mot de passe",
  "It may take a minute to arrive": "Cela peut prendre une minute",
  Loading: "Chargement en cours",
  "New password": "Nouveau mot de passe",
  or: "ou",
  Password: "Mot de passe",
  "Phone Number": "Numéro de téléphone",
  "Resend Code": "Renvoyer le code",
  "Reset your Password": "Réinitialiser votre mot de passe",
  "Reset your password": "Réinitialisez votre mot de passe",
  "Send code": "Envoyer le code",
  "Send Code": "M'envoyer un code",
  Sending: "Envoi en cours",
  "Setup TOTP": "Configuration de TOTP",
  "Show password": "Afficher le mot de passe",
  "Sign in to your account": "Connexion à votre compte",
  "Sign In with Amazon": "Se connecter avec Amazon",
  "Sign In with Apple": "Se connecter avec Apple",
  "Sign In with Facebook": "Se connecter avec Facebook",
  "Sign In with Google": "Se connecter avec Google",
  "Sign in": "Se connecter",
  "Sign In": "Se connecter",
  "Signing in": "Connexion en cours",
  Skip: "Passer",
  Submit: "Soumettre",
  Submitting: "Envoi en cours",
  Username: "Nom d'utilisateur",
  "Verify Contact": "Vérifier le contact",
  Verify: "Vérifier",
  "We Sent A Code": "Nous avons envoyé un code",
  "We Texted You": "Nous vous avons envoyé un SMS",
  "Your code is on the way. To log in, enter the code we sent you": `Votre code est en cours d'envoi. Pour vous connecter, saisissez le code que nous vous avons envoyé`,
  // Additional translations provided by customers
  "An account with the given email already exists.": "Un utilisateur avec cette adresse email existe déjà.",
  Change: "Modifier",
  "Confirm a Code": "Confirmer un code",
  "Confirm Sign In": "Confirmer la connexion",
  "Create account": "Créer un compte",
  "Enter your password": "Saisissez votre mot de passe",
  "Forgot Password": "Mot de passe oublié",
  "Have an account? ": "Déjà un compte ? ",
  Hello: "Bonjour",
  "Incorrect username or password": "Identifiant ou mot de passe incorrect",
  "Invalid password format": "Format de mot de passe invalide",
  "Invalid phone number format": `Format de numéro de téléphone invalide. Veuillez utiliser un format +12345678900`,
  "Loading...": "Chargement...",
  "Lost your code? ": "Vous avez perdu votre code ? ",
  "Network error": "Erreur réseau",
  "New Password": "Nouveau mot de passe",
  "No account? ": "Pas de compte ? ",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Réinitialisez votre mot de passe",
  Send: "Envoyer",
  "Sign In with AWS": "Se connecter avec AWS",
  "Sign Out": "Déconnexion",
  "Sign Up": "S'inscrire",
  SMS: "SMS",
  "User already exists": "L'utilisateur existe déjà",
  "User does not exist": "L'utilisateur n'existe pas",
  "Username cannot be empty": "Le nom d'utilisateur doit être renseigné",
  "Username/client id combination not found.": "L'utilisateur n'existe pas",
  "We Emailed You": "Nous vous avons envoyé un code",
  "Your code is on the way. To log in, enter the code we emailed to": "Votre code est en route. Pour vous connecter entrez le code reçu sur cette adresse email",
  "Your code is on the way. To log in, enter the code we texted to": "Votre code est en route. Pour vous connecter entrez le code reçu sur ce numéro de téléphone",
  "Your passwords must match": "Vos mots de passe doivent être identiques",
  "It may take a minute to arrive.": "Cela peut prendre quelques minutes."
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/it.mjs
var itDict = {
  "Account recovery requires verified contact information": "Il ripristino dell'account richiede informazioni di contatto verificate",
  "Back to Sign In": "Torna alla schermata di accesso",
  "Change Password": "Cambia la password",
  Changing: "Modifica in corso",
  Code: "Codice",
  "Confirm Password": "Conferma la password",
  "Confirm Sign Up": "Conferma registrazione",
  "Confirm SMS Code": "Conferma codice SMS",
  "Confirm TOTP Code": "Conferma codice TOTP",
  Confirm: "Conferma",
  "Confirmation Code": "Codice di verifica",
  Confirming: "Conferma in corso",
  "Create a new account": "Crea un nuovo account",
  "Create Account": "Crea Account",
  "Creating Account": "Creazione account in corso",
  "Dismiss alert": `Ignora l'avviso`,
  Email: "Email",
  "Enter your code": "Inserisci il tuo codice",
  "Enter your Email": "Inserisci la tua e-mail",
  "Enter your phone number": 'Inserisci il tuo numero di telefono"',
  "Enter your username": "Inserisci il tuo nome utente",
  "Forgot your password?": "Password dimenticata?",
  "Hide password": "Nascondi password",
  "It may take a minute to arrive": "L'arrivo potrebbe richiedere qualche minuto",
  Loading: "Caricamento in corso",
  "New password": "Nuova password",
  or: "oppure",
  Password: "Password",
  "Phone Number": "Numero di telefono",
  "Resend Code": "Invia nuovamente il codice",
  "Reset your Password": "Reimposta la tua Password",
  "Reset your password": "Reimposta la tua password",
  "Send code": "Invia codice",
  "Send Code": "Invia codice",
  Sending: "Invio in corso",
  "Setup TOTP": "Configura TOTP",
  "Show password": "Mostra password",
  "Sign in to your account": "Accedi al tuo account",
  "Sign In with Amazon": "Accedi con Amazon",
  "Sign In with Apple": "Accedi con Apple",
  "Sign In with Facebook": "Accedi con Facebook",
  "Sign In with Google": "Accedi con Google",
  "Sign in": "Accedi",
  "Sign In": "Accedi",
  "Signing in": "Accesso in corso",
  Skip: "Salta",
  Submit: "Invia",
  Submitting: "Invio in corso",
  Username: "Nome utente",
  "Verify Contact": "Verifica contatto",
  Verify: "Verifica",
  "We Emailed You": "Ti abbiamo inviato un'e-mail",
  "We Sent A Code": "Ti abbiamo inviato un codice",
  "We Texted You": "Ti abbiamo inviato un SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Il codice è in arrivo. Per effettuare l'accesso, immetti il codice che ti abbiamo inviato via e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Il codice è in arrivo. Per accedere, immetti il codice che ti abbiamo inviato",
  "Your code is on the way. To log in, enter the code we texted to": "Il codice è in arrivo. Per accedere, immetti il codice che abbiamo inviato tramite SMS",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Questa email è già utilizzata da un altro account.",
  "Confirm a Code": "Conferma un codice",
  "Confirm Sign In": "Conferma l'accesso",
  "Create account": "Crea account",
  "Enter your password": "Inserisci la tua password",
  "Forgot Password?": "Password dimenticata?",
  "Have an account? ": "Già registrato?",
  "Incorrect username or password": "Nome utente o password errati",
  "Invalid password format": "Formato della password non valido",
  "Invalid phone number format": "Formato del numero di telefono non valido",
  "Lost your code?": "Codice smarrito?",
  "New Password": "Nuova password",
  "No account? ": "Non hai un account?",
  "Password attempts exceeded": "Il numero massimo di tentativi di accesso falliti è stato raggiunto",
  "Reset password": "Reimposta password",
  "Sign Out": "Esci",
  "Sign Up": "Registrati",
  "User already exists": "Utente già esistente",
  "User does not exist": "Utente inesistente",
  "Username cannot be empty": "Il nome utente non può essere vuoto"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ja.mjs
var jaDict = {
  "Account recovery requires verified contact information": "アカウントの復旧には確認済みの連絡先が必要です",
  "Back to Sign In": "サインインに戻る",
  "Change Password": "パスワードを変える ",
  Changing: "変更中",
  Code: "コード",
  "Confirm Password": "パスワードの確認",
  "Confirm Sign Up": "登録する",
  "Confirm SMS Code": "SMS コードを確認",
  "Confirm TOTP Code": "TOTP コードを確認",
  Confirm: "確定",
  "Confirmation Code": "確認コード",
  Confirming: "確認中",
  "Create a new account": "新しいアカウントを作る",
  "Create Account": "アカウントを作る",
  "Creating Account": "アカウントの作成中",
  "Dismiss alert": "アラートを閉じる",
  Email: "メールアドレス",
  "Enter your code": "コードを入力",
  "Enter your Email": "メールアドレスを入力",
  "Enter your phone number": "電話番号を入力",
  "Enter your username": "ユーザー名を入力 ",
  "Forgot your password?": "パスワードを忘れましたか？ ",
  "Hide password": "パスワードを非表示",
  "It may take a minute to arrive": "到着するまでに 1 分かかることがあります。",
  Loading: "ロード中",
  "New password": "新しいパスワード",
  or: "又は",
  Password: "パスワード ",
  "Phone Number": "電話番号",
  "Resend Code": "コードを再送信",
  "Reset your Password": "パスワードをリセット",
  "Reset your password": "パスワードをリセットする",
  "Send code": "コードを送信",
  "Send Code": "コードを送信",
  Sending: "送信中",
  "Setup TOTP": "TOTP をセットアップ",
  "Show password": "パスワードを表示",
  "Sign in to your account": "アカウントにサインイン ",
  "Sign In with Amazon": "Amazonでサインイン",
  "Sign In with Apple": "Apple でサインイン",
  "Sign In with Facebook": "Facebookでサインイン",
  "Sign In with Google": "Googleでサインイン",
  "Sign In": "サインイン ",
  "Sign in": "サインイン",
  "Signing in": "サインイン中",
  Skip: "スキップ",
  Submit: "送信",
  Submitting: "送信中",
  Username: "ユーザー名 ",
  "Verify Contact": "連絡先を確認",
  Verify: "確認",
  "We Sent A Code": "コードが送信されました",
  "We Texted You": "テキストが送信されました",
  "Your code is on the way. To log in, enter the code we sent you": "コードが途中です。ログインするには、送信したコードを入力してください。",
  // Additional translations provided by customers
  "An account with the given email already exists.": "入力されたメールアドレスのアカウントが既に存在します",
  "Confirm a Code": "コードを確認",
  "Confirm Sign In": "サインインする",
  "Create account": "アカウントを作る ",
  "Enter your password": "パスワードを入力 ",
  "Enter your Password": "パスワードを入力",
  "Please confirm your Password": "パスワードを入力",
  "Forgot Password": "パスワードを忘れた ",
  "Have an account? ": "アカウントを持っていますか？",
  "Incorrect username or password": "ユーザー名かパスワードが異なります ",
  "Invalid password format": "パスワードの形式が無効です ",
  "Invalid phone number format": "不正な電話番号の形式です。\n+12345678900 の形式で入力してください",
  "It may take a minute to arrive.": "コードを受信するまで数分かかる場合があります。",
  "Lost your code? ": "コードを失くしましたか？",
  "New Password": "新しいパスワード",
  "No account? ": "アカウントが無いとき ",
  "Password attempts exceeded": "サインインの試行回数が上限に達しました",
  "Reset password": "パスワードをリセット ",
  "Reset Password": "パスワードをリセット",
  "Sign Out": "サインアウト ",
  "Sign Up": "登録 ",
  "User already exists": "既にユーザーが存在しています ",
  "User does not exist": "ユーザーが存在しません ",
  "Username cannot be empty": "ユーザー名は入力必須です",
  "We Emailed You": "コードを送信しました",
  "Your code is on the way. To log in, enter the code we emailed to": "ログインするには、メールに記載されたコードを入力してください。送信先:",
  "Your code is on the way. To log in, enter the code we texted to": "ログインするには、テキストメッセージに記載されたコードを入力してください。送信先:"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/kr.mjs
var krDict = {
  "Account recovery requires verified contact information": "계정 복구를 위해 연락처 확인이 필요합니다",
  "Back to Sign In": "로그인으로 돌아가기",
  "Change Password": "비밀번호 변경하기",
  Changing: "변경중",
  Code: "코드",
  "Confirm Password": "비밀번호 재확인",
  "Confirm Sign Up": "회원가입 확인",
  "Confirm SMS Code": "휴대폰 본인 확인",
  "Confirm TOTP Code": "TOTP 인증번호 확인",
  Confirm: "확인",
  "Confirmation Code": "인증번호",
  Confirming: "확인중",
  "Create a new account": "회원가입",
  "Create Account": "회원가입",
  "Creating Account": "회원가입중",
  "Dismiss alert": "알림 무시",
  Email: "이메일",
  "Enter your code": "인증번호를 입력해주세요",
  "Enter your Email": "이메일 입력",
  "Enter your phone number": "전화번호 입력",
  "Enter your username": "아이디를 입력해주세요",
  "Hide password": "비밀번호 숨기기",
  "It may take a minute to arrive": "도착하는 데 1분 정도 걸릴 수 있습니다",
  Loading: "로딩중",
  "New password": "새 비밀번호",
  or: "또는",
  Password: "비밀번호",
  "Phone Number": "전화번호",
  "Resend Code": "인증번호 재전송",
  "Reset your password": "비밀번호 재설정",
  "Reset your Password": "비밀번호 재설정",
  "Send code": "인증코드 보내기",
  "Send Code": "코드 전송",
  Sending: "전송중",
  "Setup TOTP": "TOTP 설정하기",
  "Show password": "비밀번호 보이기",
  "Sign in to your account": "로그인",
  "Sign In with Amazon": "Amazon 로그인",
  "Sign In with Apple": "Apple 로그인",
  "Sign In with Facebook": "Facebook 로그인",
  "Sign In with Google": "Google 로그인",
  "Sign in": "로그인",
  "Sign In": "로그인",
  "Signing in": "로그인중",
  Skip: "다음에 하기",
  Submit: "확인",
  Submitting: "확인중",
  Username: "아이디",
  "Verify Contact": "연락처 확인",
  Verify: "인증",
  "We Emailed You": "이메일을 보냄",
  "We Sent A Code": "코드를 보냄",
  "We Texted You": "문자 메시지를 보냄",
  "Your code is on the way. To log in, enter the code we emailed to": "코드가 전송 중입니다. 로그인하려면 이메일로 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we sent you": "코드가 전송 중입니다. 로그인하려면 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we texted to": "코드가 전송 중입니다. 로그인하려면 문자 메시지로 전송한 코드를 입력하세요",
  // Additional translations provided by customers
  Birthdate: "생년월일",
  "Family Name": "성",
  "Forgot your password?": "비밀번호를 잊으셨나요?",
  "Given Name": "이름",
  Name: "성함",
  Nickname: "닉네임",
  "Preferred Username": "닉네임",
  Profile: "프로필",
  "Reset Password": "비밀번호 재설정",
  Website: "웹사이트"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nb.mjs
var nbDict = {
  "Account recovery requires verified contact information": "Gjenoppretting av konto krever verifisert kontaktinformajson",
  "Add your Profile": "Legg til profilen din",
  "Add your Website": "Legg til nettsiden din",
  "Back to Sign In": "Tilbake til innlogging",
  "Change Password": "Bytt passord",
  Changing: "Endre",
  Code: "Kode",
  "Confirm Password": "Bekreft passordet",
  "Confirm Sign Up": "Bekreft registrering",
  "Confirm SMS Code": "Bekreft SMS-kode",
  "Confirm TOTP Code": "Bekreft TOTP-kode",
  Confirm: "Bekreft",
  "Confirmation Code": "Bekreftelseskode",
  Confirming: "Bekrefter",
  "Create a new account": "Opprett en ny konto",
  "Create Account": "Opprett konto",
  "Creating Account": "Oppretter konto",
  "Dismiss alert": "Avvis varsel",
  Email: "E-post",
  "Enter your Birthdate": "Skriv inn fødselsdatoen din",
  "Enter your code": "Skriv inn koden din",
  "Enter your Confirmation Code": "Skriv inn bekreftelseskoden din",
  "Enter your Email": "Skriv inn e-postadressen din",
  "Enter your Family Name": "Skriv inn etternavnet ditt",
  "Enter your Given Name": "Skriv inn fornavnet ditt",
  "Enter your Middle Name": "Skriv inn mellomnavnet ditt",
  "Enter your Name": "Skriv inn navnet ditt",
  "Enter your Nickname": "Skriv inn kallenavnet ditt",
  "Enter your Password": "Skriv inn passordet ditt",
  "Enter your phone number": "Skriv inn telefonnummeret ditt",
  "Enter your Preferred Username": "Skriv inn det foretrukne brukernavnet ditt",
  "Enter your username": "Skriv inn brukernavnet ditt",
  "Forgot password?": "Glemt passord?",
  "Forgot your password?": "Glemt passordet ditt?",
  "Hide password": "Skjul passordet",
  "It may take a minute to arrive": "Det kan ta et minutt for å komme frem",
  Loading: "Laster inn",
  "New password": "Nytt passord",
  or: "eller",
  Password: "Passord",
  "Phone Number": "Telefonnummer",
  "Please confirm your Password": "Vennligst bekreft passordet ditt",
  "Resend Code": "Send koden på nytt",
  "Reset your password": "Nullstill passordet ditt",
  "Reset your Password": "Nullstill passordet ditt",
  "Send code": "Send kode",
  "Send Code": "Send kode",
  Sending: "Sender",
  "Setup TOTP": "Konfigurer TOTP",
  "Show password": "Vis passordet",
  "Sign in to your account": "Logg inn på kontoen din",
  "Sign In with Amazon": "Logg inn med Amazon",
  "Sign In with Apple": "Logg inn med Apple",
  "Sign In with Facebook": "Logg inn med Facebook",
  "Sign In with Google": "Logg inn med Google",
  "Sign in": "Logg inn",
  "Sign In": "Logg inn",
  "Signing in": "Logger inn",
  Skip: "Hopp over",
  Submit: "Send inn",
  Submitting: "Sender inn",
  Username: "Brukernavn",
  "Verify Contact": "Bekreft kontakt",
  Verify: "Bekreft",
  "We Emailed You": "Vi sendte deg en e-post",
  "We Sent A Code": "Vi sendte en kode",
  "We Texted You": "Vi sendte deg en tekstmelding",
  "Your code is on the way. To log in, enter the code we emailed to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte e-post til",
  "Your code is on the way. To log in, enter the code we sent you": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte deg",
  "Your code is on the way. To log in, enter the code we texted to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte tekstmelding til",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finnes allerede en konto med denne e-postadressen",
  "Confirm a Code": "Bekreft koden",
  "Confirm Sign In": "Bekreft innlogging",
  "Create account": "Opprett konto",
  "Enter your password": "Skriv inn passordet ditt",
  "Forgot Password": "Glemt passordet",
  "Have an account? ": "Har en konto allerede? ",
  "Incorrect username or password": "Feil brukernavn eller passord",
  "Invalid password format": "Ugyldig passordformat",
  "Invalid phone number format": "Ugyldig telefonnummerformat",
  "Lost your code? ": "Mistet koden? ",
  "New Password": "Nytt passord",
  "No account? ": "Ingen konto? ",
  "Password attempts exceeded": "For mange mislykkede passordforsøk",
  "Reset password": "Nullstill passord",
  "Sign Out": "Logg ut",
  "Sign Up": "Registrering",
  "User already exists": "Brukeren finnes allerede",
  "User does not exist": "Brukeren finnes ikke",
  "Username cannot be empty": "Brukernavnet kan ikke være tomt"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nl.mjs
var nlDict = {
  "Account recovery requires verified contact information": "Accountherstel vereist geverifieerde contactgegevens",
  "Back to Sign In": "Terug naar inloggen",
  "Change Password": "Wachtwoord wijzigen",
  Changing: "Wordt aangepast",
  Code: "Code",
  "Confirm Password": "Bevestig Wachtwoord",
  "Confirm Sign Up": "Bevestig inschrijving",
  "Confirm SMS Code": "Bevestig SMS Code",
  "Confirm TOTP Code": "Bevestig TOTP Code",
  Confirm: "Bevestig",
  "Confirmation Code": "Bevestigingscode",
  Confirming: "Bevestigen",
  "Create a new account": "Nieuw account aanmaken",
  "Create Account": "Account aanmaken",
  "Creating Account": "Account wordt aangemaakt",
  "Dismiss alert": "Waarschuwing sluiten",
  Email: "E-mail",
  "Enter your code": "Vul je code in",
  "Enter your Email": "Vul je e-mail in",
  "Enter your Password": "Vul je wachtwoord in",
  "Enter your phone number": "Vul je telefoonnummer in",
  "Enter your username": "Vul je gebruikersnaam in",
  "Enter your Username": "Vul je gebruikersnaam in",
  "Forgot your password?": "Wachtwoord vergeten? ",
  "Hide password": "Verberg wachtwoord",
  "It may take a minute to arrive": "Het kan even duren voordat deze aankomt",
  Loading: "Laden",
  "New password": "Nieuw wachtwoord",
  "New Password": "Nieuw Wachtwoord",
  or: "of",
  Password: "Wachtwoord",
  "Phone Number": "Telefoonnummer",
  "Please confirm your Password": "Bevestig je wachtwoord",
  "Resend Code": "Verstuur code nogmaals",
  "Reset Password": "Wachtwoord resetten",
  "Reset your password": "Reset je wachtwoord",
  "Reset your Password": "Wachtwoord resetten",
  "Send code": "Verstuur code",
  "Send Code": "Verstuur Code",
  Sending: "Versturen",
  "Setup TOTP": "TOTP Instellingen",
  "Show password": "Toon wachtwoord",
  "Sign in to your account": "Inloggen op je account",
  "Sign In with Amazon": "Inloggen met Amazon",
  "Sign In with Apple": "Inloggen met Apple",
  "Sign In with Facebook": "Inloggen met Facebook",
  "Sign In with Google": "Inloggen met Google",
  "Sign in": "Inloggen",
  "Sign In": "Inloggen",
  "Signing in": "Inloggen",
  Skip: "Overslaan",
  Submit: "Versturen",
  Submitting: "Wordt verstuurd",
  Username: "Gebruikersnaam",
  "Verify Contact": "Verifieer Contact",
  Verify: "Verifieer",
  "We Emailed You": "We hebben u een e-mail gestuurd",
  "We Sent A Code": "We hebben een code gestuurd",
  "We Texted You": "We hebben u een sms gestuurd",
  "Your code is on the way. To log in, enter the code we emailed to": "Uw code is onderweg. Om in te loggen, voer de code in die we gemaild hebben naar",
  "Your code is on the way. To log in, enter the code we sent you": "Uw code is onderweg. Om in te loggen, voer de code in die we u hebben gestuurd",
  "Your code is on the way. To log in, enter the code we texted to": "Uw code is onderweg. Om in te loggen, voer de code in die we hebben gestuurd naar",
  "Your passwords must match": "Je wachtwoorden moeten overeenkomen"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pl.mjs
var plDict = {
  "Account recovery requires verified contact information": "Odzyskanie konta wymaga zweryfikowanych danych kontaktowych",
  "Back to Sign In": "Powrót do logowania",
  "Change Password": "Zmień hasło",
  Changing: "Zmienianie",
  Code: "Kod",
  "Confirm Password": "Potwierdź Hasło",
  "Confirm Sign Up": "Potwierdź rejestrację",
  "Confirm SMS Code": "Potwierdź kod SMS",
  "Confirm TOTP Code": "Potwierdź hasło jednorazowe",
  Confirm: "Potwierdź",
  "Confirmation Code": "Kod potwierdzenia",
  Confirming: "Potwierdzanie",
  "Create a new account": "Utwórz nowe konto",
  "Create Account": "Utwórz konto",
  "Creating Account": "Tworzenie konta",
  "Dismiss alert": "Odrzuć alert",
  Email: "E-mail",
  "Enter your code": "Wprowadź swój kod",
  "Enter your Email": "Wpisz swój adres e-mail",
  "Enter your phone number": "Wpisz swój numer telefonu",
  "Enter your username": "Wprowadź swoją nazwę użytkownika",
  "Forgot your password?": "Zapomniałeś hasła? ",
  "Hide password": "Ukryj hasło",
  "It may take a minute to arrive": "Może to chwilę potrwać",
  Loading: "Ładowanie",
  "New password": "Nowe hasło",
  or: "albo",
  Password: "Hasło",
  "Phone Number": "Numer telefonu",
  "Resend Code": "Wyślij kod ponownie",
  "Reset your password": "Zresetuj swoje hasło",
  "Reset your Password": "Zresetuj swoje hasło",
  "Send code": "Wyślij kod",
  "Send Code": "Zresetuj hasło",
  Sending: "Wysyłanie",
  "Setup TOTP": "Konfiguruj TOTP",
  "Show password": "Pokaż hasło",
  "Sign in to your account": "Zaloguj się na swoje konto",
  "Sign In with Amazon": "Zaloguj z Amazon",
  "Sign In with Apple": "Zaloguj z Apple",
  "Sign In with Facebook": "Zaloguj z Facebook",
  "Sign In with Google": "Zaloguj z Google",
  "Sign In": "Logowanie",
  "Sign in": "Zaloguj",
  "Signing in": "Logowanie",
  Skip: "Pomiń",
  Submit: "Wyślij",
  Submitting: "Wysyłanie",
  Username: "Nazwa użytkownika",
  "Verify Contact": "Weryfikacja danych kontaktowych",
  Verify: "Zweryfikuj",
  // Additional translations provided by customers
  Birthdate: "Data urodzenia",
  "Family Name": "Nazwisko",
  "Given Name": "Pierwsze imię",
  "Middle Name": "Drugie imię",
  Name: "Imię i nazwisko",
  Nickname: "Pseudonim",
  "Preferred Username": "Preferowana nazwa użytkownika",
  Profile: "Profil",
  Website: "Strona internetowa",
  "We Emailed You": "Wysłaliśmy Ci wiadomość e-mail",
  "We Sent A Code": "Wysłaliśmy kod",
  "We Texted You": "Wysłaliśmy Ci wiadomość SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany na adres e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Twój kod został wysłany. Aby się zalogować, wprowadź wysłany do Ciebie kod",
  "Your code is on the way. To log in, enter the code we texted to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany do Ciebie w wiadomości SMS pod numer"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pt.mjs
var ptDict = {
  "Account recovery requires verified contact information": "A recuperação da conta requer informações de contato verificadas",
  "Back to Sign In": "Voltar para Entrar",
  "Change Password": "Mudar senha",
  Changing: "Mudando",
  Code: "Código",
  "Confirm Password": "Confirme a Senha",
  "Confirm Sign Up": "Confirmar inscrição",
  "Confirm SMS Code": "Confirme o código SMS",
  "Confirm TOTP Code": "Confirme o código TOTP",
  Confirm: "confirme",
  "Confirmation Code": "Código de confirmação",
  Confirming: "Confirmando",
  "Create a new account": "Criar uma nova conta",
  "Create Account": "Criar Conta",
  "Creating Account": "Criando conta",
  "Dismiss alert": "Descartar alerta",
  Email: "O email",
  "Enter your code": "Insira seu código",
  "Enter your Email": "Digite seu e-mail",
  "Enter your phone number": "Digite seu número de telefone",
  "Enter your username": "entre com seu nome de usuário",
  "Forgot your password?": "Esqueceu sua senha? ",
  "Hide password": "Esconder a senha",
  "It may take a minute to arrive": "Pode levar um minuto para chegar",
  Loading: "Carregando",
  "New password": "Nova Senha",
  or: "ou",
  Password: "Senha",
  "Phone Number": "Número de telefone",
  "Resend Code": "Reenviar código",
  "Reset your password": "Redefina sua senha",
  "Reset your Password": "Redefina sua senha",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar senha",
  "Sign in to your account": "Faça login em sua conta",
  "Sign In with Amazon": "Entrar com a Amazon",
  "Sign In with Apple": "Entrar com a Apple",
  "Sign In with Facebook": "Entrar com o Facebook",
  "Sign In with Google": "Faça login no Google",
  "Sign in": "Entrar",
  "Sign In": "Entrar",
  "Signing in": "Entrando",
  Skip: "Pular",
  Submit: "Enviar",
  Submitting: "Enviando",
  Username: "Nome do usuário",
  "Verify Contact": "Verificar contato",
  Verify: "Verificar",
  "We Emailed You": "Enviamos um e-mail para você",
  "We Sent A Code": "Enviamos um código",
  "We Texted You": "Enviamos um SMS para você",
  "Your code is on the way. To log in, enter the code we emailed to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos um e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Seu código está a caminho. Para fazer login, insira o código que enviamos para você",
  "Your code is on the way. To log in, enter the code we texted to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos uma mensagem de texto"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/zh.mjs
var zhDict = {
  "Account recovery requires verified contact information": "账户恢复需要验证过的联系方式",
  "Back to Sign In": "回到登录",
  "Change Password": "更改密码",
  Changing: "正在修改",
  Code: "确认码",
  "Confirm Password": "确认密码",
  "Confirm Sign Up": "确认注册",
  "Confirm SMS Code": "确认短信验证码",
  "Confirm TOTP Code": "确认 TOTP 代码",
  Confirm: "确认",
  "Confirmation Code": "确认码",
  Confirming: "正在确认",
  "Create a new account": "创建新账户",
  "Create Account": "创建账户",
  "Creating Account": "正在创建账户",
  "Dismiss alert": "关闭警报",
  Email: "邮箱",
  "Enter your code": "输入验证码",
  "Enter your Email": "输入电子邮件",
  "Enter your phone number": "输入电话号码",
  "Enter your username": "输入用户名",
  "Forgot your password?": "忘记密码了？",
  "Hide password": "隐藏密码",
  "It may take a minute to arrive": "可能需要一分钟才能到达",
  Loading: "正在加载",
  "New password": "新密码",
  or: "或者",
  Password: "密码",
  "Phone Number": "电话",
  "Resend Code": "重发验证码",
  "Reset your password": "重置密码",
  "Reset your Password": "重置密码",
  "Send Code": "发送确认码",
  "Send code": "发送验证码",
  Sending: "正在发送",
  "Setup TOTP": "设置 TOTP",
  "Show password": "显示密码",
  "Sign in to your account": "登录账户",
  "Sign In with Amazon": "通过 Amazon 登录",
  "Sign In with Apple": "通过 Apple 登录",
  "Sign In with Facebook": "通过 Facebook 登录",
  "Sign In with Google": "通过 Google 登录",
  "Sign in": "登录",
  "Sign In": "登录",
  "Signing in": "正在登录",
  Skip: "跳过",
  Submit: "提交",
  Submitting: "正在提交",
  Username: "用户名",
  "Verify Contact": "验证联系方式",
  Verify: "验证",
  "We Emailed You": "我们给您发送了电子邮件",
  "We Sent A Code": "我们发送了代码",
  "We Texted You": "我们给您发送了短信",
  "Your code is on the way. To log in, enter the code we emailed to": "您的代码正在发送中。要登录，请输入我们通过电子邮件发送给以下人员的代码：",
  "Your code is on the way. To log in, enter the code we sent you": "您的代码正在发送中。要登录，请输入我们发送给您的代码",
  "Your code is on the way. To log in, enter the code we texted to": "您的代码正在发送中。要登录，请输入我们通过短信发送给以下人员的代码：",
  // Additional translations provided by customers
  "Confirm a Code": "确认码",
  "Confirm Sign In": "确认登录",
  "Forgot Password": "忘记密码",
  "Incorrect username or password": "用户名或密码错误",
  "Invalid password format": "密码格式错误",
  "Invalid phone number format": "电话格式错误，请使用格式 +12345678900",
  "New Password": "新密码",
  "Resend a Code": "重发确认码",
  "Sign Out": "退出",
  "Sign Up": "注册",
  "User already exists": "用户已经存在",
  "User does not exist": "用户不存在"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/sv.mjs
var svDict = {
  "Account recovery requires verified contact information": "För att återställa kontot behöver du ett verifierat konto",
  "Back to Sign In": "Tillbaka till inloggningen",
  "Change Password": "Byt lösenord",
  Changing: "Ändra",
  Code: "Kod",
  "Confirm Password": "Bekräfta lösenord",
  "Confirm Sign Up": "Bekräfta registrering",
  "Confirm SMS Code": "Bekräfta SMS-kod",
  "Confirm TOTP Code": "Bekräfta TOTP-kod",
  Confirm: "Bekräfta",
  "Confirmation Code": "Verifikationskod",
  Confirming: "Bekräftar",
  "Create a new account": "Skapa ett nytt konto",
  "Create Account": "Skapa konto",
  "Creating Account": "Skapar konto",
  "Dismiss alert": "Avvisa varning",
  Email: "E-post",
  "Enter your code": "Skriv din kod",
  "Enter your Email": "Fyll i din e-post",
  "Enter your phone number": "Ange ditt telefonnummer",
  "Enter your username": "Ange ditt användarnamn",
  "Forgot your password?": "Glömt ditt lösenord? ",
  "Hide password": "Dölj lösenord",
  "It may take a minute to arrive": "Det kan ta en minut att komma fram",
  Loading: "Laddar",
  "New password": "Nytt lösenord",
  or: "eller",
  Password: "Lösenord",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Skicka koden igen",
  "Reset your password": "Återställ ditt lösenord",
  "Reset your Password": "Återställ ditt lösenord",
  "Send code": "Skicka kod",
  "Send Code": "Skicka kod",
  Sending: "Skickar",
  "Setup TOTP": "Konfigurera TOTP",
  "Show password": "Visa lösenord",
  "Sign in to your account": "Logga in till ditt konto",
  "Sign In with Amazon": "Logga in med Amazon",
  "Sign In with Apple": "Logga in med Apple",
  "Sign In with Facebook": "Logga in med Facebook",
  "Sign In with Google": "Logga in med Google",
  "Sign in": "Logga in",
  "Sign In": "Logga in",
  "Signing in": "Loggar in",
  Skip: "Hoppa över",
  Submit: "Skicka",
  Submitting: "Skickar in",
  Username: "Användarnamn",
  "Verify Contact": "Verifiera kontakt",
  Verify: "Verifiera",
  "We Sent A Code": "Vi skickade en kod",
  "We Texted You": "Vi sms:ade dig",
  "Your code is on the way. To log in, enter the code we emailed to": "Din kod är på väg. För att logga in, ange koden vi mejlade till",
  "Your code is on the way. To log in, enter the code we sent you": "Din kod är på väg. För att logga in, ange koden vi skickade till dig",
  "Your code is on the way. To log in, enter the code we texted to": "Din kod är på väg. För att logga in, ange koden vi sms:ade till",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finns redan ett konto med denna e-postadress",
  "Confirm a Code": "Bekräfta koden",
  "Confirm Sign In": "Bekräfta inloggning",
  "Create account": "Skapa konto",
  "Enter your password": "Ange ditt lösenord",
  "Forgot Password": "Glömt lösenordet",
  "Have an account? ": "Redan registrerad? ",
  "Incorrect username or password": "Felaktigt användarnamn eller lösenord",
  "Invalid password format": "Ogiltigt lösenordsformat",
  "Invalid phone number format": `Ogiltigt format för telefonnummer`,
  "Lost your code? ": "Förlorat koden? ",
  "New Password": "Nytt lösenord",
  "No account? ": "Inget konto? ",
  "Password attempts exceeded": "Maximalt antal felaktiga inloggningsförsök har uppnåtts",
  "Reset password": "Återställ lösenord",
  "Sign Out": "Logga ut",
  "Sign Up": "Registrering",
  "User already exists": "Användaren finns redan",
  "User does not exist": "Användaren finns inte",
  "Username cannot be empty": "Användarnamnet kan inte vara tomt",
  "We Emailed You": "Vi har skickat e-post till dig"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/id.mjs
var idDict = {
  "Account recovery requires verified contact information": "Pemulihan akun memerlukan informasi kontak terverifikasi",
  "Back to Sign In": "Kembali ke Masuk",
  "Change Password": "Ubah kata sandi",
  Changing: "Mengubah",
  Code: "Kode",
  "Confirm Password": "Konfirmasi kata sandi",
  "Confirm Sign Up": "Konfirmasi Pendaftaran",
  "Confirm SMS Code": "Konfirmasi Kode SMS",
  "Confirm TOTP Code": "Konfirmasi Kode TOTP",
  Confirm: "Konfirmasi",
  "Confirmation Code": "Kode Konfirmasi",
  Confirming: "Mengkonfirmasi",
  "Create a new account": "Buat akun baru",
  "Create Account": "Buat Akun",
  "Creating Account": "Membuat Akun",
  "Dismiss alert": "Hentikan pemberitahuan",
  Email: "Email",
  "Enter your code": "Masukkan kode anda",
  "Enter your Email": "Masukkan email anda",
  "Enter your phone number": "Masukkan nomor telepon anda",
  "Enter your username": "Masukkan nama akun anda",
  "Forgot your password?": "Lupa kata sandi? ",
  "Hide password": "Sembunyikan kata sandi",
  "It may take a minute to arrive": "Mungkin perlu waktu satu menit untuk tiba",
  Loading: "Memuat",
  "New password": "Kata sandi baru",
  or: "atau",
  Password: "Kata sandi",
  "Phone Number": "Nomor telepon",
  "Resend Code": "Kirim ulang kodenya",
  "Reset your Password": "Reset Kata Sandi",
  "Reset your password": "Ubah kata sandi anda",
  "Send code": "Kirim kode",
  "Send Code": "Kirim Kode",
  Sending: "Mengirim",
  "Setup TOTP": "Siapkan TOTP",
  "Show password": "Tampilkan kata sandi",
  "Sign in to your account": "Masuk akun anda",
  "Sign In with Amazon": "Masuk dengan Amazon",
  "Sign In with Apple": "Masuk dengan Apple",
  "Sign In with Facebook": "Masuk dengan Facebook",
  "Sign In with Google": "Masuk dengan Google",
  "Sign in": "Masuk",
  "Sign In": "Masuk",
  "Signing in": "Memasuki",
  Skip: "Lewati",
  Submit: "Ajukan",
  Submitting: "Mengajukan",
  Username: "Nama akun",
  "Verify Contact": "Verifikasi Kontak",
  Verify: "Verifikasi",
  "We Sent A Code": "Kami Mengirim Kode",
  "We Texted You": "Kami mengirim SMS kepada Anda",
  "Your code is on the way. To log in, enter the code we sent you": "Kode Anda segera hadir. Untuk masuk, masukkan kode yang kami kirimkan kepada Anda",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Akun dengan email tersebut sudah terdaftar.",
  "Attempt limit exceeded, please try after some time.": "Batas percobaan terlampaui, mohon coba lagi setelah beberapa waktu.",
  "Cannot reset password for the user as there is no registered/verified email or phone_number": "Tidak dapat mengatur ulang kata sandi karena tidak ada email terdaftar / terverifikasi atau nomor telepon",
  Change: "Ubah",
  "Confirm a Code": "Konfirmasi kode",
  "Create account": "Buat akun",
  "Enter your password": "Masukkan kata sandi anda",
  "Forgot Password": "Lupa kata sandi",
  "Have an account? ": "Sudah punya akun? ",
  Hello: "Halo",
  "Incorrect username or password.": "Nama akun atau kata sandi salah.",
  "Invalid phone number format": "Nomor telepon tidak sesuai dengan format.",
  "Invalid verification code provided, please try again.": "Kode verifikasi tidak sesuai, mohon coba lagi.",
  "It may take a minute to arrive.": "Mungkin perlu beberapa waktu untuk tiba.",
  "Lost your code? ": "Kode anda hilang?",
  Name: "Nama",
  "Network error": "Galat jaringan",
  "No account? ": "Tidak ada akun?",
  "Password did not conform with policy: Password not long enough": "Kata sandi tidak sesuai dengan aturan: Kata sandi kurang panjang",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Ubah kata sandi anda",
  Send: "Kirim",
  "Sign In with AWS": "Masuk dengan AWS",
  "Sign Up with Amazon": "Daftar dengan Amazon",
  "Sign Up with AWS": "Daftar dengan AWS",
  "Sign Up with Facebook": "Daftar dengan Facebook",
  "Sign Up with Google": "Daftar dengan Google",
  SMS: "SMS",
  "User already exists": "Akun sudah terdaftar",
  "User does not exist.": "Akun tidak terdaftar.",
  "User is disabled.": "Akun dinonaktifkan.",
  "Username cannot be empty": "Nama akun tidak boleh kosong",
  "Username/client id combination not found.": "Nama akun atau id tidak ditemukan.",
  "We Emailed You": "Kami mengirimkanmu email",
  "Your code is on the way. To log in, enter the code we emailed to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami emailkan ke",
  "Your code is on the way. To log in, enter the code we texted to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami tuliskan ke",
  "Your passwords must match": "Kata sandi harus sama"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/tr.mjs
var trDict = {
  "Account recovery requires verified contact information": "Hesap kurtarma, doğrulanmış iletişim bilgilerini gerektirir",
  "Back to Sign In": "Oturum Açmaya Geri Dön",
  "Change Password": "Şifreyi Değiştir",
  Changing: "Değiştiriliyor",
  Code: "Kod",
  "Confirm Password": "Şifreyi Doğrula",
  "Confirm Sign Up": "Kayıt İşlemini Doğrula",
  "Confirm SMS Code": "SMS Kodunu Doğrula",
  "Confirm TOTP Code": "Tek Kullanımlık Şifreyi Doğrula",
  Confirm: "Doğrula",
  "Confirmation Code": "Doğrulama Kodu",
  Confirming: "Doğrulanıyor",
  "Create a new account": "Yeni bir hesap oluştur",
  "Create Account": "Hesap Oluştur",
  "Creating Account": "Hesap Oluşturuluyor",
  "Dismiss alert": "Uyarıyı reddet",
  Email: "E-posta",
  "Enter your code": "Kodu girin",
  "Enter your Email": "E-posta adresinizi girin",
  "Enter your phone number": "Telefon numaranızı girin",
  "Enter your username": "Kullanıcı adınızı girin",
  "Forgot your password?": "Şifrenizi mi unuttunuz?",
  "Hide password": "Şifreyi gizle",
  "It may take a minute to arrive": "Kodun gelmesi bir dakika sürebilir",
  Loading: "Yükleniyor",
  "New password": "Yeni şifre",
  or: "veya",
  Password: "Şifre",
  "Phone Number": "Telefon Numarası",
  "Resend Code": "Kodu Yeniden Gönder",
  "Reset your password": "Şifrenizi sıfırlayın",
  "Reset your Password": "Şifrenizi Sıfırlayın",
  "Send code": "Kod gönder",
  "Send Code": "Kod Gönder",
  Sending: "Gönderiliyor",
  "Setup TOTP": "Tek kullanımlık şifre kurulumu yap",
  "Show password": "Şifreyi göster",
  "Sign in to your account": "Hesabınızda oturum açın",
  "Sign In with Amazon": "Amazon ile Oturum Aç",
  "Sign In with Apple": "Apple ile Oturum Aç",
  "Sign In with Facebook": "Facebook ile Oturum Aç",
  "Sign In with Google": "Google ile Oturum Aç",
  "Sign in": "Oturum aç",
  "Sign In": "Oturum Aç",
  "Signing in": "Oturum açılıyor",
  Skip: "Atla",
  Submit: "Gönder",
  Submitting: "Gönderiliyor",
  Username: "Kullanıcı adı",
  "Verify Contact": "Kişiyi Doğrula",
  Verify: "Doğrula",
  "We Emailed You": "Size E-posta Gönderdik",
  "We Sent A Code": "Bir Kod Gönderdik",
  "We Texted You": "Size Mesaj Gönderdik",
  "Your code is on the way. To log in, enter the code we emailed to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz e-postadaki kodu girin",
  "Your code is on the way. To log in, enter the code we sent you": "Kodunuz yolda. Oturum açmak için, size gönderdiğimiz kodu girin",
  "Your code is on the way. To log in, enter the code we texted to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz mesajdaki kodu girin",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Bu e-postaya ait zaten bir hesap var.",
  "Confirm Sign In": "Oturum Açmayı Doğrula",
  "Have an account? ": "Hesabınız var mı? ",
  "Incorrect username or password": "Yanlış kullanıcı adı ya da şifre",
  "Invalid password format": "Geçersiz parola formatı",
  "Invalid phone number format": "Geçersiz telefon numarası formatı",
  "Lost your code? ": "Kodu mu kaybettiniz? ",
  "No account? ": "Hesabınız yok mu? ",
  "Password attempts exceeded": "Maksimum oturum açma girişimi aşıldı",
  "Sign Out": "Çıkış yap",
  "Sign Up": "Kayıt Ol",
  "User already exists": "Bu kullanıcı zaten var",
  "User does not exist": "Böyle bir kullanıcı mevcut değil",
  "Username cannot be empty": "Kullanıcı adı boş olamaz"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ru.mjs
var ruDict = {
  "Account recovery requires verified contact information": "Восстановление учетной записи требует проверки контактной информации",
  "Back to Sign In": "Назад, чтобы войти",
  "Change Password": "изменять пароль",
  Changing: "Изменение",
  Code: "Код",
  "Confirm Password": "Подтверждение пароля",
  "Confirm Sign Up": "Подтверждение зарегистрироваться",
  "Confirm SMS Code": "Подтверждение CMC-Код",
  "Confirm TOTP Code": "Подтверждение TOTP-Код",
  Confirm: "Подтверждать",
  "Confirmation Code": "код подтверждения",
  Confirming: "подтверждение",
  "Create a new account": "Создавать новую учетную запись",
  "Create Account": "Создать учетную запись",
  "Creating Account": "создание учетная запись",
  "Dismiss alert": "Закрыть оповещение",
  Email: "электронная почта",
  "Enter your code": "ввести ваш Код",
  "Enter your Email": "ввести ваш электронная почта",
  "Enter your phone number": "ввести ваш номер телефона",
  "Enter your username": "ввести ваш имя пользователя",
  "Forgot your password?": "Забыли ваш пароль?",
  "Hide password": "Скрывать пароль",
  "It may take a minute to arrive": "Доставка может занять некоторое время",
  Loading: "Загрузка",
  "New password": "Новый пароль",
  or: "или",
  Password: "Пароль",
  "Phone Number": "Номер телефона",
  "Resend Code": "Отправь еще раз Код",
  "Reset your password": "сброс ваш пароль",
  "Reset your Password": "сброс ваш Пароль",
  "Send code": "Отправлять Код",
  "Send Code": "Отправлять Код",
  Sending: "отправка",
  "Setup TOTP": "Настраивать TOTP",
  "Show password": "Показывать пароль",
  "Sign in to your account": "знак в свой аккаунт",
  "Sign In with Amazon": "знак в с Amazon",
  "Sign In with Apple": "знак в с Apple",
  "Sign In with Facebook": "знак в с Facebook",
  "Sign In with Google": "знак в с Google",
  "Sign in": "знак в",
  "Sign In": "знак в",
  "Signing in": "подписание в",
  Skip: "Пропускать",
  Submit: "Представлять на рассмотрение",
  Submitting: "Представив",
  Username: "Имя пользователя",
  "Verify Contact": "Проверить контакт",
  Verify: "Проверить",
  "We Emailed You": "Мы отправили вам электронное письмо",
  "We Sent A Code": "Мы отправили код",
  "We Texted You": "Мы отправили вам текстовое сообщение",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили по электронной почте",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы послали вам",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили текстовым сообщением"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/he.mjs
var heDict = {
  "Account recovery requires verified contact information": "שחזור לקוח דורש עוד מידע",
  "Back to Sign In": "חזור להרשמה",
  "Change Password": "עדכון סיסמא",
  Changing: "מעדכן",
  Code: "קוד",
  "Confirm Password": "אשר סיסמא",
  "Confirm Sign Up": "אשר הרשמה",
  "Confirm SMS Code": "אשר sms קוד",
  "Confirm TOTP Code": "אשר totp קוד",
  Confirm: "אישור",
  "Confirmation Code": "אישור קוד",
  Confirming: "מאשר",
  "Create a new account": "צור משתמש חדש",
  "Create Account": "צור משתמש",
  "Creating Account": "יצירת משתמש",
  "Dismiss alert": "הסר התראה",
  Email: "אימייל",
  "Enter your code": "הכנס את הקוד",
  "Enter your Email": "הכנס את המייל שלך",
  "Enter your phone number": "הכנס את מספר הטלפון שלך",
  "Enter your username": "הכנס את שם המתמש שלך",
  "Forgot your password?": "שכחת סיסמא ?",
  "Hide password": "הסתר סיסמא",
  Loading: "טוען",
  "New password": "סיסמא חדשה",
  or: "אוֹ",
  Password: "סיסמא",
  "Phone Number": "מספר טלפון",
  "Resend Code": "שלח קוד שוב",
  "Reset your password": "אפס סיסמא",
  "Reset your Password": "אפס סיסמא",
  "Send code": "שלח קוד",
  "Send Code": "שלח קוד",
  Sending: "שולח",
  "Setup TOTP": "Setup TOTP",
  "Show password": "הצג סיסמא",
  "Sign in to your account": "התחבר לחשבון שלך",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "התחבר",
  "Sign In": "התחבר",
  "Signing in": "מתחבר",
  Skip: "דלג",
  Submit: "שלח",
  Submitting: "שולח",
  Username: "שם משתמש",
  "Verify Contact": "אמת איש קשר",
  Verify: "אמת"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ua.mjs
var uaDict = {
  "Account recovery requires verified contact information": "Відновлення облікового запису потребує контактної інформації",
  "Back to Sign In": "Назад на сторінку входу",
  "Change Password": "Змінити пароль",
  Changing: "Змінюємо",
  Code: "Код",
  "Confirm Password": "Підтвердіть пароль",
  "Confirm Sign Up": "Підтвердіть реєстрацію",
  "Confirm SMS Code": "Підтвердіть SMS код",
  "Confirm TOTP Code": "Підтвердіть TOTP код",
  Confirm: "Підтвердити",
  "Confirmation Code": "Код підтвердження",
  Confirming: "Підтверджуємо",
  "Create a new account": "Зареєструватися",
  "Create Account": "Зареєструватися",
  "Creating Account": "Реєструємо",
  "Dismiss alert": "Відхилити сповіщення",
  Email: "Email",
  "Enter your code": "Введіть код",
  "Enter your Email": "Введіть ваш email",
  "Enter your phone number": "Введіть ваш номер телефону",
  "Enter your username": "Введіть ваше імʼя користувача",
  "Forgot password?": "Забули пароль?",
  "Forgot your password?": "Забули ваш пароль?",
  "Hide password": "Сховати пароль",
  "It may take a minute to arrive": "Доставка може тривати хвилину",
  Loading: "Загружаємо",
  "New password": "Новий пароль",
  or: "або",
  Password: "Пароль",
  "Phone Number": "Номер Телефону",
  "Resend Code": "Відправити код повторно",
  "Reset your password": "Скинути пароль",
  "Reset your Password": "Скинути пароль",
  "Send code": "Відправити код",
  "Send Code": "Відправити код",
  Sending: "Відправляємо",
  "Setup TOTP": "Налаштувати TOTP",
  "Show password": "Показати пароль",
  "Sign in to your account": "Увійти у ваш обліковий запис",
  "Sign In with Amazon": "Увійти з Amazon",
  "Sign In with Apple": "Увійти з Apple",
  "Sign In with Facebook": "Увійти з Facebook",
  "Sign In with Google": "Увійти з Google",
  "Sign in": "Увійти",
  "Sign In": "Увійти",
  "Signing in": "Входимо",
  Skip: "Пропустити",
  Submit: "Відправити",
  Submitting: "Відправляємо",
  Username: "Імʼя користувача",
  "Verify Contact": "Підтвердити Контакт",
  Verify: "Підтвердити",
  "We Emailed You": "Ми відправили вам Email",
  "We Sent A Code": "Ми відправили код",
  "We Texted You": "Ми відправили вам текстове повідомлення",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам на Email",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми вам відправили",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам текстовим повідомленням",
  // Additional translations
  "An account with the given email already exists.": "Обліковий запис з цим Email вже існує.",
  "Confirm a Code": "Підтвердіть код",
  "Confirm Sign In": "Підтвердіть вхід",
  "Forgot Password": "Забули пароль",
  "Incorrect username or password.": "Невірне імʼя користувача або пароль",
  "Invalid password format": "Невірний формат паролю",
  "Invalid phone number format": "Невірний формат номеру телефону",
  "Loading...": "Загружаємо...",
  "New Password": "Новий пароль",
  "Resend a Code": "Відправити код повторно",
  "Reset Password": "Скинути пароль",
  "Sign Out": "Вийти",
  "Sign Up with Amazon": "Зареєструватися з Amazon",
  "Sign Up with Apple": "Зареєструватися з Apple",
  "Sign Up with Facebook": "Зареєструватися з Facebook",
  "Sign Up with Google": "Зареєструватися з Google",
  "Sign Up": "Зареєструватися",
  "User already exists": "Користувач вже існує",
  "User does not exist": "Такий користувач не існує",
  "Username cannot be empty": "Імʼя користувача не може бути пустим",
  "Your passwords must match": "Паролі мають збігатися"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/defaultTexts.mjs
var defaultTexts = {
  ADD_PROFILE: "Add your Profile",
  ADD_WEBSITE: "Add your Website",
  BACK_SIGN_IN: "Back to Sign In",
  BIRTHDATE: "Birthdate",
  CHANGE_PASSWORD: "Change Password",
  CHANGING_PASSWORD: "Changing",
  CODE: "Code",
  CODE_ARRIVAL: "It may take a minute to arrive",
  CODE_EMAILED: "Your code is on the way. To log in, enter the code we emailed to",
  CODE_SENT: "Your code is on the way. To log in, enter the code we sent you",
  CODE_TEXTED: "Your code is on the way. To log in, enter the code we texted to",
  CONFIRM_PASSWORD: "Confirm Password",
  CONFIRM_PASSWORD_PLACEHOLDER: "Please confirm your Password",
  CONFIRM_RESET_PASSWORD_HEADING: "Reset your Password",
  CONFIRM_SIGNUP_HEADING: "Confirm Sign Up",
  CONFIRM_SMS: "Confirm SMS Code",
  // If challenge name is not returned
  CONFIRM_MFA_DEFAULT: "Confirm MFA Code",
  CONFIRM_TOTP: "Confirm TOTP Code",
  CONFIRM: "Confirm",
  CONFIRMATION_CODE: "Confirmation Code",
  CONFIRMING: "Confirming",
  CREATE_ACCOUNT: "Create Account",
  CREATING_ACCOUNT: "Creating Account",
  EMAIL_ADDRESS: "Email",
  ENTER_BIRTHDATE: "Enter your Birthdate",
  ENTER_CODE: "Enter your code",
  ENTER_CONFIRMATION_CODE: "Enter your Confirmation Code",
  ENTER_EMAIL: "Enter your Email",
  ENTER_FAMILY_NAME: "Enter your Family Name",
  ENTER_GIVEN_NAME: "Enter your Given Name",
  ENTER_MIDDLE_NAME: "Enter your Middle Name",
  ENTER_NAME: "Enter your Name",
  ENTER_NICK_NAME: "Enter your Nickname",
  ENTER_PASSWORD: "Enter your Password",
  ENTER_PHONE_NUMBER: "Enter your Phone Number",
  ENTER_PREFERRED_USERNAME: "Enter your Preferred Username",
  ENTER_USERNAME: "Enter your username",
  FAMILY_NAME: "Family Name",
  GIVEN_NAME: "Given Name",
  FORGOT_PASSWORD: "Forgot Password?",
  FORGOT_YOUR_PASSWORD: "Forgot your password?",
  HIDE_PASSWORD: "Hide password",
  LOADING: "Loading",
  LOGIN_NAME: "Username",
  MIDDLE_NAME: "Middle Name",
  NAME: "Name",
  NICKNAME: "Nickname",
  NEW_PASSWORD: "New password",
  OR: "or",
  PASSWORD: "Password",
  PHONE_NUMBER: "Phone Number",
  PREFERRED_USERNAME: "Preferred Username",
  PROFILE: "Profile",
  RESEND_CODE: "Resend Code",
  RESET_PASSWORD_HEADING: "Reset your password",
  RESET_PASSWORD: "Reset Password",
  SEND_CODE: "Send code",
  SENDING: "Sending",
  SETUP_TOTP: "Setup TOTP",
  SHOW_PASSWORD: "Show password",
  SIGN_IN_BUTTON: "Sign in",
  SIGN_IN_TAB: "Sign In",
  SIGN_IN_WITH_AMAZON: "Sign In with Amazon",
  SIGN_IN_WITH_APPLE: "Sign In with Apple",
  SIGN_IN_WITH_FACEBOOK: "Sign In with Facebook",
  SIGN_IN_WITH_GOOGLE: "Sign In with Google",
  SIGN_IN: "Sign in to your account",
  SIGN_UP_BUTTON: "Create a new account",
  SIGNING_IN_BUTTON: "Signing in",
  SKIP: "Skip",
  SUBMIT: "Submit",
  SUBMITTING: "Submitting",
  UPPERCASE_COPY: "COPY",
  VERIFY_CONTACT: "Verify Contact",
  VERIFY_HEADING: "Account recovery requires verified contact information",
  VERIFY: "Verify",
  WE_EMAILED: "We Emailed You",
  WE_SENT_CODE: "We Sent A Code",
  WE_TEXTED: "We Texted You",
  WEBSITE: "Website"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/index.mjs
var deDict2 = { ...deDict };
var enDict2 = {
  ...enDict
};
var esDict2 = { ...esDict };
var frDict2 = { ...frDict };
var itDict2 = { ...itDict };
var jaDict2 = { ...jaDict };
var krDict2 = { ...krDict };
var nbDict2 = { ...nbDict };
var nlDict2 = { ...nlDict };
var plDict2 = { ...plDict };
var ptDict2 = { ...ptDict };
var zhDict2 = { ...zhDict };
var svDict2 = { ...svDict };
var idDict2 = { ...idDict };
var trDict2 = { ...trDict };
var ruDict2 = { ...ruDict };
var heDict2 = { ...heDict };
var uaDict2 = { ...uaDict };
var defaultTexts2 = {
  ...defaultTexts
  // new module related default texts goes here
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/translations.mjs
var DefaultTexts = { ...defaultTexts2 };
function translate(phrase) {
  return I18n.get(phrase);
}
var translations = {
  de: deDict2,
  en: enDict2,
  es: esDict2,
  fr: frDict2,
  id: idDict2,
  it: itDict2,
  ja: jaDict2,
  // TODO: remove kr in next major release
  kr: krDict2,
  ko: krDict2,
  nb: nbDict2,
  nl: nlDict2,
  pl: plDict2,
  pt: ptDict2,
  zh: zhDict2,
  sv: svDict2,
  tr: trDict2,
  ru: ruDict2,
  he: heDict2,
  ua: uaDict2
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/borderWidths.mjs
var borderWidths = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/colors.mjs
var colors = {
  red: {
    10: { value: "hsl(0, 75%, 95%)" },
    20: { value: "hsl(0, 75%, 85%)" },
    40: { value: "hsl(0, 75%, 75%)" },
    60: { value: "hsl(0, 50%, 50%)" },
    80: { value: "hsl(0, 95%, 30%)" },
    90: { value: "hsl(0, 100%, 20%)" },
    100: { value: "hsl(0, 100%, 15%)" }
  },
  orange: {
    10: { value: "hsl(30, 75%, 95%)" },
    20: { value: "hsl(30, 75%, 85%)" },
    40: { value: "hsl(30, 75%, 75%)" },
    60: { value: "hsl(30, 50%, 50%)" },
    80: { value: "hsl(30, 95%, 30%)" },
    90: { value: "hsl(30, 100%, 20%)" },
    100: { value: "hsl(30, 100%, 15%)" }
  },
  yellow: {
    10: { value: "hsl(60, 75%, 95%)" },
    20: { value: "hsl(60, 75%, 85%)" },
    40: { value: "hsl(60, 75%, 75%)" },
    60: { value: "hsl(60, 50%, 50%)" },
    80: { value: "hsl(60, 95%, 30%)" },
    90: { value: "hsl(60, 100%, 20%)" },
    100: { value: "hsl(60, 100%, 15%)" }
  },
  green: {
    10: { value: "hsl(130, 60%, 95%)" },
    20: { value: "hsl(130, 60%, 90%)" },
    40: { value: "hsl(130, 44%, 63%)" },
    60: { value: "hsl(130, 43%, 46%)" },
    80: { value: "hsl(130, 33%, 37%)" },
    90: { value: "hsl(130, 27%, 29%)" },
    100: { value: "hsl(130, 22%, 23%)" }
  },
  teal: {
    10: { value: "hsl(190, 75%, 95%)" },
    20: { value: "hsl(190, 75%, 85%)" },
    40: { value: "hsl(190, 70%, 70%)" },
    60: { value: "hsl(190, 50%, 50%)" },
    80: { value: "hsl(190, 95%, 30%)" },
    90: { value: "hsl(190, 100%, 20%)" },
    100: { value: "hsl(190, 100%, 15%)" }
  },
  blue: {
    10: { value: "hsl(220, 95%, 95%)" },
    20: { value: "hsl(220, 85%, 85%)" },
    40: { value: "hsl(220, 70%, 70%)" },
    60: { value: "hsl(220, 50%, 50%)" },
    80: { value: "hsl(220, 95%, 30%)" },
    90: { value: "hsl(220, 100%, 20%)" },
    100: { value: "hsl(220, 100%, 15%)" }
  },
  purple: {
    10: { value: "hsl(300, 95%, 95%)" },
    20: { value: "hsl(300, 85%, 85%)" },
    40: { value: "hsl(300, 70%, 70%)" },
    60: { value: "hsl(300, 50%, 50%)" },
    80: { value: "hsl(300, 95%, 30%)" },
    90: { value: "hsl(300, 100%, 20%)" },
    100: { value: "hsl(300, 100%, 15%)" }
  },
  pink: {
    10: { value: "hsl(340, 95%, 95%)" },
    20: { value: "hsl(340, 90%, 85%)" },
    40: { value: "hsl(340, 70%, 70%)" },
    60: { value: "hsl(340, 50%, 50%)" },
    80: { value: "hsl(340, 95%, 30%)" },
    90: { value: "hsl(340, 100%, 20%)" },
    100: { value: "hsl(340, 100%, 15%)" }
  },
  neutral: {
    10: { value: "hsl(210, 5%, 98%)" },
    20: { value: "hsl(210, 5%, 94%)" },
    40: { value: "hsl(210, 5%, 87%)" },
    60: { value: "hsl(210, 10%, 58%)" },
    80: { value: "hsl(210, 10%, 40%)" },
    90: { value: "hsl(210, 25%, 25%)" },
    100: { value: "hsl(210, 50%, 10%)" }
  },
  primary: {
    10: { value: "{colors.teal.10.value}" },
    20: { value: "{colors.teal.20.value}" },
    40: { value: "{colors.teal.40.value}" },
    60: { value: "{colors.teal.60.value}" },
    80: { value: "{colors.teal.80.value}" },
    90: { value: "{colors.teal.90.value}" },
    100: { value: "{colors.teal.100.value}" }
  },
  secondary: {
    10: { value: "{colors.purple.10.value}" },
    20: { value: "{colors.purple.20.value}" },
    40: { value: "{colors.purple.40.value}" },
    60: { value: "{colors.purple.60.value}" },
    80: { value: "{colors.purple.80.value}" },
    90: { value: "{colors.purple.90.value}" },
    100: { value: "{colors.purple.100.value}" }
  },
  font: {
    primary: { value: "{colors.neutral.100.value}" },
    secondary: { value: "{colors.neutral.90.value}" },
    tertiary: { value: "{colors.neutral.80.value}" },
    disabled: { value: "{colors.neutral.60.value}" },
    inverse: { value: "{colors.white.value}" },
    interactive: { value: "{colors.primary.80.value}" },
    // Hover and Focus colors are intentionally different colors.
    // This allows users to distinguish between the current keyboard focus
    // and the location of their pointer
    hover: { value: "{colors.primary.90.value}" },
    // Focus color is set to 100 to ensure enough contrast for accessibility
    focus: { value: "{colors.primary.100.value}" },
    active: { value: "{colors.primary.100.value}" },
    info: { value: "{colors.blue.90.value}" },
    warning: { value: "{colors.orange.90.value}" },
    error: { value: "{colors.red.90.value}" },
    success: { value: "{colors.green.90.value}" }
  },
  background: {
    primary: { value: "{colors.white.value}" },
    secondary: { value: "{colors.neutral.10.value}" },
    tertiary: { value: "{colors.neutral.20.value}" },
    quaternary: { value: "{colors.neutral.60.value}" },
    disabled: { value: "{colors.background.tertiary.value}" },
    info: { value: "{colors.blue.10.value}" },
    warning: { value: "{colors.orange.10.value}" },
    error: { value: "{colors.red.10.value}" },
    success: { value: "{colors.green.10.value}" }
  },
  border: {
    primary: { value: "{colors.neutral.60.value}" },
    secondary: { value: "{colors.neutral.40.value}" },
    tertiary: { value: "{colors.neutral.20.value}" },
    disabled: { value: "{colors.border.tertiary.value}" },
    pressed: { value: "{colors.primary.100.value}" },
    // Focus color is set to 100 to ensure enough contrast for accessibility
    focus: { value: "{colors.primary.100.value}" },
    error: { value: "{colors.red.80.value}" },
    info: { value: "{colors.blue.80.value}" },
    success: { value: "{colors.green.80.value}" },
    warning: { value: "{colors.orange.80.value}" }
  },
  shadow: {
    primary: { value: "hsla(210, 50%, 10%, 0.25)" },
    secondary: { value: "hsla(210, 50%, 10%, 0.15)" },
    tertiary: { value: "hsla(210, 50%, 10%, 0.05)" }
  },
  overlay: {
    5: { value: "hsla(0, 0%, 0%, 0.05)" },
    10: { value: "hsla(0, 0%, 0%, 0.1)" },
    20: { value: "hsla(0, 0%, 0%, 0.2)" },
    30: { value: "hsla(0, 0%, 0%, 0.3)" },
    40: { value: "hsla(0, 0%, 0%, 0.4)" },
    50: { value: "hsla(0, 0%, 0%, 0.5)" },
    60: { value: "hsla(0, 0%, 0%, 0.6)" },
    70: { value: "hsla(0, 0%, 0%, 0.7)" },
    80: { value: "hsla(0, 0%, 0%, 0.8)" },
    90: { value: "hsla(0, 0%, 0%, 0.9)" }
  },
  black: { value: "hsl(0, 0%, 0%)" },
  white: { value: "hsl(0, 0%, 100%)" },
  transparent: { value: "transparent" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/alert.mjs
var alert = {
  // Default styles
  alignItems: { value: "center" },
  justifyContent: { value: "space-between" },
  color: { value: "{colors.font.primary.value}" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  paddingBlock: { value: "{space.small.value}" },
  paddingInline: { value: "{space.medium.value}" },
  icon: {
    size: { value: "{fontSizes.xl.value}" }
  },
  heading: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  // Variations
  info: {
    color: { value: "{colors.font.info.value}" },
    backgroundColor: { value: "{colors.background.info.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" },
    backgroundColor: { value: "{colors.background.error.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" },
    backgroundColor: { value: "{colors.background.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" },
    backgroundColor: { value: "{colors.background.success.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/autocomplete.mjs
var autocomplete = {
  menu: {
    width: { value: "100%" },
    marginBlockStart: { value: "{space.xxxs}" },
    backgroundColor: { value: "{colors.background.primary}" },
    borderColor: { value: "{colors.border.primary}" },
    borderWidth: { value: "{borderWidths.small}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.small}" },
    options: {
      display: { value: "flex" },
      flexDirection: { value: "column" },
      maxHeight: { value: "300px" }
    },
    option: {
      backgroundColor: { value: "{colors.background.primary}" },
      color: { value: "currentcolor" },
      cursor: { value: "pointer" },
      transitionDuration: { value: "{time.short}" },
      transitionProperty: { value: "background-color, color" },
      transitionTimingFunction: { value: "ease" },
      _active: {
        backgroundColor: { value: "{colors.primary.80}" },
        color: { value: "{colors.white}" }
      }
    },
    _empty: {
      display: { value: "flex" }
    },
    _loading: {
      alignItems: { value: "center" },
      display: { value: "flex" },
      gap: { value: "{space.xxxs}" }
    },
    spaceShared: {
      paddingBlock: { value: "{space.xs}" },
      paddingInline: { value: "{space.small}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/authenticator.mjs
var authenticator = {
  maxWidth: { value: "60rem" },
  modal: {
    width: { value: "{space.relative.full}" },
    height: { value: "{space.relative.full}" },
    backgroundColor: { value: "{colors.overlay.50.value}" },
    top: { value: "{space.zero}" },
    left: { value: "{space.zero}" }
  },
  container: {
    widthMax: { value: "30rem" }
  },
  router: {
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderColor: { value: "{colors.border.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    boxShadow: { value: "{shadows.medium.value}" }
  },
  footer: {
    paddingBottom: { value: "{space.medium.value}" }
  },
  form: {
    padding: { value: "{space.xl.value}" }
  },
  state: {
    inactive: {
      backgroundColor: { value: "{colors.background.secondary.value}" }
    }
  },
  orContainer: {
    color: { value: "{colors.neutral.80.value}" },
    orLine: {
      backgroundColor: { value: "{colors.background.primary.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/badge.mjs
var badge = {
  // Default styles
  color: { value: "{colors.font.primary.value}" },
  lineHeight: { value: 1 },
  fontWeight: { value: "{fontWeights.semibold.value}" },
  fontSize: { value: "{fontSizes.small.value}" },
  textAlign: { value: "center" },
  paddingVertical: { value: "{space.xs.value}" },
  paddingHorizontal: { value: "{space.small.value}" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  // An arbitrarily large value to ensure that the left and right sides of the badge are perfectly rounded for any size variation
  borderRadius: { value: "{radii.xl.value}" },
  // Variations
  info: {
    color: { value: "{colors.font.info.value}" },
    backgroundColor: { value: "{colors.background.info.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" },
    backgroundColor: { value: "{colors.background.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" },
    backgroundColor: { value: "{colors.background.success.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" },
    backgroundColor: { value: "{colors.background.error.value}" }
  },
  // Sizes
  small: {
    fontSize: { value: "{fontSizes.xs.value}" },
    paddingVertical: { value: "{space.xxs.value}" },
    paddingHorizontal: { value: "{space.xs.value}" }
  },
  // medium is the default size
  large: {
    fontSize: { value: "{fontSizes.medium.value}" },
    paddingVertical: { value: "{space.small.value}" },
    paddingHorizontal: { value: "{space.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/breadcrumbs.mjs
var breadcrumbs = {
  flexDirection: { value: "row" },
  flexWrap: { value: "wrap" },
  gap: { value: "0" },
  color: { value: "{colors.font.tertiary}" },
  item: {
    flexDirection: { value: "row" },
    color: { value: "inherit" },
    fontSize: { value: "inherit" },
    alignItems: { value: "center" },
    lineHeight: { value: "1" }
  },
  separator: {
    color: { value: "inherit" },
    fontSize: { value: "inherit" },
    paddingInline: { value: "{space.xxs}" }
  },
  link: {
    color: { value: "{components.link.color}" },
    fontSize: { value: "inherit" },
    fontWeight: { value: "normal" },
    textDecoration: { value: "none" },
    paddingInline: { value: "{space.xs}" },
    paddingBlock: { value: "{space.xxs}" },
    current: {
      color: { value: "inherit" },
      fontSize: { value: "inherit" },
      fontWeight: { value: "normal" },
      textDecoration: { value: "none" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/button.mjs
var button = {
  // shared styles
  fontWeight: { value: "{fontWeights.bold.value}" },
  transitionDuration: {
    value: "{components.fieldcontrol.transitionDuration.value}"
  },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  lineHeight: { value: "{components.fieldcontrol.lineHeight.value}" },
  paddingBlockStart: {
    value: "{components.fieldcontrol.paddingBlockStart.value}"
  },
  paddingBlockEnd: {
    value: "{components.fieldcontrol.paddingBlockEnd.value}"
  },
  paddingInlineStart: {
    value: "{components.fieldcontrol.paddingInlineStart.value}"
  },
  paddingInlineEnd: {
    value: "{components.fieldcontrol.paddingInlineEnd.value}"
  },
  backgroundColor: { value: "transparent" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  borderWidth: { value: "{components.fieldcontrol.borderWidth.value}" },
  borderStyle: { value: "{components.fieldcontrol.borderStyle.value}" },
  borderRadius: { value: "{components.fieldcontrol.borderRadius.value}" },
  color: { value: "{colors.font.primary.value}" },
  _hover: {
    color: { value: "{colors.font.focus.value}" },
    backgroundColor: { value: "{colors.primary.10.value}" },
    borderColor: { value: "{colors.primary.60.value}" }
  },
  _focus: {
    color: { value: "{colors.font.focus.value}" },
    backgroundColor: { value: "{colors.primary.10.value}" },
    borderColor: { value: "{colors.border.focus.value}" },
    boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
  },
  _active: {
    color: { value: "{colors.font.active.value}" },
    backgroundColor: { value: "{colors.primary.20.value}" },
    borderColor: { value: "{colors.primary.100.value}" }
  },
  _loading: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.tertiary.value}" }
  },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.tertiary.value}" }
  },
  // variations
  outlined: {
    info: {
      borderColor: { value: "{colors.blue.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.blue.100}" },
      _hover: {
        borderColor: { value: "{colors.blue.60.value}" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.blue.100.value}" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.blue.100.value}" },
        backgroundColor: { value: "{colors.blue.20.value}" },
        color: { value: "{colors.blue.100.value}" }
      }
    },
    warning: {
      borderColor: { value: "{colors.orange.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.orange.100}" },
      _hover: {
        borderColor: { value: "{colors.orange.60.value}" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.orange.100.value}" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.warning._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.orange.100.value}" },
        backgroundColor: { value: "{colors.orange.20.value}" },
        color: { value: "{colors.orange.100.value}" }
      }
    },
    success: {
      borderColor: { value: "{colors.green.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.green.100}" },
      _hover: {
        borderColor: { value: "{colors.green.60.value}" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.green.100.value}" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.green.100.value}" },
        backgroundColor: { value: "{colors.green.20.value}" },
        color: { value: "{colors.green.100.value}" }
      }
    },
    error: {
      borderColor: { value: "{colors.red.80.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.red.100}" },
      _hover: {
        borderColor: { value: "{colors.red.80.value}" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.red.100.value}" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.red.100.value}" },
        backgroundColor: { value: "{colors.red.20.value}" },
        color: { value: "{colors.red.100.value}" }
      }
    },
    overlay: {
      borderColor: { value: "{colors.overlay.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.primary.value}" },
      _hover: {
        borderColor: { value: "{colors.overlay.60.value}" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.neutral.90.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.neutral.90.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.overlay.10.value}" },
        color: { value: "{colors.neutral.100.value}" }
      }
    }
  },
  primary: {
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    backgroundColor: { value: "{colors.primary.80.value}" },
    color: { value: "{colors.font.inverse.value}" },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.90.value}" },
      color: { value: "{colors.font.inverse.value}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.90.value}" },
      color: { value: "{colors.font.inverse.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.100.value}" },
      color: { value: "{colors.font.inverse.value}" }
    },
    info: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.blue.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    warning: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.orange.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    error: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    success: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.green.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    overlay: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.overlay.70}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    }
  },
  menu: {
    borderWidth: { value: "{space.zero.value}" },
    backgroundColor: { value: "transparent" },
    justifyContent: { value: "start" },
    // Focus and hover styles are identical for menu variation
    // because for Menu primitive, menu items are forced to be focused even
    // for mouse interactions, making it impossible to distinguish the two interactions
    _hover: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    _focus: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    _active: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.90.value}" }
    },
    _disabled: {
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  link: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.interactive.value}" },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.10.value}" },
      color: { value: "{colors.font.hover.value}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.10.value}" },
      color: { value: "{colors.font.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.20.value}" },
      color: { value: "{colors.font.active.value}" }
    },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled.value}" }
    },
    info: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.blue.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.20.value}" },
        color: { value: "{colors.blue.100.value}" }
      }
    },
    warning: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.orange.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.warning._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.20.value}" },
        color: { value: "{colors.orange.100.value}" }
      }
    },
    success: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.green.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.20.value}" },
        color: { value: "{colors.green.100.value}" }
      }
    },
    error: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.red.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.20.value}" },
        color: { value: "{colors.red.100.value}" }
      }
    },
    overlay: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.neutral.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.overlay.80.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.overlay.90.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.10.value}" },
        color: { value: "{colors.overlay.90.value}" }
      }
    }
  },
  warning: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.red.60}" },
    borderWidth: { value: "{borderWidths.small}" },
    color: { value: "{colors.red.60}" },
    _hover: {
      borderColor: { value: "{colors.red.80}" },
      backgroundColor: { value: "{colors.red.10}" },
      color: { value: "{colors.font.error}" }
    },
    _focus: {
      borderColor: { value: "{colors.red.80}" },
      backgroundColor: { value: "{colors.red.10}" },
      color: { value: "{colors.red.80}" },
      boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" }
    },
    _active: {
      borderColor: { value: "{colors.red.100}" },
      backgroundColor: { value: "{colors.red.20}" },
      color: { value: "{colors.red.100}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.tertiary}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled}" }
    },
    _loading: {
      borderColor: { value: "{colors.border.tertiary}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled}" }
    }
  },
  destructive: {
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small}" },
    borderStyle: { value: "solid" },
    backgroundColor: { value: "{colors.red.60}" },
    color: { value: "{colors.font.inverse}" },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled}" },
      color: { value: "{colors.font.disabled}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled}" },
      color: { value: "{colors.font.disabled}" }
    },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse}" },
      boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.100}" },
      color: { value: "{colors.font.inverse}" }
    }
  },
  // sizes
  small: {
    fontSize: { value: "{components.fieldcontrol.small.fontSize.value}" },
    paddingBlockStart: {
      value: "{components.fieldcontrol.small.paddingBlockStart.value}"
    },
    paddingBlockEnd: {
      value: "{components.fieldcontrol.small.paddingBlockEnd.value}"
    },
    paddingInlineStart: {
      value: "{components.fieldcontrol.small.paddingInlineStart.value}"
    },
    paddingInlineEnd: {
      value: "{components.fieldcontrol.small.paddingInlineEnd.value}"
    }
  },
  large: {
    fontSize: { value: "{components.fieldcontrol.large.fontSize.value}" },
    paddingBlockStart: {
      value: "{components.fieldcontrol.large.paddingBlockStart.value}"
    },
    paddingBlockEnd: {
      value: "{components.fieldcontrol.large.paddingBlockEnd.value}"
    },
    paddingInlineStart: {
      value: "{components.fieldcontrol.large.paddingInlineStart.value}"
    },
    paddingInlineEnd: {
      value: "{components.fieldcontrol.large.paddingInlineEnd.value}"
    }
  },
  loaderWrapper: {
    alignItems: {
      value: "center"
    },
    gap: {
      value: "{space.xs.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/card.mjs
var card = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  borderRadius: { value: "{radii.xs.value}" },
  borderWidth: { value: "0" },
  borderStyle: { value: "solid" },
  borderColor: { value: "transparent" },
  boxShadow: { value: "none" },
  padding: { value: "{space.medium.value}" },
  outlined: {
    backgroundColor: { value: "{components.card.backgroundColor.value}" },
    borderRadius: { value: "{radii.xs.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderColor: { value: "{colors.border.primary.value}" },
    boxShadow: { value: "{components.card.boxShadow.value}" }
  },
  elevated: {
    backgroundColor: { value: "{components.card.backgroundColor.value}" },
    borderRadius: { value: "{radii.xs.value}" },
    borderWidth: { value: "0" },
    borderStyle: { value: "solid" },
    borderColor: { value: "transparent" },
    boxShadow: { value: "{shadows.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkbox.mjs
var checkbox = {
  cursor: { value: "pointer" },
  alignItems: { value: "center" },
  _disabled: {
    cursor: {
      value: "not-allowed"
    }
  },
  button: {
    position: { value: "relative" },
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    color: { value: "{colors.font.inverse.value}" },
    before: {
      width: { value: "100%" },
      height: { value: "100%" },
      borderWidth: { value: "{borderWidths.medium.value}" },
      borderRadius: { value: "20%" },
      borderStyle: { value: "solid" },
      borderColor: { value: "{colors.border.primary.value}" }
    },
    _focus: {
      outlineColor: { value: "{colors.transparent.value}" },
      outlineStyle: { value: "solid" },
      outlineWidth: { value: "{outlineWidths.medium.value}" },
      outlineOffset: { value: "{outlineOffsets.medium.value}" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" }
    },
    _error: {
      borderColor: { value: "{colors.border.error.value}" },
      _focus: {
        borderColor: { value: "{colors.border.error.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    }
  },
  icon: {
    backgroundColor: { value: "{colors.primary.80.value}" },
    borderRadius: { value: "20%" },
    opacity: { value: "{opacities.0.value}" },
    transform: { value: "scale(0)" },
    transitionProperty: { value: "all" },
    transitionDuration: { value: "{time.short.value}" },
    transitionTimingFunction: { value: "ease-in-out" },
    _checked: {
      opacity: { value: "{opacities.100.value}" },
      transform: { value: "scale(1)" },
      _disabled: {
        backgroundColor: { value: "{colors.background.disabled.value}" }
      }
    },
    _indeterminate: {
      opacity: { value: "{opacities.100.value}" },
      transform: { value: "scale(1)" },
      _disabled: {
        backgroundColor: { value: "{colors.background.disabled.value}" }
      }
    }
  },
  label: {
    color: { value: "{components.text.color.value}" },
    _disabled: {
      color: {
        value: "{colors.font.disabled.value}"
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkboxField.mjs
var checkboxfield = {
  alignItems: { value: "flex-start" },
  alignContent: { value: "center" },
  flexDirection: { value: "column" },
  justifyContent: { value: "center" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/collection.mjs
var collection = {
  pagination: {
    current: {
      color: { value: "{components.pagination.current.color}" },
      backgroundColor: {
        value: "{components.pagination.current.backgroundColor}"
      }
    },
    button: {
      color: { value: "{components.pagination.button.color}" },
      _hover: {
        backgroundColor: {
          value: "{components.pagination.button.hover.backgroundColor}"
        },
        color: { value: "{components.pagination.button.hover.color}" }
      },
      _disabled: {
        color: { value: "{components.pagination.button.disabled.color}" }
      }
    }
  },
  search: {
    input: {
      color: { value: "{components.searchfield.color}" }
    },
    button: {
      color: { value: "{components.searchfield.button.color}" },
      _active: {
        backgroundColor: {
          value: "{components.searchfield.button._active.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._active.borderColor}"
        },
        color: { value: "{components.searchfield.button._active.color}" }
      },
      _disabled: {
        backgroundColor: {
          value: "{components.searchfield.button._disabled.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._disabled.borderColor}"
        },
        color: {
          value: "{components.searchfield.button._disabled.color}"
        }
      },
      _focus: {
        backgroundColor: {
          value: "{components.searchfield.button._focus.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._focus.borderColor}"
        },
        color: { value: "{components.searchfield.button._focus.color}" }
      },
      _hover: {
        backgroundColor: {
          value: "{components.searchfield.button._hover.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._hover.borderColor}"
        },
        color: { value: "{components.searchfield.button._hover.color}" }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/copy.mjs
var copy = {
  fontSize: { value: "{fontSizes.xs}" },
  gap: { value: "{space.relative.medium}" },
  svg: {
    path: {
      fill: {
        value: "{colors.font.primary}"
      }
    }
  },
  toolTip: {
    bottom: { value: "{space.large}" },
    color: { value: "{colors.teal.100}" },
    fontSize: { value: "{fontSizes.xxs}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dialCodeSelect.mjs
var dialcodeselect = {
  height: {
    value: "{space.relative.full.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/divider.mjs
var divider = {
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  borderWidth: { value: "{borderWidths.medium.value}" },
  label: {
    color: { value: "{colors.font.tertiary.value}" },
    paddingInline: { value: "{space.medium.value}" },
    fontSize: { value: "{fontSizes.small.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" }
  },
  small: {
    borderWidth: { value: "{borderWidths.small.value}" }
  },
  large: {
    borderWidth: { value: "{borderWidths.large.value}" }
  },
  opacity: {
    value: "{opacities.60.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dropZone.mjs
var dropzone = {
  backgroundColor: { value: "{colors.background.primary}" },
  borderRadius: { value: "{radii.small}" },
  borderColor: { value: "{colors.border.primary}" },
  borderStyle: { value: "dashed" },
  borderWidth: { value: "{borderWidths.small}" },
  color: { value: "{colors.font.primary}" },
  gap: { value: "{space.small}" },
  paddingBlock: { value: "{space.xl}" },
  paddingInline: { value: "{space.large}" },
  textAlign: { value: "center" },
  _active: {
    backgroundColor: { value: "{colors.primary.10}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.pressed}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.primary}" }
  },
  _disabled: {
    backgroundColor: { value: "{colors.background.disabled}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.disabled}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.disabled}" }
  },
  accepted: {
    backgroundColor: { value: "{colors.background.success}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.success}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.success}" }
  },
  rejected: {
    backgroundColor: { value: "{colors.background.error}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.pressed}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.error}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/accordion.mjs
var accordion = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  item: {
    borderColor: { value: "{colors.border.secondary.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.small.value}" },
    trigger: {
      alignItems: { value: "center" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      color: { value: "inherit" },
      gap: { value: "{space.small.value}" },
      justifyContent: { value: "space-between" },
      paddingBlock: { value: "{space.xs.value}" },
      paddingInline: { value: "{space.small.value}" },
      _hover: {
        color: { value: "inherit" },
        backgroundColor: { value: "{colors.overlay.5.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.border.focus.value}" },
        boxShadow: {
          value: {
            offsetX: "0",
            offsetY: "0",
            blurRadius: "0",
            spreadRadius: "2px",
            color: "{colors.border.focus.value}"
          }
        }
      }
    },
    content: {
      color: { value: "inherit" },
      paddingInline: { value: "{space.small.value}" },
      paddingBlockEnd: { value: "{space.small.value}" },
      paddingBlockStart: { value: "{space.xxxs.value}" }
    },
    icon: {
      color: { value: "{colors.font.tertiary.value}" },
      transitionDuration: { value: "{time.medium.value}" },
      transitionTimingFunction: { value: "cubic-bezier(0.87, 0, 0.13, 1)" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/field.mjs
var field = {
  // default styles
  gap: { value: "{space.xs.value}" },
  fontSize: { value: "{fontSizes.medium.value}" },
  flexDirection: { value: "column" },
  // Adjust base fontSize and gap for small and large sizes
  small: {
    gap: { value: "{space.xxxs.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  large: {
    gap: { value: "{space.small.value}" },
    fontSize: { value: "{fontSizes.large.value}" }
  },
  label: {
    color: { value: "{colors.font.secondary.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldControl.mjs
var fieldcontrol = {
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderRadius: { value: "{radii.small.value}" },
  color: { value: "{colors.font.primary.value}" },
  paddingBlockStart: {
    value: "{space.xs.value}"
  },
  paddingBlockEnd: {
    value: "{space.xs.value}"
  },
  paddingInlineStart: {
    value: "{space.medium.value}"
  },
  paddingInlineEnd: {
    value: "{space.medium.value}"
  },
  fontSize: { value: "{components.field.fontSize.value}" },
  lineHeight: { value: "{lineHeights.medium.value}" },
  transitionDuration: { value: "{time.medium.value}" },
  outlineColor: { value: "{colors.transparent.value}" },
  outlineStyle: { value: "solid" },
  outlineWidth: { value: "{outlineWidths.medium.value}" },
  outlineOffset: { value: "{outlineOffsets.medium.value}" },
  small: {
    fontSize: { value: "{components.field.small.fontSize.value}" },
    paddingBlockStart: {
      value: "{space.xxs.value}"
    },
    paddingBlockEnd: {
      value: "{space.xxs.value}"
    },
    paddingInlineStart: {
      value: "{space.small.value}"
    },
    paddingInlineEnd: {
      value: "{space.small.value}"
    }
  },
  large: {
    fontSize: { value: "{components.field.large.fontSize.value}" },
    paddingBlockStart: {
      value: "{space.xs.value}"
    },
    paddingBlockEnd: {
      value: "{space.xs.value}"
    },
    paddingInlineStart: {
      value: "{space.medium.value}"
    },
    paddingInlineEnd: {
      value: "{space.medium.value}"
    }
  },
  quiet: {
    borderStyle: { value: "none" },
    borderInlineStart: { value: "none" },
    borderInlineEnd: { value: "none" },
    borderBlockStart: { value: "none" },
    borderRadius: { value: "0" },
    _focus: {
      borderBlockEndColor: { value: "transparent" },
      boxShadow: {
        value: "{components.fieldcontrol._focus.boxShadow.value}"
      }
    },
    _error: {
      borderBlockEndColor: { value: "{colors.border.error.value}" },
      _focus: {
        borderBlockEndColor: { value: "transparent" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    }
  },
  _focus: {
    // These focus styles have been calibrated to create
    // a highly visible focus indicator per WCAG 2.2 guidlines:
    // See: https://www.w3.org/TR/WCAG22/#focus-appearance
    //
    // Key features:
    // * Focus indicator area is at least the 2 CSS px perimeter around the component.
    // * Contrast between focused and unfocused area of contrast has a ratio of 3:1
    //
    // IMPORTANT: Must recalibrate if `colors.border.focus` are changed
    borderColor: { value: "{colors.border.focus.value}" },
    boxShadow: {
      value: {
        offsetX: "0px",
        offsetY: "0px",
        blurRadius: "0px",
        spreadRadius: "2px",
        color: "{colors.border.focus.value}"
      }
    }
  },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    cursor: { value: "not-allowed" },
    borderColor: { value: "{colors.transparent.value}" },
    backgroundColor: { value: "{colors.background.disabled.value}" }
  },
  _error: {
    borderColor: { value: "{colors.border.error.value}" },
    color: { value: "{colors.font.error.value}" },
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.border.error.value}"
        }
      }
    }
  },
  info: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.blue.100.value}"
        }
      }
    }
  },
  warning: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.orange.100.value}"
        }
      }
    }
  },
  success: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.green.100.value}"
        }
      }
    }
  },
  overlay: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.overlay.90.value}"
        }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldGroup.mjs
var fieldgroup = {
  gap: { value: "{space.zero.value}" },
  vertical: {
    alignItems: { value: "center" }
  },
  outer: {
    alignItems: { value: "center" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldset.mjs
var fieldset = {
  backgroundColor: { value: "transparent" },
  borderRadius: { value: "{radii.xs.value}" },
  flexDirection: {
    value: "column"
  },
  gap: { value: "{components.field.gap.value}" },
  legend: {
    color: { value: "{colors.font.primary.value}" },
    fontSize: { value: "{components.field.fontSize.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    lineHeight: { value: "{lineHeights.medium.value}" },
    small: {
      fontSize: "{components.field.small.fontSize.value}"
    },
    large: {
      fontSize: "{components.field.large.fontSize.value}"
    }
  },
  outlined: {
    padding: "{space.medium.value}",
    borderColor: "{colors.neutral.40.value}",
    borderWidth: "{borderWidths.small.value}",
    borderStyle: "solid",
    small: {
      padding: "{space.small.value}"
    },
    large: {
      padding: "{space.large.value}"
    }
  },
  small: {
    gap: "{components.field.small.gap.value}"
  },
  large: {
    gap: "{components.field.large.gap.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldMessages.mjs
var fieldmessages = {
  error: {
    color: { value: "{colors.font.error.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  description: {
    color: { value: "{colors.font.secondary.value}" },
    fontStyle: { value: "italic" },
    fontSize: { value: "{fontSizes.small.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/flex.mjs
var flex = {
  gap: { value: "{space.medium.value}" },
  justifyContent: { value: "normal" },
  alignItems: { value: "stretch" },
  alignContent: { value: "normal" },
  flexWrap: { value: "nowrap" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/heading.mjs
var heading = {
  color: { value: "{colors.font.primary.value}" },
  lineHeight: { value: "{lineHeights.small.value}" },
  1: {
    fontSize: { value: "{fontSizes.xxxxl.value}" },
    fontWeight: { value: "{fontWeights.light.value}" }
  },
  2: {
    fontSize: { value: "{fontSizes.xxxl.value}" },
    fontWeight: { value: "{fontWeights.normal.value}" }
  },
  3: {
    fontSize: { value: "{fontSizes.xxl.value}" },
    fontWeight: { value: "{fontWeights.medium.value}" }
  },
  4: {
    fontSize: { value: "{fontSizes.xl.value}" },
    fontWeight: { value: "{fontWeights.semibold.value}" }
  },
  5: {
    fontSize: { value: "{fontSizes.large.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  6: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.extrabold.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/highlightMatch.mjs
var highlightmatch = {
  highlighted: {
    fontWeight: { value: "{fontWeights.bold}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/icon.mjs
var icon = {
  lineHeight: { value: 1 },
  height: { value: "1em" }
  // Should match height of parent container font-size
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/input.mjs
var input = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/image.mjs
var image = {
  maxWidth: { value: "100%" },
  height: { value: "auto" },
  objectFit: { value: "initial" },
  objectPosition: { value: "initial" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/inAppMessaging.mjs
var inappmessaging = {
  banner: {
    height: { value: "150px " },
    width: { value: "400px " }
  },
  button: {
    backgroundColor: { value: "#e8e8e8" },
    borderRadius: { value: "5px" },
    color: { value: "black" }
  },
  dialog: {
    height: { value: "50vh" },
    minHeight: { value: "400px" },
    minWidth: { value: "400px" },
    width: { value: "30vw" }
  },
  header: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.extrabold.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/link.mjs
var link = {
  active: { color: { value: "{colors.font.active.value}" } },
  color: { value: "{colors.font.interactive.value}" },
  focus: { color: { value: "{colors.font.focus.value}" } },
  hover: { color: { value: "{colors.font.hover.value}" } },
  visited: { color: { value: "{colors.font.interactive.value}" } }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/liveness.mjs
var liveness = {
  cameraModule: {
    backgroundColor: { value: "{colors.black}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/loader.mjs
var loader = {
  width: { value: "{fontSizes.medium.value}" },
  height: { value: "{fontSizes.medium.value}" },
  fontSize: { value: "{fontSizes.xs.value}" },
  strokeEmpty: { value: "{colors.neutral.20.value}" },
  strokeFilled: { value: "{colors.primary.80.value}" },
  strokeLinecap: { value: "round" },
  animationDuration: { value: "1s" },
  small: {
    width: { value: "{fontSizes.small.value}" },
    height: { value: "{fontSizes.small.value}" },
    fontSize: { value: "{fontSizes.xxs.value}" }
  },
  large: {
    width: { value: "{fontSizes.large.value}" },
    height: { value: "{fontSizes.large.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  linear: {
    width: { value: "100%" },
    minWidth: { value: "5rem" },
    fontSize: { value: "{fontSizes.xxs.value}" },
    strokeWidth: { value: "{fontSizes.xxs.value}" },
    strokeFilled: { value: "{colors.primary.80.value}" },
    strokeEmpty: { value: "{colors.neutral.20.value}" },
    strokeLinecap: { value: "round" },
    animationDuration: { value: "1s" },
    small: {
      strokeWidth: { value: "{fontSizes.xxxs.value}" },
      fontSize: { value: "{fontSizes.xxxs.value}" }
    },
    large: {
      strokeWidth: { value: "{fontSizes.xs.value}" },
      fontSize: { value: "{fontSizes.xs.value}" }
    }
  },
  text: {
    fill: { value: "{colors.font.primary.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/menu.mjs
var menu = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  borderRadius: { value: "{radii.medium.value}" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  boxShadow: { value: "{shadows.large.value}" },
  flexDirection: { value: "column" },
  gap: { value: "{space.zero.value}" },
  maxWidth: { value: "30rem" },
  minWidth: { value: "14rem" },
  small: {
    width: { value: "{fontSizes.medium.value}" },
    height: { value: "{fontSizes.medium.value}" }
  },
  large: {
    width: { value: "{fontSizes.xxxl.value}" },
    height: { value: "{fontSizes.xxxl.value}" }
  },
  item: {
    minHeight: { value: "2.5rem" },
    paddingInlineStart: { value: "{space.medium.value}" },
    paddingInlineEnd: { value: "{space.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/message.mjs
var message = {
  // Default styles
  alignItems: { value: "center" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  borderColor: { value: "transparent" },
  borderStyle: { value: "solid" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderRadius: { value: "{radii.xs.value}" },
  color: { value: "{colors.font.primary.value}" },
  justifyContent: { value: "flex-start" },
  paddingBlock: { value: "{space.small.value}" },
  paddingInline: { value: "{space.medium.value}" },
  lineHeight: { value: "{lineHeights.small.value}" },
  icon: {
    size: { value: "{fontSizes.xl.value}" }
  },
  heading: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  dismiss: {
    gap: { value: "{space.xxs.value}" }
  },
  // Variations
  plain: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "transparent" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    }
  },
  outlined: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "{colors.border.primary.value}" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.info.value}" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.error.value}" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.success.value}" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.warning.value}" }
    }
  },
  filled: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.secondary.value}" },
    borderColor: { value: "transparent" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.info.value}" },
      borderColor: { value: "transparent" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.error.value}" },
      borderColor: { value: "transparent" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.success.value}" },
      borderColor: { value: "transparent" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.warning.value}" },
      borderColor: { value: "transparent" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/pagination.mjs
var pagination = {
  current: {
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    color: { value: "{colors.font.inverse.value}" },
    fontSize: { value: "{fontSizes.small.value}" },
    backgroundColor: { value: "{colors.overlay.40.value}" }
  },
  button: {
    color: { value: "{colors.font.primary.value}" },
    paddingInlineStart: { value: "{space.xxs.value}" },
    paddingInlineEnd: { value: "{space.xxs.value}" },
    transitionProperty: { value: "background-color" },
    transitionDuration: { value: "{time.medium.value}" },
    hover: {
      backgroundColor: { value: "{colors.overlay.10.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    disabled: {
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  ellipsis: {
    alignItems: { value: "baseline" },
    justifyContent: { value: "center" },
    paddingInlineStart: { value: "{space.xs.value}" },
    paddingInlineEnd: { value: "{space.xs.value}" }
  },
  itemContainer: {
    marginLeft: { value: "{space.xxxs.value}" },
    marginRight: { value: "{space.xxxs.value}" }
  },
  itemShared: {
    height: { value: "{fontSizes.xxl.value}" },
    minWidth: { value: "{fontSizes.xxl.value}" },
    borderRadius: { value: "{fontSizes.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/passwordField.mjs
var passwordfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  button: {
    color: { value: "{components.button.color.value}" },
    _active: {
      backgroundColor: {
        value: "{components.button._active.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._active.borderColor.value}" },
      color: { value: "{components.button._active.color.value}" }
    },
    _disabled: {
      backgroundColor: {
        value: "{components.button._disabled.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button._disabled.borderColor.value}"
      },
      color: { value: "{components.button._disabled.color.value}" }
    },
    _error: {
      color: { value: "{components.button.outlined.error.color.value}" },
      backgroundColor: {
        value: "{components.button.outlined.error.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button.outlined.error.borderColor.value}"
      },
      _active: {
        borderColor: {
          value: "{components.button.outlined.error._active.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._active.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._active.color.value}"
        }
      },
      _focus: {
        borderColor: {
          value: "{components.button.outlined.error._focus.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._focus.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._focus.color.value}"
        },
        boxShadow: {
          value: "{components.button.outlined.error._focus.boxShadow.value}"
        }
      },
      _hover: {
        borderColor: {
          value: "{components.button.outlined.error._hover.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._hover.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._hover.color.value}"
        }
      }
    },
    _focus: {
      backgroundColor: {
        value: "{components.button._focus.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._focus.borderColor.value}" },
      color: { value: "{components.button._focus.color.value}" }
    },
    _hover: {
      backgroundColor: {
        value: "{components.button._hover.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._hover.borderColor.value}" },
      color: { value: "{components.button._hover.color.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/phoneNumberField.mjs
var phonenumberfield = {
  color: { value: "{components.fieldcontrol.color}" },
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  fontSize: { value: "{components.fieldcontrol.fontSize}" },
  _focus: {
    borderColor: { value: "{components.fieldcontrol._focus.borderColor}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/placeholder.mjs
var placeholder = {
  borderRadius: { value: "{radii.small.value}" },
  transitionDuration: { value: "{time.long.value}" },
  startColor: { value: "{colors.background.secondary.value}" },
  endColor: { value: "{colors.background.tertiary.value}" },
  // sizes
  small: {
    height: { value: "{space.small.value}" }
  },
  default: {
    height: { value: "{space.medium.value}" }
  },
  large: {
    height: { value: "{space.large.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radio.mjs
var radio = {
  alignItems: { value: "center" },
  justifyContent: { value: "flex-start" },
  gap: { value: "inherit" },
  _disabled: { cursor: { value: "not-allowed" } },
  button: {
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    width: { value: "{fontSizes.medium.value}" },
    height: { value: "{fontSizes.medium.value}" },
    boxSizing: { value: "border-box" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "50%" },
    borderColor: { value: "{colors.border.primary.value}" },
    color: { value: "{colors.background.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    transitionProperty: { value: "all" },
    transitionDuration: { value: "{time.medium.value}" },
    outlineColor: { value: "{colors.transparent.value}" },
    outlineStyle: { value: "solid" },
    outlineWidth: { value: "{outlineWidths.medium.value}" },
    outlineOffset: { value: "{outlineOffsets.medium.value}" },
    // We want the dot inside the border to be a border-width from the border
    padding: { value: "{borderWidths.medium.value}" },
    small: {
      width: { value: "{fontSizes.small.value}" },
      height: { value: "{fontSizes.small.value}" }
    },
    large: {
      width: { value: "{fontSizes.large.value}" },
      height: { value: "{fontSizes.large.value}" }
    },
    _checked: {
      color: {
        value: "{colors.primary.80.value}"
      },
      _disabled: { color: { value: "{colors.background.disabled.value}" } }
    },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _error: {
      borderColor: { value: "{colors.border.error.value}" },
      _focus: {
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" }
    }
  },
  label: {
    color: { value: "{components.text.color.value}" },
    _disabled: {
      color: {
        value: "{colors.font.disabled.value}"
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radioGroup.mjs
var radiogroup = {
  radio: {
    borderWidth: { value: "{components.radio.button.borderWidth}" },
    borderColor: { value: "{components.radio.button.borderColor}" },
    backgroundColor: { value: "{components.radio.button.backgroundColor}" },
    _checked: {
      color: { value: "{components.radio.button._checked.color}" }
    },
    label: {
      color: { value: "{components.radio.label.color}" }
    }
  },
  legend: {
    color: { value: "{components.fieldset.legend.color}" },
    fontWeight: { value: "{fontWeights.normal}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/rating.mjs
var rating = {
  large: { size: { value: "{fontSizes.xxxl.value}" } },
  default: { size: { value: "{fontSizes.xl.value}" } },
  small: { size: { value: "{fontSizes.small.value}" } },
  filled: { color: { value: "{colors.secondary.80.value}" } },
  empty: { color: { value: "{colors.background.tertiary.value}" } }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/searchField.mjs
var searchfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  button: {
    color: { value: "{components.button.color.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    _active: {
      backgroundColor: {
        value: "{components.button._active.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._active.borderColor.value}" },
      color: { value: "{components.button._active.color.value}" }
    },
    _disabled: {
      backgroundColor: {
        value: "{components.button._disabled.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button._disabled.borderColor.value}"
      },
      color: { value: "{components.button._disabled.color.value}" }
    },
    _focus: {
      backgroundColor: {
        value: "{components.button._focus.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._focus.borderColor.value}" },
      color: { value: "{components.button._focus.color.value}" }
    },
    _hover: {
      backgroundColor: {
        value: "{components.button._hover.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._hover.borderColor.value}" },
      color: { value: "{components.button._hover.color.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/select.mjs
var select = {
  color: { value: "{components.fieldcontrol.color}" },
  backgroundColor: { value: "{colors.background.primary.value}" },
  paddingInlineEnd: { value: "{space.xxl.value}" },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "{colors.background.disabled.value}" }
  },
  // wrappers
  wrapper: {
    flex: { value: "1" },
    display: { value: "block" },
    position: { value: "relative" },
    cursor: { value: "pointer" }
  },
  iconWrapper: {
    alignItems: { value: "center" },
    position: { value: "absolute" },
    top: { value: "50%" },
    right: { value: "{space.medium.value}" },
    transform: { value: "translateY(-50%)" },
    pointerEvents: { value: "none" },
    small: {
      right: { value: "{space.xs.value}" }
    },
    large: {
      right: { value: "{space.medium.value}" }
    }
  },
  // It's important to test these option values on Chrome/FireFox/Edge
  // on Windows because they allow styling of the option element.
  // Chrome/Safari/Firefox on Mac uses the system ui.
  option: {
    backgroundColor: { value: "transparent" },
    color: { value: "{colors.font.primary.value}" },
    _disabled: {
      color: { value: "{colors.font.disabled.value}" },
      backgroundColor: {
        value: "transparent"
      }
    }
  },
  whiteSpace: { value: "nowrap" },
  minWidth: { value: "6.5rem" },
  small: {
    minWidth: { value: "5.5rem" },
    paddingInlineEnd: { value: "{space.xl.value}" }
  },
  large: {
    minWidth: { value: "7.5rem" },
    paddingInlineEnd: { value: "{space.xxl.value}" }
  },
  expanded: {
    paddingBlock: { value: "{space.xs.value}" },
    paddingInline: { value: "{space.small.value}" },
    option: {
      paddingBlock: { value: "{space.xs.value}" },
      paddingInline: { value: "{space.small.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/selectField.mjs
var selectfield = {
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  color: { value: "{components.fieldcontrol.color}" },
  flexDirection: {
    value: "column"
  },
  fontSize: { value: "{components.fieldcontrol.fontSize}" },
  _focus: {
    borderColor: { value: "{components.fieldcontrol._focus.borderColor}" }
  },
  label: {
    color: { value: "{components.field.label.color}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/sliderField.mjs
var sliderfield = {
  paddingBlock: { value: "{space.xs.value}" },
  // The track is the thin background of the slider
  track: {
    backgroundColor: { value: "{colors.background.quaternary.value}" },
    borderRadius: { value: "9999px" },
    height: { value: "0.375rem" },
    minWidth: { value: "10rem" }
  },
  // The range is the filled part of the track
  range: {
    backgroundColor: { value: "{colors.primary.80.value}" },
    borderRadius: { value: "9999px" },
    _disabled: {
      backgroundColor: { value: "{colors.background.disabled.value}" }
    }
  },
  // The thumb is the circle above the track that the user drags
  thumb: {
    width: { value: "1.25rem" },
    height: { value: "1.25rem" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    boxShadow: { value: "{shadows.small.value}" },
    borderRadius: { value: "50%" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    borderColor: { value: "{colors.border.primary.value}" },
    borderStyle: { value: "solid" },
    _disabled: {
      backgroundColor: { value: "{colors.background.disabled.value}" },
      borderColor: { value: "transparent" },
      boxShadow: { value: "none" }
    },
    _hover: {
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.focus.value}" }
    },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    }
  },
  small: {
    track: {
      height: { value: "0.25rem" }
    },
    thumb: {
      width: { value: "1rem" },
      height: { value: "1rem" }
    }
  },
  large: {
    track: {
      height: { value: "0.625rem" }
    },
    thumb: {
      width: { value: "1.5rem" },
      height: { value: "1.5rem" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/stepperField.mjs
var stepperfield = {
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  flexDirection: { value: "column" },
  input: {
    color: { value: "{components.fieldcontrol.color}" },
    fontSize: { value: "{components.fieldcontrol.fontSize}" },
    textAlign: { value: "center" }
  },
  button: {
    color: { value: "{components.button.color}" },
    backgroundColor: { value: "{colors.transparent}" },
    _active: {
      color: { value: "{components.button._active.color}" },
      backgroundColor: { value: "{components.button._active.backgroundColor}" }
    },
    _focus: {
      color: { value: "{components.button._focus.color}" },
      backgroundColor: { value: "{components.button._focus.backgroundColor}" }
    },
    _disabled: {
      color: { value: "{components.button._disabled.color}" },
      backgroundColor: {
        value: "{components.fieldcontrol._disabled.backgroundColor}"
      }
    },
    _hover: {
      color: { value: "{components.button._hover.color}" },
      backgroundColor: { value: "{components.button._hover.backgroundColor}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/storagemanager.mjs
var storagemanager = {
  dropzone: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "dashed" },
    borderWidth: { value: "{borderWidths.small}" },
    gap: { value: "{space.small}" },
    paddingBlock: { value: "{space.xl}" },
    paddingInline: { value: "{space.large}" },
    textAlign: { value: "center" },
    _active: {
      backgroundColor: { value: "{colors.primary.10}" },
      borderRadius: {
        value: "{components.storagemanager.dropzone.borderRadius}"
      },
      borderColor: { value: "{colors.border.pressed}" },
      borderStyle: {
        value: "{components.storagemanager.dropzone.borderStyle}"
      },
      borderWidth: { value: "{borderWidths.medium}" }
    },
    icon: {
      color: { value: "{colors.border.primary}" },
      fontSize: { value: "{fontSizes.xxl}" }
    },
    text: {
      color: { value: "{colors.font.tertiary}" },
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" }
    }
  },
  file: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    paddingBlock: { value: "{space.xs}" },
    paddingInline: { value: "{space.small}" },
    gap: { value: "{space.small}" },
    alignItems: { value: "baseline" },
    name: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    size: {
      fontSize: { value: "{fontSizes.small}" },
      fontWeight: { value: "{fontWeights.normal}" },
      color: { value: "{colors.font.tertiary}" }
    },
    image: {
      width: { value: "{space.xxl}" },
      height: { value: "{space.xxl}" },
      backgroundColor: { value: "{colors.background.secondary}" },
      color: { value: "{colors.font.tertiary}" },
      borderRadius: { value: "{radii.small}" }
    }
  },
  filelist: {
    flexDirection: { value: "column" },
    gap: { value: "{space.small}" }
  },
  loader: {
    strokeLinecap: { value: "round" },
    strokeEmpty: { value: "{colors.border.secondary}" },
    strokeFilled: { value: "{components.loader.strokeFilled}" },
    strokeWidth: { value: "{borderWidths.large}" }
  },
  previewer: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    borderRadius: { value: "{radii.small}" },
    paddingBlock: { value: "{space.zero}" },
    paddingInline: { value: "{space.zero}" },
    maxHeight: { value: "40rem" },
    maxWidth: { value: "auto" },
    text: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    body: {
      paddingBlock: { value: "{space.medium}" },
      paddingInline: { value: "{space.medium}" },
      gap: { value: "{space.small}" }
    },
    footer: {
      justifyContent: { value: "flex-end" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/switchField.mjs
var switchfield = {
  // States
  _disabled: {
    opacity: { value: "{opacities.60.value}" }
  },
  _focused: {
    shadow: {
      value: "{components.fieldcontrol._focus.boxShadow.value}"
    }
  },
  // Sizes
  fontSize: { value: "{fontSizes.medium.value}" },
  large: {
    fontSize: { value: "{fontSizes.large.value}" }
  },
  small: {
    fontSize: { value: "{fontSizes.small.value}" }
  },
  // Child elements
  label: {
    padding: { value: "{space.xs.value}" }
  },
  thumb: {
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.xxxl.value}" },
    checked: {
      transform: { value: "{transforms.slideX.medium.value}" }
    },
    transition: {
      duration: { value: "{time.medium.value}" }
    },
    width: { value: "{space.relative.medium.value}" }
  },
  track: {
    backgroundColor: { value: "{colors.background.quaternary.value}" },
    borderRadius: { value: "{radii.xxxl.value}" },
    checked: {
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    height: { value: "{space.relative.medium.value}" },
    padding: { value: "{outlineWidths.medium.value}" },
    transition: {
      duration: { value: "{time.short.value}" }
    },
    width: { value: "{space.relative.xl.value}" },
    _error: {
      backgroundColor: { value: "{colors.background.error.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/table.mjs
var table = {
  /**
   * Default table styles
   */
  borderCollapse: { value: "collapse" },
  display: { value: "table" },
  width: { value: "100%" },
  /**
   * Default table head styles
   */
  head: {
    display: { value: "table-header-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table body styles
   */
  body: {
    display: { value: "table-row-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table foot styles
   */
  foot: {
    display: { value: "table-footer-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table row styles
   */
  row: {
    display: { value: "table-row" },
    verticalAlign: { value: "middle" },
    hover: {
      backgroundColor: { value: "{colors.background.tertiary.value}" }
    },
    striped: {
      backgroundColor: { value: "{colors.background.secondary.value}" }
    }
  },
  /**
   * Default table header cell styles
   */
  header: {
    borderColor: { value: "{colors.border.tertiary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-cell" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    padding: { value: "{space.medium.value}" },
    verticalAlign: { value: "middle" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" },
      padding: { value: "{space.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" },
      padding: { value: "{space.xs.value}" }
    }
  },
  /**
   * Default table data cell styles
   */
  data: {
    borderColor: { value: "{colors.border.tertiary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-cell" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.normal.value}" },
    padding: { value: "{space.medium.value}" },
    verticalAlign: { value: "middle" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" },
      padding: { value: "{space.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" },
      padding: { value: "{space.xs.value}" }
    }
  },
  /**
   * Default table caption styles
   */
  caption: {
    captionSide: { value: "bottom" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-caption" },
    fontSize: { value: "{fontSizes.medium.value}" },
    textAlign: { value: "center" },
    wordBreak: { value: "break-all" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/tabs.mjs
var tabs = {
  backgroundColor: { value: "transparent" },
  borderColor: { value: "{colors.border.secondary.value}" },
  borderStyle: { value: "solid" },
  borderWidth: { value: "{borderWidths.medium.value}" },
  gap: { value: "0" },
  item: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.secondary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    color: { value: "{colors.font.secondary.value}" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    paddingVertical: { value: "{space.small.value}" },
    paddingHorizontal: { value: "{space.medium.value}" },
    textAlign: { value: "center" },
    transitionDuration: { value: "{time.medium.value}" },
    _hover: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.hover.value}" }
    },
    _focus: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "{borderWidths.medium}",
          color: "{colors.border.focus.value}"
        }
      },
      color: { value: "{colors.font.focus.value}" }
    },
    _active: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.font.interactive.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.interactive.value}" }
    },
    _disabled: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.tertiary.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  panel: {
    backgroundColor: { value: "transparent" },
    paddingInline: { value: "0" },
    paddingBlock: { value: "{space.small.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/text.mjs
var text = {
  // default styles
  color: { value: "{colors.font.primary.value}" },
  // variations
  primary: {
    color: { value: "{colors.font.primary.value}" }
  },
  secondary: {
    color: { value: "{colors.font.secondary.value}" }
  },
  tertiary: {
    color: { value: "{colors.font.tertiary.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" }
  },
  info: {
    color: { value: "{colors.font.info.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textAreaField.mjs
var textareafield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textField.mjs
var textfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButton.mjs
var togglebutton = {
  borderColor: { value: "{colors.border.primary.value}" },
  color: { value: "{colors.font.primary.value}" },
  _hover: {
    backgroundColor: { value: "{colors.overlay.10.value}" }
  },
  _focus: {
    borderColor: { value: "{colors.border.focus.value}" },
    color: { value: "{colors.font.primary.value}" }
  },
  _active: {
    backgroundColor: { value: "{colors.transparent.value}" }
  },
  _disabled: {
    backgroundColor: { value: "{colors.transparent.value}" },
    borderColor: { value: "{colors.border.disabled.value}" },
    color: { value: "{colors.font.disabled.value}" }
  },
  _pressed: {
    borderColor: { value: "{colors.border.pressed.value}" },
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.overlay.20.value}" },
    _hover: {
      backgroundColor: { value: "{colors.overlay.30.value}" }
    }
  },
  primary: {
    backgroundColor: { value: "{colors.transparent.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      backgroundColor: { value: "{colors.transparent.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    _hover: {
      backgroundColor: { value: "{colors.overlay.10.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _pressed: {
      backgroundColor: { value: "{colors.primary.80.value}" },
      borderColor: { value: "{colors.primary.80.value}" },
      color: { value: "{colors.background.primary.value}" },
      _focus: {
        backgroundColor: {
          value: "{colors.border.focus.value}"
        },
        borderColor: { value: "{colors.border.focus.value}" },
        color: { value: "{colors.background.primary.value}" }
      },
      _hover: {
        borderColor: { value: "{colors.primary.60.value}" },
        backgroundColor: {
          value: "{colors.primary.60.value}"
        },
        boxShadow: { value: "{colors.primary.60.value}" },
        color: { value: "{colors.background.primary.value}" }
      }
    }
  },
  link: {
    backgroundColor: { value: "{colors.transparent.value}" },
    color: { value: "{colors.overlay.50.value}" },
    _hover: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.50.value}" }
    },
    _focus: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.50.value}" }
    },
    _disabled: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _pressed: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.90.value}" },
      _focus: {
        backgroundColor: { value: "{colors.transparent.value}" },
        color: { value: "{colors.overlay.90.value}" }
      },
      _hover: {
        color: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.transparent.value}" }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButtonGroup.mjs
var togglebuttongroup = {
  alignItems: { value: "center" },
  alignContent: { value: "center" },
  justifyContent: { value: "flex-start" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/index.mjs
var components = {
  accordion,
  alert,
  authenticator,
  autocomplete,
  badge,
  breadcrumbs,
  button,
  card,
  checkbox,
  checkboxfield,
  collection,
  copy,
  countrycodeselect: dialcodeselect,
  divider,
  dropzone,
  field,
  fieldcontrol,
  fieldgroup,
  fieldmessages,
  fieldset,
  flex,
  heading,
  icon,
  highlightmatch,
  image,
  inappmessaging,
  input,
  link,
  liveness,
  loader,
  menu,
  message,
  pagination,
  passwordfield,
  phonenumberfield,
  placeholder,
  radio,
  radiogroup,
  rating,
  searchfield,
  select,
  selectfield,
  sliderfield,
  stepperfield,
  storagemanager,
  switchfield,
  table,
  tabs,
  text,
  textareafield,
  textfield,
  togglebutton,
  togglebuttongroup
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fonts.mjs
var fonts = {
  default: {
    variable: {
      value: `'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont,
        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',
        sans-serif`
    },
    static: {
      value: `'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',
        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif`
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontSizes.mjs
var fontSizes = {
  xxxs: { value: "0.375rem" },
  xxs: { value: "0.5rem" },
  xs: { value: "0.75rem" },
  small: { value: "0.875rem" },
  medium: { value: "1rem" },
  large: { value: "1.25rem" },
  xl: { value: "1.5rem" },
  xxl: { value: "2rem" },
  xxxl: { value: "2.5rem" },
  xxxxl: { value: "3rem" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontWeights.mjs
var fontWeights = {
  hairline: { value: 100 },
  thin: { value: 200 },
  light: { value: 300 },
  normal: { value: 400 },
  medium: { value: 500 },
  semibold: { value: 600 },
  bold: { value: 700 },
  extrabold: { value: 800 },
  black: { value: 900 }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/lineHeights.mjs
var lineHeights = {
  small: { value: "1.25" },
  medium: { value: "1.5" },
  large: { value: "2" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/opacities.mjs
var opacities = {
  0: { value: "0" },
  10: { value: "0.1" },
  20: { value: "0.2" },
  30: { value: "0.3" },
  40: { value: "0.4" },
  50: { value: "0.5" },
  60: { value: "0.6" },
  70: { value: "0.7" },
  80: { value: "0.8" },
  90: { value: "0.9" },
  100: { value: "1" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineOffsets.mjs
var outlineOffsets = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineWidths.mjs
var outlineWidths = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/radii.mjs
var radii = {
  xs: { value: "0.125rem" },
  small: { value: "0.25rem" },
  medium: { value: "0.5rem" },
  large: { value: "1rem" },
  xl: { value: "2rem" },
  xxl: { value: "4rem" },
  xxxl: { value: "8rem" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/shadows.mjs
var shadows = {
  small: {
    value: {
      offsetX: "0px",
      offsetY: "2px",
      blurRadius: "4px",
      color: "{colors.shadow.tertiary.value}"
    }
  },
  medium: {
    value: {
      offsetX: "0px",
      offsetY: "2px",
      blurRadius: "6px",
      color: "{colors.shadow.secondary.value}"
    }
  },
  large: {
    value: {
      offsetX: "0px",
      offsetY: "4px",
      blurRadius: "12px",
      color: "{colors.shadow.primary.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/space.mjs
var space = {
  zero: { value: "0" },
  xxxs: { value: "0.25rem" },
  xxs: { value: "0.375rem" },
  xs: { value: "0.5rem" },
  small: { value: "0.75rem" },
  medium: { value: "1rem" },
  large: { value: "1.5rem" },
  xl: { value: "2.0rem" },
  xxl: { value: "3.0rem" },
  xxxl: { value: "4.5rem" },
  relative: {
    //creating a second set of sizes using em which will be sized relative to a parent instead of the root
    xxxs: { value: "0.25em" },
    xxs: { value: "0.375em" },
    xs: { value: "0.5em" },
    small: { value: "0.75em" },
    medium: { value: "1em" },
    large: { value: "1.5em" },
    xl: { value: "2.0em" },
    xxl: { value: "3.0em" },
    xxxl: { value: "4.5em" },
    full: { value: "100%" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/time.mjs
var time = {
  short: { value: "100ms" },
  medium: { value: "250ms" },
  long: { value: "500ms" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/transforms.mjs
var transforms = {
  // TODO: make this more generic and cross-platform
  slideX: {
    small: { value: "translateX(0.5em)" },
    medium: { value: "translateX(1em)" },
    large: { value: "translateX(2em)" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/index.mjs
var tokens = {
  components,
  borderWidths,
  colors,
  fonts,
  fontSizes,
  fontWeights,
  lineHeights,
  opacities,
  outlineOffsets,
  outlineWidths,
  radii,
  shadows,
  space,
  time,
  transforms
};
var reactNativeTokens = {
  colors,
  borderWidths,
  fontSizes: {
    xxs: fontSizes.xxs,
    xs: fontSizes.xs,
    small: fontSizes.small,
    medium: fontSizes.medium,
    large: fontSizes.large,
    xl: fontSizes.xl,
    xxl: fontSizes.xxl,
    xxxl: fontSizes.xxxl
  },
  fontWeights,
  opacities,
  // React Native doesn't need the relative space values
  space: {
    // use `space.xxxs` to output a value of `2` and avoid odd space numbers
    xxs: space.xxxs,
    xs: space.xs,
    small: space.small,
    medium: space.medium,
    large: space.large,
    xl: space.xl,
    xxl: space.xxl,
    xxxl: space.xxxl
  },
  radii,
  time
};

// node_modules/@aws-amplify/ui/dist/esm/theme/breakpoints.mjs
var breakpoints = {
  values: {
    base: 0,
    small: 480,
    medium: 768,
    large: 992,
    xl: 1280,
    xxl: 1536
  },
  defaultBreakpoint: "base"
};

// node_modules/@aws-amplify/ui/dist/esm/theme/defaultTheme.mjs
var defaultTheme = {
  tokens,
  breakpoints,
  name: "default-theme"
};

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme.mjs
var import_deepExtend = __toESM(require_deepExtend(), 1);
var import_flattenProperties = __toESM(require_flattenProperties(), 1);

// node_modules/@aws-amplify/ui/dist/esm/theme/utils.mjs
var import_kebabCase = __toESM(require_kebabCase(), 1);
var import_usesReference = __toESM(require_usesReference(), 1);

// node_modules/@aws-amplify/ui/dist/esm/utils/setUserAgent/constants.mjs
var ACCOUNT_SETTINGS_INPUT_BASE = {
  apis: [AuthAction.DeleteUser, AuthAction.UpdatePassword],
  category: Category.Auth
};
var AUTHENTICATOR_INPUT_BASE = {
  apis: [
    AuthAction.SignUp,
    AuthAction.ConfirmSignUp,
    AuthAction.ResendSignUpCode,
    AuthAction.SignIn,
    AuthAction.ConfirmSignIn,
    AuthAction.FetchUserAttributes,
    AuthAction.SignOut,
    AuthAction.ResetPassword,
    AuthAction.ConfirmResetPassword,
    AuthAction.SignInWithRedirect
  ],
  category: Category.Auth
};
var IN_APP_MESSAGING_INPUT_BASE = {
  apis: [InAppMessagingAction.NotifyMessageInteraction],
  category: Category.InAppMessaging
};
var LOCATION_SEARCH_INPUT_BASE = {
  category: Category.Geo,
  apis: [
    GeoAction.SearchByText,
    GeoAction.SearchForSuggestions,
    GeoAction.SearchByPlaceId
  ]
};
var MAP_VIEW_INPUT_BASE = {
  category: Category.Geo,
  apis: []
};
var STORAGE_MANAGER_INPUT_BASE = {
  apis: [StorageAction.UploadData],
  category: Category.Storage
};

// node_modules/@aws-amplify/ui/dist/esm/utils/utils.mjs
var sanitizeNamespaceImport = (namespaceModule) => {
  const sanitizedNamespaceModule = { default: void 0, ...namespaceModule };
  return sanitizedNamespaceModule.default ?? sanitizedNamespaceModule;
};
function isObject(value) {
  return value != null && !Array.isArray(value) && typeof value === "object";
}
function isString(value) {
  return typeof value === "string" || typeof value === "object" && Object.prototype.toString.call(value) === "[object String]";
}
function isMap(value) {
  return isObject(value) && Object.prototype.toString.call(value) === "[object Map]";
}
function isSet(value) {
  return isObject(value) && Object.prototype.toString.call(value) === "[object Set]";
}
function isEmpty(value) {
  if (value === null || value === void 0)
    return true;
  if (isObject(value) && (isMap(value) || isSet(value))) {
    return !value.size;
  }
  if (isObject(value) && (isString(value) || Array.isArray(value))) {
    return !value.length;
  }
  for (const key in value) {
    if (has(value, key)) {
      return false;
    }
  }
  return true;
}
function isEmptyArray(value) {
  return Array.isArray(value) && isEmpty(value);
}
function areEmptyArrays(...values) {
  return values.every(isEmptyArray);
}
function isEmptyObject(value) {
  return isObject(value) && isEmpty(value);
}
function areEmptyObjects(...values) {
  return values.every(isEmptyObject);
}
function has(value, key) {
  return value != null && Object.prototype.hasOwnProperty.call(value, key);
}
function isFunction(value) {
  return typeof value === "function";
}
var classNameModifier = (base, modifier) => {
  return modifier ? `${base}--${modifier}` : "";
};
var classNameModifierByFlag = (base, modifier, flag) => {
  return flag ? `${base}--${modifier}` : "";
};
function isTypedFunction(value) {
  return isFunction(value);
}
function noop(..._) {
  return;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/utils.mjs
var CSS_VARIABLE_PREFIX = "amplify";
var SHADOW_PROPERTIES = [
  "offsetX",
  "offsetY",
  "blurRadius",
  "spreadRadius",
  "color"
];
function referenceValue(value) {
  if (!value)
    return "";
  if ((0, import_usesReference.default)(value)) {
    const path2 = value.replace(/\{|\}/g, "").replace(".value", "").split(".");
    return `var(--${cssNameTransform({ path: path2 })})`;
  }
  return value;
}
function cssValue(token) {
  const { value } = token;
  if (isString(value)) {
    return referenceValue(value);
  }
  if (isShadowTokenObject(value)) {
    return SHADOW_PROPERTIES.map((property) => {
      return referenceValue(
        // lookup property against `token` first for custom non-nested value, then lookup
        // property against `value` for design token value
        isShadowTokenObject(token) ? token[property] : value[property]
      );
    }).join(" ");
  }
  return value;
}
function cssNameTransform({ path: path2 = [] }) {
  return `${(0, import_kebabCase.default)([CSS_VARIABLE_PREFIX, ...path2].join(" "))}`;
}
function isDesignToken(value) {
  return isObject(value) && has(value, "value");
}
function isShadowTokenObject(value) {
  return isObject(value) && has(value, "offsetX");
}
function setupTokens({ tokens: tokens2, path: path2 = [], setupToken: setupToken2 }) {
  if (has(tokens2, "value")) {
    return setupToken2({ token: tokens2, path: path2 });
  }
  const output = {};
  for (const name in tokens2) {
    if (has(tokens2, name)) {
      const value = tokens2[name];
      const nextTokens = isObject(value) ? value : { value };
      output[name] = setupTokens({
        tokens: nextTokens,
        path: path2.concat(name),
        setupToken: setupToken2
      });
    }
  }
  return output;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme.mjs
var setupToken = ({ token, path: path2 }) => {
  const name = `--${cssNameTransform({ path: path2 })}`;
  const { value: original } = token;
  const value = cssValue(token);
  return { name, original, path: path2, value, toString: () => `var(${name})` };
};
function createColorPalette({ keys, value }) {
  return keys.reduce((acc, key) => {
    return {
      ...acc,
      [key]: { value: `{colors.${value}.${key}.value}` }
    };
  }, {});
}
function createTheme(theme, DefaultTheme = defaultTheme) {
  const mergedTheme = (0, import_deepExtend.default)([{}, DefaultTheme, theme]);
  const { primaryColor, secondaryColor } = mergedTheme;
  if (isString(primaryColor)) {
    mergedTheme.tokens.colors.primary = createColorPalette({
      keys: Object.keys(mergedTheme.tokens.colors[primaryColor]),
      value: primaryColor
    });
  }
  if (isString(secondaryColor)) {
    mergedTheme.tokens.colors.secondary = createColorPalette({
      keys: Object.keys(mergedTheme.tokens.colors[secondaryColor]),
      value: secondaryColor
    });
  }
  const tokens2 = setupTokens({
    tokens: mergedTheme.tokens,
    setupToken
  });
  const { breakpoints: breakpoints2, name } = mergedTheme;
  let cssText = `[data-amplify-theme="${name}"] {
` + (0, import_flattenProperties.default)(tokens2).map((token) => `${token.name}: ${token.value};`).join("\n") + `
}
`;
  let overrides = [];
  if (mergedTheme.overrides) {
    overrides = mergedTheme.overrides.map((override) => {
      const tokens3 = setupTokens({
        tokens: override.tokens,
        setupToken
      });
      const customProperties = (0, import_flattenProperties.default)(tokens3).map((token) => `${token.name}: ${token.value};`).join("\n");
      if ("selector" in override) {
        cssText += `
${override.selector} {
${customProperties}
}
`;
      }
      if ("mediaQuery" in override) {
        cssText += `
@media (${override.mediaQuery}) {
  [data-amplify-theme="${name}"] {
    ${customProperties}
  }
}
`;
      }
      if ("breakpoint" in override) {
        const breakpoint = mergedTheme.breakpoints.values[override.breakpoint];
        cssText += `
@media (min-width: ${breakpoint}px) {
  [data-amplify-theme="${name}"] {
    ${customProperties}
  }
}
`;
      }
      if ("colorMode" in override) {
        cssText += `
@media (prefers-color-scheme: ${override.colorMode}) {
          [data-amplify-theme="${name}"][data-amplify-color-mode="system"] {
            ${customProperties}
            color-scheme: ${override.colorMode};
          }
        }
`;
        cssText += `
[data-amplify-theme="${name}"][data-amplify-color-mode="${override.colorMode}"] {
          ${customProperties}
          color-scheme: ${override.colorMode};
        }
`;
      }
      return {
        ...override,
        tokens: tokens3
      };
    });
  }
  return {
    tokens: tokens2,
    breakpoints: breakpoints2,
    name,
    cssText,
    // keep overrides separate from base theme
    // this allows web platforms to use plain CSS scoped to a
    // selector and only override the CSS vars needed. This
    // means we could generate CSS at build-time in a postcss
    // plugin, or do it at runtime and inject the CSS into a
    // style tag.
    // This also allows RN to dynamically switch themes in a
    // provider.
    overrides
  };
}

// node_modules/@aws-amplify/ui/dist/esm/theme/defaultDarkModeOverride.mjs
var darkModeTokens = {
  colors: {
    red: {
      10: tokens.colors.red[100],
      20: tokens.colors.red[90],
      40: tokens.colors.red[80],
      // 60 doesn't change
      80: tokens.colors.red[40],
      90: tokens.colors.red[20],
      100: tokens.colors.red[10]
    },
    orange: {
      10: tokens.colors.orange[100],
      20: tokens.colors.orange[90],
      40: tokens.colors.orange[80],
      // 60 doesn't change
      80: tokens.colors.orange[40],
      90: tokens.colors.orange[20],
      100: tokens.colors.orange[10]
    },
    yellow: {
      10: tokens.colors.yellow[100],
      20: tokens.colors.yellow[90],
      40: tokens.colors.yellow[80],
      // 60 doesn't change
      80: tokens.colors.yellow[40],
      90: tokens.colors.yellow[20],
      100: tokens.colors.yellow[10]
    },
    green: {
      10: tokens.colors.green[100],
      20: tokens.colors.green[90],
      40: tokens.colors.green[80],
      // 60 doesn't change
      80: tokens.colors.green[40],
      90: tokens.colors.green[20],
      100: tokens.colors.green[10]
    },
    teal: {
      10: tokens.colors.teal[100],
      20: tokens.colors.teal[90],
      40: tokens.colors.teal[80],
      // 60 doesn't change
      80: tokens.colors.teal[40],
      90: tokens.colors.teal[20],
      100: tokens.colors.teal[10]
    },
    blue: {
      10: tokens.colors.blue[100],
      20: tokens.colors.blue[90],
      40: tokens.colors.blue[80],
      // 60 doesn't change
      80: tokens.colors.blue[40],
      90: tokens.colors.blue[20],
      100: tokens.colors.blue[10]
    },
    purple: {
      10: tokens.colors.purple[100],
      20: tokens.colors.purple[90],
      40: tokens.colors.purple[80],
      // 60 doesn't change
      80: tokens.colors.purple[40],
      90: tokens.colors.purple[20],
      100: tokens.colors.purple[10]
    },
    pink: {
      10: tokens.colors.pink[100],
      20: tokens.colors.pink[90],
      40: tokens.colors.pink[80],
      // 60 doesn't change
      80: tokens.colors.pink[40],
      90: tokens.colors.pink[20],
      100: tokens.colors.pink[10]
    },
    neutral: {
      10: tokens.colors.neutral[100],
      20: tokens.colors.neutral[90],
      40: tokens.colors.neutral[80],
      // 60 doesn't change
      80: tokens.colors.neutral[40],
      90: tokens.colors.neutral[20],
      100: tokens.colors.neutral[10]
    },
    font: {
      primary: "{colors.white}",
      secondary: "{colors.neutral.100}",
      tertiary: "{colors.neutral.90}",
      inverse: "{colors.neutral.10}"
    },
    background: {
      primary: "{colors.neutral.10}",
      secondary: "{colors.neutral.20}",
      tertiary: "{colors.neutral.40}"
    },
    border: {
      primary: "{colors.neutral.60}",
      secondary: "{colors.neutral.40}",
      tertiary: "{colors.neutral.20}"
    },
    overlay: {
      5: "hsla(0, 0%, 100%, 0.05)",
      10: "hsla(0, 0%, 100%, 0.1)",
      20: "hsla(0, 0%, 100%, 0.2)",
      30: "hsla(0, 0%, 100%, 0.3)",
      40: "hsla(0, 0%, 100%, 0.4)",
      50: "hsla(0, 0%, 100%, 0.5)",
      60: "hsla(0, 0%, 100%, 0.6)",
      70: "hsla(0, 0%, 100%, 0.7)",
      80: "hsla(0, 0%, 100%, 0.8)",
      90: "hsla(0, 0%, 100%, 0.9)"
    }
  }
};
var defaultDarkModeOverride = {
  colorMode: "dark",
  tokens: darkModeTokens
};
var reactNativeDarkTokens = {
  ...darkModeTokens
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/actor.mjs
var getActorState = (state) => {
  var _a2;
  return (_a2 = state.context.actorRef) == null ? void 0 : _a2.getSnapshot();
};
var getActorContext = (state) => {
  var _a2;
  return (_a2 = getActorState(state)) == null ? void 0 : _a2.context;
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/defaultAuthHubHandler.mjs
var defaultAuthHubHandler = ({ payload }, service, options) => {
  const { event: event2 } = payload;
  const { send: send3 } = service;
  const { onSignIn, onSignOut } = options ?? {};
  switch (event2) {
    case "signedIn": {
      if (isFunction(onSignIn)) {
        onSignIn(payload);
      }
      break;
    }
    case "signInWithRedirect": {
      send3("SIGN_IN_WITH_REDIRECT");
      break;
    }
    case "signedOut":
    case "tokenRefresh_failure": {
      if (event2 === "signedOut" && isFunction(onSignOut)) {
        onSignOut();
      }
      send3("SIGN_OUT");
      break;
    }
  }
};
var listenToAuthHub = (service, handler = defaultAuthHubHandler) => {
  const eventHandler = (data) => handler(data, service);
  return Hub.listen("auth", eventHandler, "authenticator-hub-handler");
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/country-dial-codes.mjs
var countryDialCodes = [
  "+1",
  "+7",
  "+20",
  "+27",
  "+30",
  "+31",
  "+32",
  "+33",
  "+34",
  "+36",
  "+39",
  "+40",
  "+41",
  "+43",
  "+44",
  "+45",
  "+46",
  "+47",
  "+48",
  "+49",
  "+51",
  "+52",
  "+53",
  "+54",
  "+55",
  "+56",
  "+57",
  "+58",
  "+60",
  "+61",
  "+62",
  "+63",
  "+64",
  "+65",
  "+66",
  "+81",
  "+82",
  "+84",
  "+86",
  "+90",
  "+91",
  "+92",
  "+93",
  "+94",
  "+95",
  "+98",
  "+212",
  "+213",
  "+216",
  "+218",
  "+220",
  "+221",
  "+222",
  "+223",
  "+224",
  "+225",
  "+226",
  "+227",
  "+228",
  "+229",
  "+230",
  "+231",
  "+232",
  "+233",
  "+234",
  "+235",
  "+236",
  "+237",
  "+238",
  "+239",
  "+240",
  "+241",
  "+242",
  "+243",
  "+244",
  "+245",
  "+246",
  "+248",
  "+249",
  "+250",
  "+251",
  "+252",
  "+253",
  "+254",
  "+255",
  "+256",
  "+257",
  "+258",
  "+260",
  "+261",
  "+262",
  "+263",
  "+264",
  "+265",
  "+266",
  "+267",
  "+268",
  "+269",
  "+290",
  "+291",
  "+297",
  "+298",
  "+299",
  "+345",
  "+350",
  "+351",
  "+352",
  "+353",
  "+354",
  "+355",
  "+356",
  "+357",
  "+358",
  "+359",
  "+370",
  "+371",
  "+372",
  "+373",
  "+374",
  "+375",
  "+376",
  "+377",
  "+378",
  "+379",
  "+380",
  "+381",
  "+382",
  "+385",
  "+386",
  "+387",
  "+389",
  "+420",
  "+421",
  "+423",
  "+500",
  "+501",
  "+502",
  "+503",
  "+504",
  "+505",
  "+506",
  "+507",
  "+508",
  "+509",
  "+537",
  "+590",
  "+591",
  "+593",
  "+594",
  "+595",
  "+596",
  "+597",
  "+598",
  "+599",
  "+670",
  "+672",
  "+673",
  "+674",
  "+675",
  "+676",
  "+677",
  "+678",
  "+679",
  "+680",
  "+681",
  "+682",
  "+683",
  "+685",
  "+686",
  "+687",
  "+688",
  "+689",
  "+690",
  "+691",
  "+692",
  "+850",
  "+852",
  "+853",
  "+855",
  "+856",
  "+872",
  "+880",
  "+886",
  "+960",
  "+961",
  "+962",
  "+963",
  "+964",
  "+965",
  "+966",
  "+967",
  "+968",
  "+970",
  "+971",
  "+972",
  "+973",
  "+974",
  "+975",
  "+976",
  "+977",
  "+992",
  "+993",
  "+994",
  "+995",
  "+996",
  "+998"
];

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/constants.mjs
var defaultFormFieldOptions = {
  birthdate: {
    label: "Birthdate",
    placeholder: "Enter your Birthdate",
    type: "date",
    autocomplete: "bday",
    isRequired: true
  },
  confirmation_code: {
    label: "Confirmation Code",
    placeholder: "Enter your Confirmation Code",
    type: "text",
    autocomplete: "one-time-code",
    isRequired: true
  },
  confirm_password: {
    label: "Confirm Password",
    placeholder: "Please confirm your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  email: {
    label: "Email",
    placeholder: "Enter your Email",
    type: "email",
    autocomplete: "username",
    isRequired: true
  },
  family_name: {
    label: "Family Name",
    placeholder: "Enter your Family Name",
    type: "text",
    autocomplete: "family-name",
    isRequired: true
  },
  given_name: {
    label: "Given Name",
    placeholder: "Enter your Given Name",
    type: "text",
    autocomplete: "given-name",
    isRequired: true
  },
  middle_name: {
    label: "Middle Name",
    placeholder: "Enter your Middle Name",
    type: "text",
    autocomplete: "additional-name",
    isRequired: true
  },
  name: {
    label: "Name",
    placeholder: "Enter your Name",
    type: "text",
    autocomplete: "name",
    isRequired: true
  },
  nickname: {
    label: "Nickname",
    placeholder: "Enter your Nickname",
    type: "text",
    autocomplete: "tel",
    isRequired: true
  },
  password: {
    label: "Password",
    placeholder: "Enter your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  phone_number: {
    label: "Phone Number",
    placeholder: "Enter your Phone Number",
    type: "tel",
    autocomplete: "tel",
    dialCode: "+1",
    dialCodeList: countryDialCodes,
    isRequired: true
  },
  preferred_username: {
    label: "Preferred Username",
    placeholder: "Enter your Preferred Username",
    type: "text",
    isRequired: true
  },
  profile: {
    label: "Profile",
    placeholder: "Add your Profile",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  website: {
    label: "Website",
    placeholder: "Add your Website",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  username: {
    label: "Username",
    placeholder: "Enter your Username",
    type: "text",
    autocomplete: "username",
    isRequired: true
  }
};
var ALLOWED_SPECIAL_CHARACTERS = [
  "^",
  "$",
  "*",
  ".",
  "[",
  "]",
  "{",
  "}",
  "(",
  ")",
  "?",
  '"',
  "!",
  "@",
  "#",
  "%",
  "&",
  "/",
  "\\",
  ",",
  ">",
  "<",
  "'",
  ":",
  ";",
  "|",
  "_",
  "~",
  "`",
  "=",
  "+",
  "-",
  " "
];

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/getRoute.mjs
var getRoute = (state, actorState) => {
  if (actorState == null ? void 0 : actorState.matches("federatedSignIn")) {
    if (state.matches("signUpActor")) {
      return "signUp";
    }
    if (state.matches("signInActor")) {
      return "signIn";
    }
  }
  switch (true) {
    case state.matches("idle"):
      return "idle";
    case state.matches("setup"):
      return "setup";
    case state.matches("signOut"):
      return "signOut";
    case state.matches("authenticated"):
      return "authenticated";
    case (actorState == null ? void 0 : actorState.matches("confirmSignUp")):
    case (actorState == null ? void 0 : actorState.matches("resendSignUpCode")):
      return "confirmSignUp";
    case (actorState == null ? void 0 : actorState.matches("confirmSignIn")):
      return "confirmSignIn";
    case (actorState == null ? void 0 : actorState.matches("setupTotp.edit")):
    case (actorState == null ? void 0 : actorState.matches("setupTotp.submit")):
      return "setupTotp";
    case (actorState == null ? void 0 : actorState.matches("signIn")):
      return "signIn";
    case (actorState == null ? void 0 : actorState.matches("signUp")):
    case (actorState == null ? void 0 : actorState.matches("autoSignIn")):
      return "signUp";
    case (actorState == null ? void 0 : actorState.matches("forceChangePassword")):
      return "forceNewPassword";
    case (actorState == null ? void 0 : actorState.matches("forgotPassword")):
      return "forgotPassword";
    case (actorState == null ? void 0 : actorState.matches("confirmResetPassword")):
      return "confirmResetPassword";
    case (actorState == null ? void 0 : actorState.matches("selectUserAttributes")):
      return "verifyUser";
    case (actorState == null ? void 0 : actorState.matches("confirmVerifyUserAttribute")):
      return "confirmVerifyUser";
    case state.matches("getCurrentUser"):
    case (actorState == null ? void 0 : actorState.matches("fetchUserAttributes")):
      return "transition";
    default:
      return null;
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/facade.mjs
var getSendEventAliases = (send3) => {
  const sendToMachine = (type) => {
    return (data) => send3({ type, data });
  };
  return {
    initializeMachine: sendToMachine("INIT"),
    resendCode: sendToMachine("RESEND"),
    signOut: sendToMachine("SIGN_OUT"),
    submitForm: sendToMachine("SUBMIT"),
    updateForm: sendToMachine("CHANGE"),
    updateBlur: sendToMachine("BLUR"),
    // Actions that don't immediately invoke a service but instead transition to a screen
    // are prefixed with `to*`
    toFederatedSignIn: sendToMachine("FEDERATED_SIGN_IN"),
    toForgotPassword: sendToMachine("FORGOT_PASSWORD"),
    toSignIn: sendToMachine("SIGN_IN"),
    toSignUp: sendToMachine("SIGN_UP"),
    skipVerification: sendToMachine("SKIP")
  };
};
var getServiceContextFacade = (state) => {
  var _a2, _b;
  const actorContext = getActorContext(state) ?? {};
  const { challengeName, codeDeliveryDetails, remoteError: error3, validationError: validationErrors, totpSecretCode = null, unverifiedUserAttributes, username } = actorContext;
  const { socialProviders = [] } = ((_a2 = state.context) == null ? void 0 : _a2.config) ?? {};
  const user = (actorContext == null ? void 0 : actorContext.user) ?? ((_b = state.context) == null ? void 0 : _b.user);
  const hasValidationErrors = !!(validationErrors && Object.keys(validationErrors).length > 0);
  const actorState = getActorState(state);
  const isPending = state.hasTag("pending") || (actorState == null ? void 0 : actorState.hasTag("pending"));
  const route = getRoute(state, actorState);
  const authStatus = ((route2) => {
    switch (route2) {
      case "idle":
      case "setup":
        return "configuring";
      case "authenticated":
        return "authenticated";
      default:
        return "unauthenticated";
    }
  })(route);
  const facade = {
    authStatus,
    challengeName,
    codeDeliveryDetails,
    error: error3,
    hasValidationErrors,
    isPending,
    route,
    socialProviders,
    totpSecretCode,
    unverifiedUserAttributes,
    user,
    username,
    validationErrors
    // @v6-migration-note
    // While most of the properties
    // on `AuthenticatorServiceContextFacade` can resolve to `undefined`, updating
    // the interface requires material changes in consumers (namely `useAutenticator`)
    // which will have implications on the UI layer as typeguards and non-null checks
    // are required to pass type checking. As the `Authenticator` is behaving as expected
    // with the `AuthenticatorServiceContextFacade` interface, prefer to cast
  };
  return facade;
};
var getServiceFacade = ({ send: send3, state }) => {
  const sendEventAliases = getSendEventAliases(send3);
  const serviceContext = getServiceContextFacade(state);
  return {
    ...sendEventAliases,
    ...serviceContext
  };
};

// node_modules/@aws-amplify/ui/dist/esm/types/authenticator/user.mjs
var FederatedIdentityProviders;
(function(FederatedIdentityProviders2) {
  FederatedIdentityProviders2["Apple"] = "Apple";
  FederatedIdentityProviders2["Amazon"] = "Amazon";
  FederatedIdentityProviders2["Facebook"] = "Facebook";
  FederatedIdentityProviders2["Google"] = "Google";
})(FederatedIdentityProviders || (FederatedIdentityProviders = {}));
var UnverifiedContactMethodType;
(function(UnverifiedContactMethodType2) {
  UnverifiedContactMethodType2["Email"] = "email";
  UnverifiedContactMethodType2["PhoneNumber"] = "phone_number";
})(UnverifiedContactMethodType || (UnverifiedContactMethodType = {}));

// node_modules/@aws-amplify/ui/dist/esm/types/authenticator/attributes.mjs
var signUpFieldsWithDefault = [
  "birthdate",
  "email",
  "family_name",
  "given_name",
  "middle_name",
  "name",
  "nickname",
  "phone_number",
  "preferred_username",
  "profile",
  "website"
];
var LoginMechanismArray = [
  "username",
  "email",
  "phone_number"
];
var authFieldsWithDefaults = [
  ...LoginMechanismArray,
  ...signUpFieldsWithDefault,
  "confirmation_code",
  "password",
  "confirm_password"
];
var isAuthFieldsWithDefaults = (field2) => {
  return authFieldsWithDefaults.includes(field2);
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/form.mjs
var isAuthFieldWithDefaults = (field2) => {
  return authFieldsWithDefaults.includes(field2);
};
var isArray = (val) => {
  return Array.isArray(val);
};
var getErrors = (errors) => {
  if (!errors)
    return null;
  if (isArray(errors)) {
    return errors;
  } else {
    return [errors];
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/utils.mjs
var censorAllButFirstAndLast = (value) => {
  const split = value.trim().split("");
  for (let i = 0; i < split.length; i++) {
    if (i > 0 && i < split.length - 1) {
      split[i] = "*";
    }
  }
  return split.join("");
};
var censorPhoneNumber = (val) => {
  if (val.length < 4) {
    return val;
  }
  const split = val.split("");
  for (let i = 0; i < split.length - 4; i++) {
    split[i] = "*";
  }
  return split.join("");
};
var censorEmail = (val) => {
  const splitEmail = val.split("@");
  const censoredName = censorAllButFirstAndLast(splitEmail[0]);
  return `${censoredName}@${splitEmail[1]}`;
};
var censorContactMethod = (type, value) => {
  return type === "Phone Number" ? censorPhoneNumber(value) : censorEmail(value);
};
var hasSpecialChars = (password) => ALLOWED_SPECIAL_CHARACTERS.some((char) => password.includes(char));
var getTotpCodeURL = (issuer, username, secret) => encodeURI(`otpauth://totp/${issuer}:${username}?secret=${secret}&issuer=${issuer}`);
function trimValues(values, ...ignored) {
  return Object.entries(values).reduce((acc, [name, value]) => ({
    ...acc,
    [name]: ignored.includes(name) ? value : value == null ? void 0 : value.trim()
  }), {});
}

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/utils.mjs
var getPrimaryAlias = (state) => {
  var _a2;
  const loginMechanisms = (_a2 = state == null ? void 0 : state.context.config) == null ? void 0 : _a2.loginMechanisms;
  const [primaryAlias] = loginMechanisms ?? ["username"];
  return primaryAlias;
};
var applyTranslation = (formFields) => {
  const newFormFields = { ...formFields };
  for (const [name, options] of Object.entries(formFields)) {
    const { label, placeholder: placeholder2 } = options;
    newFormFields[name] = {
      ...options,
      label: label ? translate(label) : void 0,
      placeholder: placeholder2 ? translate(placeholder2) : void 0
    };
  }
  return newFormFields;
};
var sortFormFields = (formFields) => {
  return Object.entries(formFields).sort((a, b) => {
    const orderA = a[1].order || Number.MAX_VALUE;
    const orderB = b[1].order || Number.MAX_VALUE;
    return orderA - orderB;
  }).filter((formFieldEntry) => formFieldEntry[1] !== void 0);
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/defaults.mjs
var DEFAULT_COUNTRY_CODE = "+1";
var getDefaultFormField = (fieldName) => {
  let options = defaultFormFieldOptions[fieldName];
  const { type } = options;
  if (type === "tel") {
    options = { ...options, dialCode: DEFAULT_COUNTRY_CODE };
  }
  return options;
};
var getAliasDefaultFormField = (state) => {
  const primaryAlias = getPrimaryAlias(state);
  return {
    ...getDefaultFormField(primaryAlias),
    autocomplete: "username"
  };
};
var getConfirmationCodeFormFields = (state) => ({
  confirmation_code: {
    ...getDefaultFormField("confirmation_code"),
    label: "Code *",
    placeholder: "Code"
  }
});
var getSignInFormFields = (state) => ({
  username: { ...getAliasDefaultFormField(state) },
  password: {
    ...getDefaultFormField("password"),
    autocomplete: "current-password"
  }
});
var getSignUpFormFields = (state) => {
  const { loginMechanisms, signUpAttributes } = state.context.config;
  const primaryAlias = getPrimaryAlias(state);
  const fieldNames = Array.from(/* @__PURE__ */ new Set([
    ...loginMechanisms,
    "password",
    "confirm_password",
    ...signUpAttributes
  ]));
  const formField = {};
  for (const fieldName of fieldNames) {
    if (isAuthFieldWithDefaults(fieldName)) {
      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);
      formField[fieldName] = { ...fieldAttrs };
    } else {
      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);
    }
  }
  return formField;
};
var getConfirmSignUpFormFields = (state) => ({
  confirmation_code: {
    ...getDefaultFormField("confirmation_code"),
    placeholder: "Enter your code"
  }
});
var getForgotPasswordFormFields = (state) => {
  const primaryAlias = getPrimaryAlias(state);
  const { label } = defaultFormFieldOptions[primaryAlias];
  return {
    username: {
      ...getAliasDefaultFormField(state),
      label: `Enter your ${label.toLowerCase()}`,
      placeholder: `Enter your ${label.toLowerCase()}`
    }
  };
};
var getConfirmResetPasswordFormFields = (state) => ({
  ...getConfirmationCodeFormFields(),
  password: {
    ...getDefaultFormField("password"),
    label: "New Password",
    placeholder: "New Password"
  },
  confirm_password: {
    ...getDefaultFormField("confirm_password"),
    label: "Confirm Password",
    placeholder: "Confirm Password"
  }
});
var getForceNewPasswordFormFields = (state) => {
  const actorState = getActorState(state);
  const { missingAttributes } = actorState.context;
  const fieldNames = Array.from(/* @__PURE__ */ new Set([
    "password",
    "confirm_password",
    ...missingAttributes ?? []
  ]));
  const formField = {};
  for (const fieldName of fieldNames) {
    if (isAuthFieldWithDefaults(fieldName)) {
      formField[fieldName] = { ...getDefaultFormField(fieldName) };
    } else {
      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);
    }
  }
  return formField;
};
var defaultFormFieldsGetters = {
  signIn: getSignInFormFields,
  signUp: getSignUpFormFields,
  confirmSignUp: getConfirmSignUpFormFields,
  confirmSignIn: getConfirmationCodeFormFields,
  forceNewPassword: getForceNewPasswordFormFields,
  forgotPassword: getForgotPasswordFormFields,
  confirmResetPassword: getConfirmResetPasswordFormFields,
  confirmVerifyUser: getConfirmationCodeFormFields,
  setupTotp: getConfirmationCodeFormFields
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/formFields.mjs
var getDefaultFormFields = (route, state) => {
  const formFieldGetter = defaultFormFieldsGetters[route];
  return formFieldGetter(state);
};
var getCustomFormFields = (route, state) => {
  var _a2, _b;
  const customFormFields = (_b = (_a2 = getActorContext(state)) == null ? void 0 : _a2.formFields) == null ? void 0 : _b[route];
  if (!customFormFields || Object.keys(customFormFields).length === 0) {
    return {};
  }
  return Object.entries(customFormFields).reduce((acc, [fieldName, customOptions]) => {
    if ((route === "signIn" || route === "forgotPassword") && fieldName === "username") {
      const defaultOptions3 = getAliasDefaultFormField(state);
      const mergedOptions = { ...defaultOptions3, ...customOptions };
      return { ...acc, [fieldName]: mergedOptions };
    } else if (isAuthFieldsWithDefaults(fieldName)) {
      const defaultOptions3 = defaultFormFieldOptions[fieldName];
      const mergedOptions = { ...defaultOptions3, ...customOptions };
      return { ...acc, [fieldName]: mergedOptions };
    } else {
      return { ...acc, [fieldName]: customOptions };
    }
  }, {});
};
var getFormFields = (route, state) => {
  const defaultFormFields = getDefaultFormFields(route, state);
  const customFormFields = getCustomFormFields(route, state);
  const formFields = { ...defaultFormFields, ...customFormFields };
  delete formFields["QR"];
  return applyTranslation(formFields);
};
var removeOrderKeys = (formFields) => formFields.map((field2) => {
  const key = field2[0];
  const values = { ...field2[1], order: void 0 };
  return [key, values];
});
var getSortedFormFields = (route, state) => {
  const formFields = getFormFields(route, state);
  return removeOrderKeys(sortFormFields(formFields));
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/textUtil.mjs
var getChallengeText = (challengeName) => {
  switch (challengeName) {
    case "SMS_MFA":
      return translate(DefaultTexts.CONFIRM_SMS);
    case "SOFTWARE_TOKEN_MFA":
      return translate(DefaultTexts.CONFIRM_TOTP);
    default:
      return translate(DefaultTexts.CONFIRM_MFA_DEFAULT);
  }
};
var getDeliveryMessageText = (codeDeliveryDetails) => {
  const { DeliveryMedium, Destination } = codeDeliveryDetails ?? {};
  const isEmailMessage = DeliveryMedium === "EMAIL";
  const isTextMessage = DeliveryMedium === "SMS";
  const arrivalMessage = translate(DefaultTexts.CODE_ARRIVAL);
  if (!(isEmailMessage || isTextMessage)) {
    return `${translate(DefaultTexts.CODE_SENT)}. ${arrivalMessage}.`;
  }
  const instructionMessage = isEmailMessage ? translate(DefaultTexts.CODE_EMAILED) : translate(DefaultTexts.CODE_TEXTED);
  return `${instructionMessage} ${Destination}. ${arrivalMessage}.`;
};
var getDeliveryMethodText = (codeDeliveryDetails) => {
  const { DeliveryMedium } = codeDeliveryDetails ?? {};
  const isEmailMessage = DeliveryMedium === "EMAIL";
  const isTextMessage = DeliveryMedium === "SMS";
  if (!isEmailMessage && isTextMessage) {
    return translate(DefaultTexts.WE_SENT_CODE);
  }
  return isEmailMessage ? translate(DefaultTexts.WE_EMAILED) : translate(DefaultTexts.WE_TEXTED);
};
var providerNameMap = {
  amazon: "Amazon",
  apple: "Apple",
  facebook: "Facebook",
  google: "Google"
};
var getSignInWithFederationText = (route, provider) => {
  const isSignIn = route === "signIn";
  return translate(`Sign ${isSignIn ? "In" : "Up"} with ${providerNameMap[provider]}`);
};
var authenticatorTextUtil = {
  /** Shared */
  getBackToSignInText: () => translate(DefaultTexts.BACK_SIGN_IN),
  getChangePasswordText: () => translate(DefaultTexts.CHANGE_PASSWORD),
  getChangingText: () => translate(DefaultTexts.CHANGING_PASSWORD),
  getConfirmText: () => translate(DefaultTexts.CONFIRM),
  getConfirmingText: () => translate(DefaultTexts.CONFIRMING),
  getCopyText: () => translate(DefaultTexts.UPPERCASE_COPY),
  getHidePasswordText: () => translate(DefaultTexts.HIDE_PASSWORD),
  getLoadingText: () => translate(DefaultTexts.LOADING),
  getOrText: () => translate(DefaultTexts.OR),
  getResendCodeText: () => translate(DefaultTexts.RESEND_CODE),
  getSendCodeText: () => translate(DefaultTexts.SEND_CODE),
  getSendingText: () => translate(DefaultTexts.SENDING),
  getShowPasswordText: () => translate(DefaultTexts.SHOW_PASSWORD),
  getSubmitText: () => translate(DefaultTexts.SUBMIT),
  getSubmittingText: () => translate(DefaultTexts.SUBMITTING),
  /** SignInSignUpTabs */
  getSignInTabText: () => translate(DefaultTexts.SIGN_IN_TAB),
  getSignUpTabText: () => translate(DefaultTexts.CREATE_ACCOUNT),
  /** SignIn */
  getForgotPasswordText: (shortVersion) => translate(shortVersion ? DefaultTexts.FORGOT_PASSWORD : DefaultTexts.FORGOT_YOUR_PASSWORD),
  getSigningInText: () => translate(DefaultTexts.SIGNING_IN_BUTTON),
  getSignInText: () => translate(DefaultTexts.SIGN_IN_BUTTON),
  /** SignUp */
  getCreatingAccountText: () => translate(DefaultTexts.CREATING_ACCOUNT),
  getCreateAccountText: () => translate(DefaultTexts.CREATE_ACCOUNT),
  /** ConfirmSignUp */
  getDeliveryMessageText,
  getDeliveryMethodText,
  /** ConfirmSignIn */
  getChallengeText,
  /** ForgotPassword */
  getResetYourPasswordText: () => translate(DefaultTexts.RESET_PASSWORD),
  /** SetupTotp */
  getSetupTotpText: () => translate(DefaultTexts.SETUP_TOTP),
  // TODO: add defaultText for below
  getSetupTotpInstructionsText: () => translate("Copy and paste the secret key below into an authenticator app and then enter the code in the text field below."),
  // TODO: add defaultText for "COPIED"
  getCopiedText: () => translate("COPIED"),
  /** FederatedSignIn */
  getSignInWithFederationText,
  /** VerifyUser */
  getSkipText: () => translate(DefaultTexts.SKIP),
  getVerifyText: () => translate(DefaultTexts.VERIFY),
  getVerifyContactText: () => translate(DefaultTexts.VERIFY_CONTACT),
  getAccountRecoveryInfoText: () => translate(DefaultTexts.VERIFY_HEADING),
  /** Validations */
  // TODO: add defaultText
  getInvalidEmailText: () => translate("Please enter a valid email"),
  // TODO: add defaultText
  getRequiredFieldText: () => translate("This field is required")
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/utils.mjs
var getLogger = (category) => new ConsoleLogger(`AmplifyUI:${category}`);

// node_modules/@aws-amplify/ui/dist/esm/helpers/accountSettings/utils.mjs
var logger = getLogger("Auth");
var changePassword = async ({ currentPassword, newPassword }) => {
  try {
    logger.debug("calling Auth.updatePassword");
    await updatePassword({
      oldPassword: currentPassword,
      newPassword
    });
    logger.debug("Auth.updatePassword was successful");
    return Promise.resolve();
  } catch (e) {
    logger.debug("Auth.updatePassword failed with error", e);
    return Promise.reject(e);
  }
};
var deleteUser2 = async () => {
  try {
    logger.debug("calling Auth.deleteUser");
    await deleteUser();
    logger.debug("Auth.deleteUser was successful");
    return Promise.resolve();
  } catch (e) {
    logger.debug("Auth.deleteUser failed with error", e);
    return Promise.reject(e);
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/accountSettings/validator.mjs
var getPasswordRequirement = () => {
  var _a2;
  const config = DefaultAmplify.getConfig();
  const passwordSettings = (_a2 = config == null ? void 0 : config.Auth) == null ? void 0 : _a2.Cognito.passwordFormat;
  if (!passwordSettings) {
    return null;
  }
  return {
    minLength: passwordSettings.minLength,
    needsLowerCase: passwordSettings.requireLowercase ?? false,
    needsUpperCase: passwordSettings.requireUppercase ?? false,
    needsNumber: passwordSettings.requireNumbers ?? false,
    needsSpecialChar: passwordSettings.requireSpecialCharacters ?? false
  };
};
var getHasMinLength = (minLength) => ({
  validationMode: "onTouched",
  validator: (field2) => field2.length >= minLength,
  message: `Password must have at least ${minLength} characters`
});
var hasLowerCase = {
  validationMode: "onTouched",
  validator: (field2) => /[a-z]/.test(field2),
  message: "Password must have lower case letters"
};
var hasUpperCase = {
  validationMode: "onTouched",
  validator: (field2) => /[A-Z]/.test(field2),
  message: "Password must have upper case letters"
};
var hasNumber = {
  validationMode: "onTouched",
  validator: (field2) => /[0-9]/.test(field2),
  message: "Password must have numbers"
};
var hasSpecialChar = {
  validationMode: "onTouched",
  validator: (field2) => hasSpecialChars(field2),
  message: "Password must have special characters"
};
var getMatchesConfirmPassword = (password) => {
  return {
    validationMode: "onTouched",
    validator: (confirmPassword) => password === confirmPassword,
    message: "Your passwords must match"
  };
};
var getDefaultPasswordValidators = () => {
  const requirement = getPasswordRequirement();
  if (!requirement)
    return [];
  const validators = [];
  const { minLength, needsLowerCase, needsUpperCase, needsNumber, needsSpecialChar } = requirement;
  if (minLength) {
    validators.push(getHasMinLength(minLength));
  }
  if (needsLowerCase) {
    validators.push(hasLowerCase);
  }
  if (needsUpperCase) {
    validators.push(hasUpperCase);
  }
  if (needsNumber) {
    validators.push(hasNumber);
  }
  if (needsSpecialChar) {
    validators.push(hasSpecialChar);
  }
  return validators;
};
var getDefaultConfirmPasswordValidators = (password) => {
  return [getMatchesConfirmPassword(password)];
};
var shouldValidate = ({ validationMode, eventType, hasBlurred }) => {
  switch (validationMode) {
    case "onBlur": {
      return eventType === "blur";
    }
    case "onChange": {
      return eventType === "change";
    }
    case "onTouched": {
      return eventType === "blur" || hasBlurred;
    }
  }
};
var runFieldValidators = ({ value, validators, eventType, hasBlurred }) => {
  if (!value)
    return [];
  return validators.reduce((prevErrors, validatorSpec) => {
    const { validator, validationMode, message: message2 } = validatorSpec;
    if (shouldValidate({ validationMode, eventType, hasBlurred })) {
      const hasError = !validator(value);
      return hasError ? [...prevErrors, message2] : prevErrors;
    }
    return prevErrors;
  }, []);
};

// node_modules/xstate/es/actions.js
var actions_exports = {};
__export(actions_exports, {
  actionTypes: () => actionTypes_exports,
  after: () => after2,
  assign: () => assign2,
  cancel: () => cancel2,
  choose: () => choose2,
  done: () => done,
  doneInvoke: () => doneInvoke,
  error: () => error2,
  escalate: () => escalate,
  forwardTo: () => forwardTo,
  getActionFunction: () => getActionFunction,
  initEvent: () => initEvent,
  isActionObject: () => isActionObject,
  log: () => log2,
  pure: () => pure2,
  raise: () => raise2,
  resolveActions: () => resolveActions,
  resolveLog: () => resolveLog,
  resolveRaise: () => resolveRaise,
  resolveSend: () => resolveSend,
  resolveStop: () => resolveStop,
  respond: () => respond,
  send: () => send2,
  sendParent: () => sendParent,
  sendTo: () => sendTo,
  sendUpdate: () => sendUpdate,
  start: () => start2,
  stop: () => stop2,
  toActionObject: () => toActionObject,
  toActionObjects: () => toActionObjects,
  toActivityDefinition: () => toActivityDefinition
});

// node_modules/xstate/es/_virtual/_tslib.js
var __assign2 = function() {
  __assign2 = Object.assign || function __assign4(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error3) {
    e = { error: error3 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/xstate/es/types.js
var ActionTypes;
(function(ActionTypes2) {
  ActionTypes2["Start"] = "xstate.start";
  ActionTypes2["Stop"] = "xstate.stop";
  ActionTypes2["Raise"] = "xstate.raise";
  ActionTypes2["Send"] = "xstate.send";
  ActionTypes2["Cancel"] = "xstate.cancel";
  ActionTypes2["NullEvent"] = "";
  ActionTypes2["Assign"] = "xstate.assign";
  ActionTypes2["After"] = "xstate.after";
  ActionTypes2["DoneState"] = "done.state";
  ActionTypes2["DoneInvoke"] = "done.invoke";
  ActionTypes2["Log"] = "xstate.log";
  ActionTypes2["Init"] = "xstate.init";
  ActionTypes2["Invoke"] = "xstate.invoke";
  ActionTypes2["ErrorExecution"] = "error.execution";
  ActionTypes2["ErrorCommunication"] = "error.communication";
  ActionTypes2["ErrorPlatform"] = "error.platform";
  ActionTypes2["ErrorCustom"] = "xstate.error";
  ActionTypes2["Update"] = "xstate.update";
  ActionTypes2["Pure"] = "xstate.pure";
  ActionTypes2["Choose"] = "xstate.choose";
})(ActionTypes || (ActionTypes = {}));
var SpecialTargets;
(function(SpecialTargets2) {
  SpecialTargets2["Parent"] = "#_parent";
  SpecialTargets2["Internal"] = "#_internal";
})(SpecialTargets || (SpecialTargets = {}));

// node_modules/xstate/es/actionTypes.js
var actionTypes_exports = {};
__export(actionTypes_exports, {
  after: () => after,
  assign: () => assign,
  cancel: () => cancel,
  choose: () => choose,
  doneState: () => doneState,
  error: () => error,
  errorExecution: () => errorExecution,
  errorPlatform: () => errorPlatform,
  init: () => init,
  invoke: () => invoke,
  log: () => log,
  nullEvent: () => nullEvent,
  pure: () => pure,
  raise: () => raise,
  send: () => send,
  start: () => start,
  stop: () => stop,
  update: () => update
});
var start = ActionTypes.Start;
var stop = ActionTypes.Stop;
var raise = ActionTypes.Raise;
var send = ActionTypes.Send;
var cancel = ActionTypes.Cancel;
var nullEvent = ActionTypes.NullEvent;
var assign = ActionTypes.Assign;
var after = ActionTypes.After;
var doneState = ActionTypes.DoneState;
var log = ActionTypes.Log;
var init = ActionTypes.Init;
var invoke = ActionTypes.Invoke;
var errorExecution = ActionTypes.ErrorExecution;
var errorPlatform = ActionTypes.ErrorPlatform;
var error = ActionTypes.ErrorCustom;
var update = ActionTypes.Update;
var choose = ActionTypes.Choose;
var pure = ActionTypes.Pure;

// node_modules/xstate/es/constants.js
var STATE_DELIMITER = ".";
var EMPTY_ACTIVITY_MAP = {};
var DEFAULT_GUARD_TYPE = "xstate.guard";
var TARGETLESS_KEY = "";

// node_modules/xstate/es/environment.js
var IS_PRODUCTION = false;

// node_modules/xstate/es/utils.js
var _a;
function matchesState(parentStateId, childStateId, delimiter) {
  if (delimiter === void 0) {
    delimiter = STATE_DELIMITER;
  }
  var parentStateValue = toStateValue(parentStateId, delimiter);
  var childStateValue = toStateValue(childStateId, delimiter);
  if (isString2(childStateValue)) {
    if (isString2(parentStateValue)) {
      return childStateValue === parentStateValue;
    }
    return false;
  }
  if (isString2(parentStateValue)) {
    return parentStateValue in childStateValue;
  }
  return Object.keys(parentStateValue).every(function(key) {
    if (!(key in childStateValue)) {
      return false;
    }
    return matchesState(parentStateValue[key], childStateValue[key]);
  });
}
function getEventType(event2) {
  try {
    return isString2(event2) || typeof event2 === "number" ? "".concat(event2) : event2.type;
  } catch (e) {
    throw new Error("Events must be strings or objects with a string event.type property.");
  }
}
function toStatePath(stateId, delimiter) {
  try {
    if (isArray2(stateId)) {
      return stateId;
    }
    return stateId.toString().split(delimiter);
  } catch (e) {
    throw new Error("'".concat(stateId, "' is not a valid state path."));
  }
}
function isStateLike(state) {
  return typeof state === "object" && "value" in state && "context" in state && "event" in state && "_event" in state;
}
function toStateValue(stateValue, delimiter) {
  if (isStateLike(stateValue)) {
    return stateValue.value;
  }
  if (isArray2(stateValue)) {
    return pathToStateValue(stateValue);
  }
  if (typeof stateValue !== "string") {
    return stateValue;
  }
  var statePath = toStatePath(stateValue, delimiter);
  return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
  if (statePath.length === 1) {
    return statePath[0];
  }
  var value = {};
  var marker = value;
  for (var i = 0; i < statePath.length - 1; i++) {
    if (i === statePath.length - 2) {
      marker[statePath[i]] = statePath[i + 1];
    } else {
      marker[statePath[i]] = {};
      marker = marker[statePath[i]];
    }
  }
  return value;
}
function mapValues(collection2, iteratee) {
  var result = {};
  var collectionKeys = Object.keys(collection2);
  for (var i = 0; i < collectionKeys.length; i++) {
    var key = collectionKeys[i];
    result[key] = iteratee(collection2[key], key, collection2, i);
  }
  return result;
}
function mapFilterValues(collection2, iteratee, predicate) {
  var e_1, _a2;
  var result = {};
  try {
    for (var _b = __values(Object.keys(collection2)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var item = collection2[key];
      if (!predicate(item)) {
        continue;
      }
      result[key] = iteratee(item, key, collection2);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b.return))
        _a2.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return result;
}
var path = function(props) {
  return function(object) {
    var e_2, _a2;
    var result = object;
    try {
      for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
        var prop = props_1_1.value;
        result = result[prop];
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (props_1_1 && !props_1_1.done && (_a2 = props_1.return))
          _a2.call(props_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return result;
  };
};
function nestedPath(props, accessorProp) {
  return function(object) {
    var e_3, _a2;
    var result = object;
    try {
      for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
        var prop = props_2_1.value;
        result = result[accessorProp][prop];
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (props_2_1 && !props_2_1.done && (_a2 = props_2.return))
          _a2.call(props_2);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    return result;
  };
}
function toStatePaths(stateValue) {
  if (!stateValue) {
    return [[]];
  }
  if (isString2(stateValue)) {
    return [[stateValue]];
  }
  var result = flatten(Object.keys(stateValue).map(function(key) {
    var subStateValue = stateValue[key];
    if (typeof subStateValue !== "string" && (!subStateValue || !Object.keys(subStateValue).length)) {
      return [[key]];
    }
    return toStatePaths(stateValue[key]).map(function(subPath) {
      return [key].concat(subPath);
    });
  }));
  return result;
}
function flatten(array) {
  var _a2;
  return (_a2 = []).concat.apply(_a2, __spreadArray([], __read(array), false));
}
function toArrayStrict(value) {
  if (isArray2(value)) {
    return value;
  }
  return [value];
}
function toArray(value) {
  if (value === void 0) {
    return [];
  }
  return toArrayStrict(value);
}
function mapContext(mapper, context, _event) {
  var e_5, _a2;
  if (isFunction2(mapper)) {
    return mapper(context, _event.data);
  }
  var result = {};
  try {
    for (var _b = __values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var subMapper = mapper[key];
      if (isFunction2(subMapper)) {
        result[key] = subMapper(context, _event.data);
      } else {
        result[key] = subMapper;
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b.return))
        _a2.call(_b);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return result;
}
function isBuiltInEvent(eventType) {
  return /^(done|error)\./.test(eventType);
}
function isPromiseLike(value) {
  if (value instanceof Promise) {
    return true;
  }
  if (value !== null && (isFunction2(value) || typeof value === "object") && isFunction2(value.then)) {
    return true;
  }
  return false;
}
function isBehavior(value) {
  return value !== null && typeof value === "object" && "transition" in value && typeof value.transition === "function";
}
function partition(items, predicate) {
  var e_6, _a2;
  var _b = __read([[], []], 2), truthy = _b[0], falsy = _b[1];
  try {
    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
      var item = items_1_1.value;
      if (predicate(item)) {
        truthy.push(item);
      } else {
        falsy.push(item);
      }
    }
  } catch (e_6_1) {
    e_6 = {
      error: e_6_1
    };
  } finally {
    try {
      if (items_1_1 && !items_1_1.done && (_a2 = items_1.return))
        _a2.call(items_1);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  return [truthy, falsy];
}
function updateHistoryStates(hist, stateValue) {
  return mapValues(hist.states, function(subHist, key) {
    if (!subHist) {
      return void 0;
    }
    var subStateValue = (isString2(stateValue) ? void 0 : stateValue[key]) || (subHist ? subHist.current : void 0);
    if (!subStateValue) {
      return void 0;
    }
    return {
      current: subStateValue,
      states: updateHistoryStates(subHist, subStateValue)
    };
  });
}
function updateHistoryValue(hist, stateValue) {
  return {
    current: stateValue,
    states: updateHistoryStates(hist, stateValue)
  };
}
function updateContext(context, _event, assignActions, state) {
  if (!IS_PRODUCTION) {
    warn(!!context, "Attempting to update undefined context");
  }
  var updatedContext = context ? assignActions.reduce(function(acc, assignAction) {
    var e_7, _a2;
    var assignment = assignAction.assignment;
    var meta = {
      state,
      action: assignAction,
      _event
    };
    var partialUpdate = {};
    if (isFunction2(assignment)) {
      partialUpdate = assignment(acc, _event.data, meta);
    } else {
      try {
        for (var _b = __values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var propAssignment = assignment[key];
          partialUpdate[key] = isFunction2(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_7)
            throw e_7.error;
        }
      }
    }
    return Object.assign({}, acc, partialUpdate);
  }, context) : context;
  return updatedContext;
}
var warn = function() {
};
if (!IS_PRODUCTION) {
  warn = function(condition, message2) {
    var error3 = condition instanceof Error ? condition : void 0;
    if (!error3 && condition) {
      return;
    }
    if (console !== void 0) {
      var args = ["Warning: ".concat(message2)];
      if (error3) {
        args.push(error3);
      }
      console.warn.apply(console, args);
    }
  };
}
function isArray2(value) {
  return Array.isArray(value);
}
function isFunction2(value) {
  return typeof value === "function";
}
function isString2(value) {
  return typeof value === "string";
}
function toGuard(condition, guardMap) {
  if (!condition) {
    return void 0;
  }
  if (isString2(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition,
      predicate: guardMap ? guardMap[condition] : void 0
    };
  }
  if (isFunction2(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition.name,
      predicate: condition
    };
  }
  return condition;
}
function isObservable(value) {
  try {
    return "subscribe" in value && isFunction2(value.subscribe);
  } catch (e) {
    return false;
  }
}
var symbolObservable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var interopSymbols = (_a = {}, _a[symbolObservable] = function() {
  return this;
}, _a[Symbol.observable] = function() {
  return this;
}, _a);
function isMachine(value) {
  return !!value && "__xstatenode" in value;
}
function isActor(value) {
  return !!value && typeof value.send === "function";
}
var uniqueId = function() {
  var currentId = 0;
  return function() {
    currentId++;
    return currentId.toString(16);
  };
}();
function toEventObject(event2, payload) {
  if (isString2(event2) || typeof event2 === "number") {
    return __assign2({
      type: event2
    }, payload);
  }
  return event2;
}
function toSCXMLEvent(event2, scxmlEvent) {
  if (!isString2(event2) && "$$type" in event2 && event2.$$type === "scxml") {
    return event2;
  }
  var eventObject = toEventObject(event2);
  return __assign2({
    name: eventObject.type,
    data: eventObject,
    $$type: "scxml",
    type: "external"
  }, scxmlEvent);
}
function toTransitionConfigArray(event2, configLike) {
  var transitions = toArrayStrict(configLike).map(function(transitionLike) {
    if (typeof transitionLike === "undefined" || typeof transitionLike === "string" || isMachine(transitionLike)) {
      return {
        target: transitionLike,
        event: event2
      };
    }
    return __assign2(__assign2({}, transitionLike), {
      event: event2
    });
  });
  return transitions;
}
function normalizeTarget(target) {
  if (target === void 0 || target === TARGETLESS_KEY) {
    return void 0;
  }
  return toArray(target);
}
function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
  if (!IS_PRODUCTION) {
    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : "";
    if (originalError === currentError) {
      console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
    } else {
      var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : "";
      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
    }
  }
}
function evaluateGuard(machine, guard, context, _event, state) {
  var guards = machine.options.guards;
  var guardMeta = {
    state,
    cond: guard,
    _event
  };
  if (guard.type === DEFAULT_GUARD_TYPE) {
    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
  }
  var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];
  if (!condFn) {
    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
  }
  return condFn(context, _event.data, guardMeta);
}
function toInvokeSource(src) {
  if (typeof src === "string") {
    return {
      type: src
    };
  }
  return src;
}
function toObserver(nextHandler, errorHandler, completionHandler) {
  var noop2 = function() {
  };
  var isObserver = typeof nextHandler === "object";
  var self2 = isObserver ? nextHandler : null;
  return {
    next: ((isObserver ? nextHandler.next : nextHandler) || noop2).bind(self2),
    error: ((isObserver ? nextHandler.error : errorHandler) || noop2).bind(self2),
    complete: ((isObserver ? nextHandler.complete : completionHandler) || noop2).bind(self2)
  };
}
function createInvokeId(stateNodeId, index2) {
  return "".concat(stateNodeId, ":invocation[").concat(index2, "]");
}
function isRaisableAction(action) {
  return (action.type === raise || action.type === send && action.to === SpecialTargets.Internal) && typeof action.delay !== "number";
}

// node_modules/xstate/es/actions.js
var initEvent = toSCXMLEvent({
  type: init
});
function getActionFunction(actionType, actionFunctionMap) {
  return actionFunctionMap ? actionFunctionMap[actionType] || void 0 : void 0;
}
function toActionObject(action, actionFunctionMap) {
  var actionObject;
  if (isString2(action) || typeof action === "number") {
    var exec = getActionFunction(action, actionFunctionMap);
    if (isFunction2(exec)) {
      actionObject = {
        type: action,
        exec
      };
    } else if (exec) {
      actionObject = exec;
    } else {
      actionObject = {
        type: action,
        exec: void 0
      };
    }
  } else if (isFunction2(action)) {
    actionObject = {
      // Convert action to string if unnamed
      type: action.name || action.toString(),
      exec: action
    };
  } else {
    var exec = getActionFunction(action.type, actionFunctionMap);
    if (isFunction2(exec)) {
      actionObject = __assign2(__assign2({}, action), {
        exec
      });
    } else if (exec) {
      var actionType = exec.type || action.type;
      actionObject = __assign2(__assign2(__assign2({}, exec), action), {
        type: actionType
      });
    } else {
      actionObject = action;
    }
  }
  return actionObject;
}
var toActionObjects = function(action, actionFunctionMap) {
  if (!action) {
    return [];
  }
  var actions = isArray2(action) ? action : [action];
  return actions.map(function(subAction) {
    return toActionObject(subAction, actionFunctionMap);
  });
};
function toActivityDefinition(action) {
  var actionObject = toActionObject(action);
  return __assign2(__assign2({
    id: isString2(action) ? action : actionObject.id
  }, actionObject), {
    type: actionObject.type
  });
}
function raise2(event2, options) {
  return {
    type: raise,
    event: typeof event2 === "function" ? event2 : toEventObject(event2),
    delay: options ? options.delay : void 0,
    id: options === null || options === void 0 ? void 0 : options.id
  };
}
function resolveRaise(action, ctx, _event, delaysMap) {
  var meta = {
    _event
  };
  var resolvedEvent = toSCXMLEvent(isFunction2(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;
  if (isString2(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = isFunction2(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = isFunction2(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }
  return __assign2(__assign2({}, action), {
    type: raise,
    _event: resolvedEvent,
    delay: resolvedDelay
  });
}
function send2(event2, options) {
  return {
    to: options ? options.to : void 0,
    type: send,
    event: isFunction2(event2) ? event2 : toEventObject(event2),
    delay: options ? options.delay : void 0,
    // TODO: don't auto-generate IDs here like that
    // there is too big chance of the ID collision
    id: options && options.id !== void 0 ? options.id : isFunction2(event2) ? event2.name : getEventType(event2)
  };
}
function resolveSend(action, ctx, _event, delaysMap) {
  var meta = {
    _event
  };
  var resolvedEvent = toSCXMLEvent(isFunction2(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;
  if (isString2(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = isFunction2(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = isFunction2(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }
  var resolvedTarget = isFunction2(action.to) ? action.to(ctx, _event.data, meta) : action.to;
  return __assign2(__assign2({}, action), {
    to: resolvedTarget,
    _event: resolvedEvent,
    event: resolvedEvent.data,
    delay: resolvedDelay
  });
}
function sendParent(event2, options) {
  return send2(event2, __assign2(__assign2({}, options), {
    to: SpecialTargets.Parent
  }));
}
function sendTo(actor, event2, options) {
  return send2(event2, __assign2(__assign2({}, options), {
    to: actor
  }));
}
function sendUpdate() {
  return sendParent(update);
}
function respond(event2, options) {
  return send2(event2, __assign2(__assign2({}, options), {
    to: function(_, __, _a2) {
      var _event = _a2._event;
      return _event.origin;
    }
  }));
}
var defaultLogExpr = function(context, event2) {
  return {
    context,
    event: event2
  };
};
function log2(expr, label) {
  if (expr === void 0) {
    expr = defaultLogExpr;
  }
  return {
    type: log,
    label,
    expr
  };
}
var resolveLog = function(action, ctx, _event) {
  return __assign2(__assign2({}, action), {
    value: isString2(action.expr) ? action.expr : action.expr(ctx, _event.data, {
      _event
    })
  });
};
var cancel2 = function(sendId) {
  return {
    type: cancel,
    sendId
  };
};
function start2(activity) {
  var activityDef = toActivityDefinition(activity);
  return {
    type: ActionTypes.Start,
    activity: activityDef,
    exec: void 0
  };
}
function stop2(actorRef) {
  var activity = isFunction2(actorRef) ? actorRef : toActivityDefinition(actorRef);
  return {
    type: ActionTypes.Stop,
    activity,
    exec: void 0
  };
}
function resolveStop(action, context, _event) {
  var actorRefOrString = isFunction2(action.activity) ? action.activity(context, _event.data) : action.activity;
  var resolvedActorRef = typeof actorRefOrString === "string" ? {
    id: actorRefOrString
  } : actorRefOrString;
  var actionObject = {
    type: ActionTypes.Stop,
    activity: resolvedActorRef
  };
  return actionObject;
}
var assign2 = function(assignment) {
  return {
    type: assign,
    assignment
  };
};
function isActionObject(action) {
  return typeof action === "object" && "type" in action;
}
function after2(delayRef, id) {
  var idSuffix = id ? "#".concat(id) : "";
  return "".concat(ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
}
function done(id, data) {
  var type = "".concat(ActionTypes.DoneState, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function doneInvoke(id, data) {
  var type = "".concat(ActionTypes.DoneInvoke, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function error2(id, data) {
  var type = "".concat(ActionTypes.ErrorPlatform, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function pure2(getActions) {
  return {
    type: ActionTypes.Pure,
    get: getActions
  };
}
function forwardTo(target, options) {
  if (!IS_PRODUCTION && (!target || typeof target === "function")) {
    var originalTarget_1 = target;
    target = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resolvedTarget = typeof originalTarget_1 === "function" ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;
      if (!resolvedTarget) {
        throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
      }
      return resolvedTarget;
    };
  }
  return send2(function(_, event2) {
    return event2;
  }, __assign2(__assign2({}, options), {
    to: target
  }));
}
function escalate(errorData, options) {
  return sendParent(function(context, event2, meta) {
    return {
      type: error,
      data: isFunction2(errorData) ? errorData(context, event2, meta) : errorData
    };
  }, __assign2(__assign2({}, options), {
    to: SpecialTargets.Parent
  }));
}
function choose2(conds) {
  return {
    type: ActionTypes.Choose,
    conds
  };
}
var pluckAssigns = function(actionBlocks) {
  var e_1, _a2;
  var assignActions = [];
  try {
    for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
      var block = actionBlocks_1_1.value;
      var i = 0;
      while (i < block.actions.length) {
        if (block.actions[i].type === assign) {
          assignActions.push(block.actions[i]);
          block.actions.splice(i, 1);
          continue;
        }
        i++;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a2 = actionBlocks_1.return))
        _a2.call(actionBlocks_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return assignActions;
};
function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
  if (preserveActionOrder === void 0) {
    preserveActionOrder = false;
  }
  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;
  var preservedContexts = preserveActionOrder ? [currentContext] : void 0;
  var deferredToBlockEnd = [];
  function handleAction(blockType, actionObject) {
    var _a2;
    switch (actionObject.type) {
      case raise: {
        var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);
        if (predictableExec && typeof raisedAction.delay === "number") {
          predictableExec(raisedAction, updatedContext, _event);
        }
        return raisedAction;
      }
      case send:
        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays);
        if (!IS_PRODUCTION) {
          var configuredDelay = actionObject.delay;
          warn(
            !isString2(configuredDelay) || typeof sendAction.delay === "number",
            // tslint:disable-next-line:max-line-length
            "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'")
          );
        }
        if (predictableExec && sendAction.to !== SpecialTargets.Internal) {
          if (blockType === "entry") {
            deferredToBlockEnd.push(sendAction);
          } else {
            predictableExec(sendAction, updatedContext, _event);
          }
        }
        return sendAction;
      case log: {
        var resolved = resolveLog(actionObject, updatedContext, _event);
        predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
        return resolved;
      }
      case choose: {
        var chooseAction = actionObject;
        var matchedActions = (_a2 = chooseAction.conds.find(function(condition) {
          var guard = toGuard(condition.cond, machine.options.guards);
          return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : void 0);
        })) === null || _a2 === void 0 ? void 0 : _a2.actions;
        if (!matchedActions) {
          return [];
        }
        var _b = __read(resolveActions(machine, currentState, updatedContext, _event, [{
          type: blockType,
          actions: toActionObjects(toArray(matchedActions), machine.options.actions)
        }], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];
        updatedContext = resolvedContextFromChoose;
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        return resolvedActionsFromChoose;
      }
      case pure: {
        var matchedActions = actionObject.get(updatedContext, _event.data);
        if (!matchedActions) {
          return [];
        }
        var _c = __read(resolveActions(machine, currentState, updatedContext, _event, [{
          type: blockType,
          actions: toActionObjects(toArray(matchedActions), machine.options.actions)
        }], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];
        updatedContext = resolvedContext;
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        return resolvedActionsFromPure;
      }
      case stop: {
        var resolved = resolveStop(actionObject, updatedContext, _event);
        predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);
        return resolved;
      }
      case assign: {
        updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : void 0);
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        break;
      }
      default:
        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
        var exec_1 = resolvedActionObject.exec;
        if (predictableExec) {
          predictableExec(resolvedActionObject, updatedContext, _event);
        } else if (exec_1 && preservedContexts) {
          var contextIndex_1 = preservedContexts.length - 1;
          var wrapped = __assign2(__assign2({}, resolvedActionObject), {
            exec: function(_ctx) {
              var args = [];
              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
              }
              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));
            }
          });
          resolvedActionObject = wrapped;
        }
        return resolvedActionObject;
    }
  }
  function processBlock(block) {
    var e_2, _a2;
    var resolvedActions2 = [];
    try {
      for (var _b = __values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        var resolved = handleAction(block.type, action);
        if (resolved) {
          resolvedActions2 = resolvedActions2.concat(resolved);
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    deferredToBlockEnd.forEach(function(action2) {
      predictableExec(action2, updatedContext, _event);
    });
    deferredToBlockEnd.length = 0;
    return resolvedActions2;
  }
  var resolvedActions = flatten(actionBlocks.map(processBlock));
  return [resolvedActions, updatedContext];
}

// node_modules/xstate/es/serviceScope.js
var serviceStack = [];
var provide = function(service, fn) {
  serviceStack.push(service);
  var result = fn(service);
  serviceStack.pop();
  return result;
};
var consume = function(fn) {
  return fn(serviceStack[serviceStack.length - 1]);
};

// node_modules/xstate/es/Actor.js
function createNullActor(id) {
  var _a2;
  return _a2 = {
    id,
    send: function() {
      return void 0;
    },
    subscribe: function() {
      return {
        unsubscribe: function() {
          return void 0;
        }
      };
    },
    getSnapshot: function() {
      return void 0;
    },
    toJSON: function() {
      return {
        id
      };
    }
  }, _a2[symbolObservable] = function() {
    return this;
  }, _a2;
}
function createInvocableActor(invokeDefinition, machine, context, _event) {
  var _a2;
  var invokeSrc = toInvokeSource(invokeDefinition.src);
  var serviceCreator = (_a2 = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a2 === void 0 ? void 0 : _a2[invokeSrc.type];
  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : void 0;
  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);
  tempActor.meta = invokeDefinition;
  return tempActor;
}
function createDeferredActor(entity, id, data) {
  var tempActor = createNullActor(id);
  tempActor.deferred = true;
  if (isMachine(entity)) {
    var initialState_1 = tempActor.state = provide(void 0, function() {
      return (data ? entity.withContext(data) : entity).initialState;
    });
    tempActor.getSnapshot = function() {
      return initialState_1;
    };
  }
  return tempActor;
}
function isActor2(item) {
  try {
    return typeof item.send === "function";
  } catch (e) {
    return false;
  }
}
function isSpawnedActor(item) {
  return isActor2(item) && "id" in item;
}
function toActorRef(actorRefLike) {
  var _a2;
  return __assign2((_a2 = {
    subscribe: function() {
      return {
        unsubscribe: function() {
          return void 0;
        }
      };
    },
    id: "anonymous",
    getSnapshot: function() {
      return void 0;
    }
  }, _a2[symbolObservable] = function() {
    return this;
  }, _a2), actorRefLike);
}

// node_modules/xstate/es/stateUtils.js
var isLeafNode = function(stateNode) {
  return stateNode.type === "atomic" || stateNode.type === "final";
};
function getAllChildren(stateNode) {
  return Object.keys(stateNode.states).map(function(key) {
    return stateNode.states[key];
  });
}
function getChildren(stateNode) {
  return getAllChildren(stateNode).filter(function(sn) {
    return sn.type !== "history";
  });
}
function getAllStateNodes(stateNode) {
  var stateNodes = [stateNode];
  if (isLeafNode(stateNode)) {
    return stateNodes;
  }
  return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
}
function getConfiguration(prevStateNodes, stateNodes) {
  var e_1, _a2, e_2, _b, e_3, _c, e_4, _d;
  var prevConfiguration = new Set(prevStateNodes);
  var prevAdjList = getAdjList(prevConfiguration);
  var configuration = new Set(stateNodes);
  try {
    for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
      var s = configuration_1_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configuration_1_1 && !configuration_1_1.done && (_a2 = configuration_1.return))
        _a2.call(configuration_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  var adjList = getAdjList(configuration);
  try {
    for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
      var s = configuration_2_1.value;
      if (s.type === "compound" && (!adjList.get(s) || !adjList.get(s).length)) {
        if (prevAdjList.get(s)) {
          prevAdjList.get(s).forEach(function(sn) {
            return configuration.add(sn);
          });
        } else {
          s.initialStateNodes.forEach(function(sn) {
            return configuration.add(sn);
          });
        }
      } else {
        if (s.type === "parallel") {
          try {
            for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;
              if (!configuration.has(child)) {
                configuration.add(child);
                if (prevAdjList.get(child)) {
                  prevAdjList.get(child).forEach(function(sn) {
                    return configuration.add(sn);
                  });
                } else {
                  child.initialStateNodes.forEach(function(sn) {
                    return configuration.add(sn);
                  });
                }
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_f && !_f.done && (_c = _e.return))
                _c.call(_e);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return))
        _b.call(configuration_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  try {
    for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
      var s = configuration_3_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return))
        _d.call(configuration_3);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return configuration;
}
function getValueFromAdj(baseNode, adjList) {
  var childStateNodes = adjList.get(baseNode);
  if (!childStateNodes) {
    return {};
  }
  if (baseNode.type === "compound") {
    var childStateNode = childStateNodes[0];
    if (childStateNode) {
      if (isLeafNode(childStateNode)) {
        return childStateNode.key;
      }
    } else {
      return {};
    }
  }
  var stateValue = {};
  childStateNodes.forEach(function(csn) {
    stateValue[csn.key] = getValueFromAdj(csn, adjList);
  });
  return stateValue;
}
function getAdjList(configuration) {
  var e_5, _a2;
  var adjList = /* @__PURE__ */ new Map();
  try {
    for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
      var s = configuration_4_1.value;
      if (!adjList.has(s)) {
        adjList.set(s, []);
      }
      if (s.parent) {
        if (!adjList.has(s.parent)) {
          adjList.set(s.parent, []);
        }
        adjList.get(s.parent).push(s);
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (configuration_4_1 && !configuration_4_1.done && (_a2 = configuration_4.return))
        _a2.call(configuration_4);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return adjList;
}
function getValue(rootNode, configuration) {
  var config = getConfiguration([rootNode], configuration);
  return getValueFromAdj(rootNode, getAdjList(config));
}
function has2(iterable, item) {
  if (Array.isArray(iterable)) {
    return iterable.some(function(member) {
      return member === item;
    });
  }
  if (iterable instanceof Set) {
    return iterable.has(item);
  }
  return false;
}
function nextEvents(configuration) {
  return __spreadArray([], __read(new Set(flatten(__spreadArray([], __read(configuration.map(function(sn) {
    return sn.ownEvents;
  })), false)))), false);
}
function isInFinalState(configuration, stateNode) {
  if (stateNode.type === "compound") {
    return getChildren(stateNode).some(function(s) {
      return s.type === "final" && has2(configuration, s);
    });
  }
  if (stateNode.type === "parallel") {
    return getChildren(stateNode).every(function(sn) {
      return isInFinalState(configuration, sn);
    });
  }
  return false;
}
function getMeta(configuration) {
  if (configuration === void 0) {
    configuration = [];
  }
  return configuration.reduce(function(acc, stateNode) {
    if (stateNode.meta !== void 0) {
      acc[stateNode.id] = stateNode.meta;
    }
    return acc;
  }, {});
}
function getTagsFromConfiguration(configuration) {
  return new Set(flatten(configuration.map(function(sn) {
    return sn.tags;
  })));
}

// node_modules/xstate/es/State.js
function stateValuesEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a === void 0 || b === void 0) {
    return false;
  }
  if (isString2(a) || isString2(b)) {
    return a === b;
  }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every(function(key) {
    return stateValuesEqual(a[key], b[key]);
  });
}
function isStateConfig(state) {
  if (typeof state !== "object" || state === null) {
    return false;
  }
  return "value" in state && "_event" in state;
}
function bindActionToState(action, state) {
  var exec = action.exec;
  var boundAction = __assign2(__assign2({}, action), {
    exec: exec !== void 0 ? function() {
      return exec(state.context, state.event, {
        action,
        state,
        _event: state._event
      });
    } : void 0
  });
  return boundAction;
}
var State = (
  /** @class */
  function() {
    function State2(config) {
      var _this = this;
      var _a2;
      this.actions = [];
      this.activities = EMPTY_ACTIVITY_MAP;
      this.meta = {};
      this.events = [];
      this.value = config.value;
      this.context = config.context;
      this._event = config._event;
      this._sessionid = config._sessionid;
      this.event = this._event.data;
      this.historyValue = config.historyValue;
      this.history = config.history;
      this.actions = config.actions || [];
      this.activities = config.activities || EMPTY_ACTIVITY_MAP;
      this.meta = getMeta(config.configuration);
      this.events = config.events || [];
      this.matches = this.matches.bind(this);
      this.toStrings = this.toStrings.bind(this);
      this.configuration = config.configuration;
      this.transitions = config.transitions;
      this.children = config.children;
      this.done = !!config.done;
      this.tags = (_a2 = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Set();
      this.machine = config.machine;
      Object.defineProperty(this, "nextEvents", {
        get: function() {
          return nextEvents(_this.configuration);
        }
      });
    }
    State2.from = function(stateValue, context) {
      if (stateValue instanceof State2) {
        if (stateValue.context !== context) {
          return new State2({
            value: stateValue.value,
            context,
            _event: stateValue._event,
            _sessionid: null,
            historyValue: stateValue.historyValue,
            history: stateValue.history,
            actions: [],
            activities: stateValue.activities,
            meta: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {}
          });
        }
        return stateValue;
      }
      var _event = initEvent;
      return new State2({
        value: stateValue,
        context,
        _event,
        _sessionid: null,
        historyValue: void 0,
        history: void 0,
        actions: [],
        activities: void 0,
        meta: void 0,
        events: [],
        configuration: [],
        transitions: [],
        children: {}
      });
    };
    State2.create = function(config) {
      return new State2(config);
    };
    State2.inert = function(stateValue, context) {
      if (stateValue instanceof State2) {
        if (!stateValue.actions.length) {
          return stateValue;
        }
        var _event = initEvent;
        return new State2({
          value: stateValue.value,
          context,
          _event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          activities: stateValue.activities,
          configuration: stateValue.configuration,
          transitions: [],
          children: {}
        });
      }
      return State2.from(stateValue, context);
    };
    State2.prototype.toStrings = function(stateValue, delimiter) {
      var _this = this;
      if (stateValue === void 0) {
        stateValue = this.value;
      }
      if (delimiter === void 0) {
        delimiter = ".";
      }
      if (isString2(stateValue)) {
        return [stateValue];
      }
      var valueKeys = Object.keys(stateValue);
      return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function(key) {
        return _this.toStrings(stateValue[key], delimiter).map(function(s) {
          return key + delimiter + s;
        });
      })), false));
    };
    State2.prototype.toJSON = function() {
      var _a2 = this;
      _a2.configuration;
      _a2.transitions;
      var tags = _a2.tags;
      _a2.machine;
      var jsonValues = __rest(_a2, ["configuration", "transitions", "tags", "machine"]);
      return __assign2(__assign2({}, jsonValues), {
        tags: Array.from(tags)
      });
    };
    State2.prototype.matches = function(parentStateValue) {
      return matchesState(parentStateValue, this.value);
    };
    State2.prototype.hasTag = function(tag) {
      return this.tags.has(tag);
    };
    State2.prototype.can = function(event2) {
      var _a2;
      if (IS_PRODUCTION) {
        warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
      }
      var transitionData = (_a2 = this.machine) === null || _a2 === void 0 ? void 0 : _a2.getTransitionData(this, event2);
      return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
      transitionData.transitions.some(function(t2) {
        return t2.target !== void 0 || t2.actions.length;
      });
    };
    return State2;
  }()
);

// node_modules/xstate/es/scheduler.js
var defaultOptions = {
  deferEvents: false
};
var Scheduler = (
  /** @class */
  function() {
    function Scheduler2(options) {
      this.processingEvent = false;
      this.queue = [];
      this.initialized = false;
      this.options = __assign2(__assign2({}, defaultOptions), options);
    }
    Scheduler2.prototype.initialize = function(callback) {
      this.initialized = true;
      if (callback) {
        if (!this.options.deferEvents) {
          this.schedule(callback);
          return;
        }
        this.process(callback);
      }
      this.flushEvents();
    };
    Scheduler2.prototype.schedule = function(task) {
      if (!this.initialized || this.processingEvent) {
        this.queue.push(task);
        return;
      }
      if (this.queue.length !== 0) {
        throw new Error("Event queue should be empty when it is not processing events");
      }
      this.process(task);
      this.flushEvents();
    };
    Scheduler2.prototype.clear = function() {
      this.queue = [];
    };
    Scheduler2.prototype.flushEvents = function() {
      var nextCallback = this.queue.shift();
      while (nextCallback) {
        this.process(nextCallback);
        nextCallback = this.queue.shift();
      }
    };
    Scheduler2.prototype.process = function(callback) {
      this.processingEvent = true;
      try {
        callback();
      } catch (e) {
        this.clear();
        throw e;
      } finally {
        this.processingEvent = false;
      }
    };
    return Scheduler2;
  }()
);

// node_modules/xstate/es/registry.js
var children = /* @__PURE__ */ new Map();
var sessionIdIndex = 0;
var registry = {
  bookId: function() {
    return "x:".concat(sessionIdIndex++);
  },
  register: function(id, actor) {
    children.set(id, actor);
    return id;
  },
  get: function(id) {
    return children.get(id);
  },
  free: function(id) {
    children.delete(id);
  }
};

// node_modules/xstate/es/devTools.js
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (!IS_PRODUCTION) {
    console.warn("XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues");
  }
}
function getDevTools() {
  var global2 = getGlobal();
  if (global2 && "__xstate__" in global2) {
    return global2.__xstate__;
  }
  return void 0;
}
function registerService(service) {
  if (!getGlobal()) {
    return;
  }
  var devTools = getDevTools();
  if (devTools) {
    devTools.register(service);
  }
}

// node_modules/xstate/es/behaviors.js
function spawnBehavior(behavior, options) {
  if (options === void 0) {
    options = {};
  }
  var state = behavior.initialState;
  var observers = /* @__PURE__ */ new Set();
  var mailbox = [];
  var flushing = false;
  var flush = function() {
    if (flushing) {
      return;
    }
    flushing = true;
    while (mailbox.length > 0) {
      var event_1 = mailbox.shift();
      state = behavior.transition(state, event_1, actorCtx);
      observers.forEach(function(observer) {
        return observer.next(state);
      });
    }
    flushing = false;
  };
  var actor = toActorRef({
    id: options.id,
    send: function(event2) {
      mailbox.push(event2);
      flush();
    },
    getSnapshot: function() {
      return state;
    },
    subscribe: function(next, handleError, complete) {
      var observer = toObserver(next, handleError, complete);
      observers.add(observer);
      observer.next(state);
      return {
        unsubscribe: function() {
          observers.delete(observer);
        }
      };
    }
  });
  var actorCtx = {
    parent: options.parent,
    self: actor,
    id: options.id || "anonymous",
    observers
  };
  state = behavior.start ? behavior.start(actorCtx) : state;
  return actor;
}

// node_modules/xstate/es/interpreter.js
var DEFAULT_SPAWN_OPTIONS = {
  sync: false,
  autoForward: false
};
var InterpreterStatus;
(function(InterpreterStatus2) {
  InterpreterStatus2[InterpreterStatus2["NotStarted"] = 0] = "NotStarted";
  InterpreterStatus2[InterpreterStatus2["Running"] = 1] = "Running";
  InterpreterStatus2[InterpreterStatus2["Stopped"] = 2] = "Stopped";
})(InterpreterStatus || (InterpreterStatus = {}));
var Interpreter = (
  /** @class */
  function() {
    function Interpreter2(machine, options) {
      if (options === void 0) {
        options = Interpreter2.defaultOptions;
      }
      var _this = this;
      this.machine = machine;
      this.delayedEventsMap = {};
      this.listeners = /* @__PURE__ */ new Set();
      this.contextListeners = /* @__PURE__ */ new Set();
      this.stopListeners = /* @__PURE__ */ new Set();
      this.doneListeners = /* @__PURE__ */ new Set();
      this.eventListeners = /* @__PURE__ */ new Set();
      this.sendListeners = /* @__PURE__ */ new Set();
      this.initialized = false;
      this.status = InterpreterStatus.NotStarted;
      this.children = /* @__PURE__ */ new Map();
      this.forwardTo = /* @__PURE__ */ new Set();
      this._outgoingQueue = [];
      this.init = this.start;
      this.send = function(event2, payload) {
        if (isArray2(event2)) {
          _this.batch(event2);
          return _this.state;
        }
        var _event = toSCXMLEvent(toEventObject(event2, payload));
        if (_this.status === InterpreterStatus.Stopped) {
          if (!IS_PRODUCTION) {
            warn(false, 'Event "'.concat(_event.name, '" was sent to stopped service "').concat(_this.machine.id, '". This service has already reached its final state, and will not transition.\nEvent: ').concat(JSON.stringify(_event.data)));
          }
          return _this.state;
        }
        if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
          throw new Error('Event "'.concat(_event.name, '" was sent to uninitialized service "').concat(
            _this.machine.id,
            '". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: '
          ).concat(JSON.stringify(_event.data)));
        }
        _this.scheduler.schedule(function() {
          _this.forward(_event);
          var nextState = _this._nextState(_event);
          _this.update(nextState, _event);
        });
        return _this._state;
      };
      this.sendTo = function(event2, to, immediate) {
        var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);
        var target = isParent ? _this.parent : isString2(to) ? to === SpecialTargets.Internal ? _this : _this.children.get(to) || registry.get(to) : isActor(to) ? to : void 0;
        if (!target) {
          if (!isParent) {
            throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
          }
          if (!IS_PRODUCTION) {
            warn(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event2.type));
          }
          return;
        }
        if ("machine" in target) {
          if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state
          _this.state.done) {
            var scxmlEvent = __assign2(__assign2({}, event2), {
              name: event2.name === error ? "".concat(error2(_this.id)) : event2.name,
              origin: _this.sessionId
            });
            if (!immediate && _this.machine.config.predictableActionArguments) {
              _this._outgoingQueue.push([target, scxmlEvent]);
            } else {
              target.send(scxmlEvent);
            }
          }
        } else {
          if (!immediate && _this.machine.config.predictableActionArguments) {
            _this._outgoingQueue.push([target, event2.data]);
          } else {
            target.send(event2.data);
          }
        }
      };
      this._exec = function(action, context, _event, actionFunctionMap) {
        if (actionFunctionMap === void 0) {
          actionFunctionMap = _this.machine.options.actions;
        }
        var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
        var exec = isFunction2(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;
        if (exec) {
          try {
            return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
              action,
              state: _this.state,
              _event
            } : {
              action,
              _event
            });
          } catch (err) {
            if (_this.parent) {
              _this.parent.send({
                type: "xstate.error",
                data: err
              });
            }
            throw err;
          }
        }
        switch (action.type) {
          case raise: {
            var sendAction_1 = action;
            _this.defer(sendAction_1);
            break;
          }
          case send:
            var sendAction = action;
            if (typeof sendAction.delay === "number") {
              _this.defer(sendAction);
              return;
            } else {
              if (sendAction.to) {
                _this.sendTo(sendAction._event, sendAction.to, _event === initEvent);
              } else {
                _this.send(sendAction._event);
              }
            }
            break;
          case cancel:
            _this.cancel(action.sendId);
            break;
          case start: {
            if (_this.status !== InterpreterStatus.Running) {
              return;
            }
            var activity = action.activity;
            if (
              // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
              !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]
            ) {
              break;
            }
            if (activity.type === ActionTypes.Invoke) {
              var invokeSource = toInvokeSource(activity.src);
              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : void 0;
              var id2 = activity.id, data = activity.data;
              if (!IS_PRODUCTION) {
                warn(
                  !("forward" in activity),
                  // tslint:disable-next-line:max-line-length
                  "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead."
                );
              }
              var autoForward = "autoForward" in activity ? activity.autoForward : !!activity.forward;
              if (!serviceCreator) {
                if (!IS_PRODUCTION) {
                  warn(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                }
                return;
              }
              var resolvedData = data ? mapContext(data, context, _event) : void 0;
              if (typeof serviceCreator === "string") {
                return;
              }
              var source = isFunction2(serviceCreator) ? serviceCreator(context, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;
              if (!source) {
                return;
              }
              var options2 = void 0;
              if (isMachine(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options2 = {
                  autoForward
                };
              }
              _this.spawn(source, id2, options2);
            } else {
              _this.spawnActivity(activity);
            }
            break;
          }
          case stop: {
            _this.stopChild(action.activity.id);
            break;
          }
          case log:
            var _a2 = action, label = _a2.label, value = _a2.value;
            if (label) {
              _this.logger(label, value);
            } else {
              _this.logger(value);
            }
            break;
          default:
            if (!IS_PRODUCTION) {
              warn(false, "No implementation found for action type '".concat(action.type, "'"));
            }
            break;
        }
      };
      var resolvedOptions = __assign2(__assign2({}, Interpreter2.defaultOptions), options);
      var clock = resolvedOptions.clock, logger2 = resolvedOptions.logger, parent = resolvedOptions.parent, id = resolvedOptions.id;
      var resolvedId = id !== void 0 ? id : machine.id;
      this.id = resolvedId;
      this.logger = logger2;
      this.clock = clock;
      this.parent = parent;
      this.options = resolvedOptions;
      this.scheduler = new Scheduler({
        deferEvents: this.options.deferEvents
      });
      this.sessionId = registry.bookId();
    }
    Object.defineProperty(Interpreter2.prototype, "initialState", {
      get: function() {
        var _this = this;
        if (this._initialState) {
          return this._initialState;
        }
        return provide(this, function() {
          _this._initialState = _this.machine.initialState;
          return _this._initialState;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Interpreter2.prototype, "state", {
      /**
       * @deprecated Use `.getSnapshot()` instead.
       */
      get: function() {
        if (!IS_PRODUCTION) {
          warn(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
        }
        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    Interpreter2.prototype.execute = function(state, actionsConfig) {
      var e_1, _a2;
      try {
        for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var action = _c.value;
          this.exec(action, state, actionsConfig);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    Interpreter2.prototype.update = function(state, _event) {
      var e_2, _a2, e_3, _b, e_4, _c, e_5, _d;
      var _this = this;
      state._sessionid = this.sessionId;
      this._state = state;
      if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
      // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
      _event === initEvent) && this.options.execute) {
        this.execute(this.state);
      } else {
        var item = void 0;
        while (item = this._outgoingQueue.shift()) {
          item[0].send(item[1]);
        }
      }
      this.children.forEach(function(child) {
        _this.state.children[child.id] = child;
      });
      if (this.devTools) {
        this.devTools.send(_event.data, state);
      }
      if (state.event) {
        try {
          for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
            var listener = _f.value;
            listener(state.event);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_a2 = _e.return))
              _a2.call(_e);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      try {
        for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
          var listener = _h.value;
          listener(state, state.event);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g.return))
            _b.call(_g);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      try {
        for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
          var contextListener = _k.value;
          contextListener(this.state.context, this.state.history ? this.state.history.context : void 0);
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_k && !_k.done && (_c = _j.return))
            _c.call(_j);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      if (this.state.done) {
        var finalChildStateNode = state.configuration.find(function(sn) {
          return sn.type === "final" && sn.parent === _this.machine;
        });
        var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : void 0;
        this._doneEvent = doneInvoke(this.id, doneData);
        try {
          for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
            var listener = _m.value;
            listener(this._doneEvent);
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (_m && !_m.done && (_d = _l.return))
              _d.call(_l);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        this._stop();
        this._stopChildren();
        registry.free(this.sessionId);
      }
    };
    Interpreter2.prototype.onTransition = function(listener) {
      this.listeners.add(listener);
      if (this.status === InterpreterStatus.Running) {
        listener(this.state, this.state.event);
      }
      return this;
    };
    Interpreter2.prototype.subscribe = function(nextListenerOrObserver, _, completeListener) {
      var _this = this;
      var observer = toObserver(nextListenerOrObserver, _, completeListener);
      this.listeners.add(observer.next);
      if (this.status !== InterpreterStatus.NotStarted) {
        observer.next(this.state);
      }
      var completeOnce = function() {
        _this.doneListeners.delete(completeOnce);
        _this.stopListeners.delete(completeOnce);
        observer.complete();
      };
      if (this.status === InterpreterStatus.Stopped) {
        observer.complete();
      } else {
        this.onDone(completeOnce);
        this.onStop(completeOnce);
      }
      return {
        unsubscribe: function() {
          _this.listeners.delete(observer.next);
          _this.doneListeners.delete(completeOnce);
          _this.stopListeners.delete(completeOnce);
        }
      };
    };
    Interpreter2.prototype.onEvent = function(listener) {
      this.eventListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onSend = function(listener) {
      this.sendListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onChange = function(listener) {
      this.contextListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onStop = function(listener) {
      this.stopListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onDone = function(listener) {
      if (this.status === InterpreterStatus.Stopped && this._doneEvent) {
        listener(this._doneEvent);
      } else {
        this.doneListeners.add(listener);
      }
      return this;
    };
    Interpreter2.prototype.off = function(listener) {
      this.listeners.delete(listener);
      this.eventListeners.delete(listener);
      this.sendListeners.delete(listener);
      this.stopListeners.delete(listener);
      this.doneListeners.delete(listener);
      this.contextListeners.delete(listener);
      return this;
    };
    Interpreter2.prototype.start = function(initialState) {
      var _this = this;
      if (this.status === InterpreterStatus.Running) {
        return this;
      }
      this.machine._init();
      registry.register(this.sessionId, this);
      this.initialized = true;
      this.status = InterpreterStatus.Running;
      var resolvedState = initialState === void 0 ? this.initialState : provide(this, function() {
        return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));
      });
      if (this.options.devTools) {
        this.attachDev();
      }
      this.scheduler.initialize(function() {
        _this.update(resolvedState, initEvent);
      });
      return this;
    };
    Interpreter2.prototype._stopChildren = function() {
      this.children.forEach(function(child) {
        if (isFunction2(child.stop)) {
          child.stop();
        }
      });
      this.children.clear();
    };
    Interpreter2.prototype._stop = function() {
      var e_6, _a2, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
      try {
        for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
          var listener = _g.value;
          this.listeners.delete(listener);
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (_g && !_g.done && (_a2 = _f.return))
            _a2.call(_f);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      try {
        for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
          var listener = _j.value;
          listener();
          this.stopListeners.delete(listener);
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_j && !_j.done && (_b = _h.return))
            _b.call(_h);
        } finally {
          if (e_7)
            throw e_7.error;
        }
      }
      try {
        for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
          var listener = _l.value;
          this.contextListeners.delete(listener);
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (_l && !_l.done && (_c = _k.return))
            _c.call(_k);
        } finally {
          if (e_8)
            throw e_8.error;
        }
      }
      try {
        for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
          var listener = _o.value;
          this.doneListeners.delete(listener);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_o && !_o.done && (_d = _m.return))
            _d.call(_m);
        } finally {
          if (e_9)
            throw e_9.error;
        }
      }
      if (!this.initialized) {
        return this;
      }
      this.initialized = false;
      this.status = InterpreterStatus.Stopped;
      this._initialState = void 0;
      try {
        for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
          var key = _q.value;
          this.clock.clearTimeout(this.delayedEventsMap[key]);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (_q && !_q.done && (_e = _p.return))
            _e.call(_p);
        } finally {
          if (e_10)
            throw e_10.error;
        }
      }
      this.scheduler.clear();
      this.scheduler = new Scheduler({
        deferEvents: this.options.deferEvents
      });
    };
    Interpreter2.prototype.stop = function() {
      var _this = this;
      var scheduler = this.scheduler;
      this._stop();
      scheduler.schedule(function() {
        var _a2;
        if ((_a2 = _this._state) === null || _a2 === void 0 ? void 0 : _a2.done) {
          return;
        }
        var _event = toSCXMLEvent({
          type: "xstate.stop"
        });
        var nextState = provide(_this, function() {
          var exitActions = flatten(__spreadArray([], __read(_this.state.configuration), false).sort(function(a, b) {
            return b.order - a.order;
          }).map(function(stateNode) {
            return toActionObjects(stateNode.onExit, _this.machine.options.actions);
          }));
          var _a3 = __read(resolveActions(_this.machine, _this.state, _this.state.context, _event, [{
            type: "exit",
            actions: exitActions
          }], _this.machine.config.predictableActionArguments ? _this._exec : void 0, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2), resolvedActions = _a3[0], updatedContext = _a3[1];
          var newState = new State({
            value: _this.state.value,
            context: updatedContext,
            _event,
            _sessionid: _this.sessionId,
            historyValue: void 0,
            history: _this.state,
            actions: resolvedActions.filter(function(action) {
              return !isRaisableAction(action);
            }),
            activities: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {},
            done: _this.state.done,
            tags: _this.state.tags,
            machine: _this.machine
          });
          newState.changed = true;
          return newState;
        });
        _this.update(nextState, _event);
        _this._stopChildren();
        registry.free(_this.sessionId);
      });
      return this;
    };
    Interpreter2.prototype.batch = function(events) {
      var _this = this;
      if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
        if (!IS_PRODUCTION) {
          warn(false, "".concat(events.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, '" and are deferred. Make sure .start() is called for this service.\nEvent: ').concat(JSON.stringify(event)));
        }
      } else if (this.status !== InterpreterStatus.Running) {
        throw new Error(
          // tslint:disable-next-line:max-line-length
          "".concat(events.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, '". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.')
        );
      }
      if (!events.length) {
        return;
      }
      var exec = !!this.machine.config.predictableActionArguments && this._exec;
      this.scheduler.schedule(function() {
        var e_11, _a2;
        var nextState = _this.state;
        var batchChanged = false;
        var batchedActions = [];
        var _loop_1 = function(event_12) {
          var _event = toSCXMLEvent(event_12);
          _this.forward(_event);
          nextState = provide(_this, function() {
            return _this.machine.transition(nextState, _event, void 0, exec || void 0);
          });
          batchedActions.push.apply(batchedActions, __spreadArray([], __read(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function(a) {
            return bindActionToState(a, nextState);
          })), false));
          batchChanged = batchChanged || !!nextState.changed;
        };
        try {
          for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
            var event_1 = events_1_1.value;
            _loop_1(event_1);
          }
        } catch (e_11_1) {
          e_11 = {
            error: e_11_1
          };
        } finally {
          try {
            if (events_1_1 && !events_1_1.done && (_a2 = events_1.return))
              _a2.call(events_1);
          } finally {
            if (e_11)
              throw e_11.error;
          }
        }
        nextState.changed = batchChanged;
        nextState.actions = batchedActions;
        _this.update(nextState, toSCXMLEvent(events[events.length - 1]));
      });
    };
    Interpreter2.prototype.sender = function(event2) {
      return this.send.bind(this, event2);
    };
    Interpreter2.prototype._nextState = function(event2, exec) {
      var _this = this;
      if (exec === void 0) {
        exec = !!this.machine.config.predictableActionArguments && this._exec;
      }
      var _event = toSCXMLEvent(event2);
      if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function(nextEvent) {
        return nextEvent.indexOf(errorPlatform) === 0;
      })) {
        throw _event.data.data;
      }
      var nextState = provide(this, function() {
        return _this.machine.transition(_this.state, _event, void 0, exec || void 0);
      });
      return nextState;
    };
    Interpreter2.prototype.nextState = function(event2) {
      return this._nextState(event2, false);
    };
    Interpreter2.prototype.forward = function(event2) {
      var e_12, _a2;
      try {
        for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
          var id = _c.value;
          var child = this.children.get(id);
          if (!child) {
            throw new Error("Unable to forward event '".concat(event2, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
          }
          child.send(event2);
        }
      } catch (e_12_1) {
        e_12 = {
          error: e_12_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_12)
            throw e_12.error;
        }
      }
    };
    Interpreter2.prototype.defer = function(sendAction) {
      var _this = this;
      var timerId = this.clock.setTimeout(function() {
        if ("to" in sendAction && sendAction.to) {
          _this.sendTo(sendAction._event, sendAction.to, true);
        } else {
          _this.send(sendAction._event);
        }
      }, sendAction.delay);
      if (sendAction.id) {
        this.delayedEventsMap[sendAction.id] = timerId;
      }
    };
    Interpreter2.prototype.cancel = function(sendId) {
      this.clock.clearTimeout(this.delayedEventsMap[sendId]);
      delete this.delayedEventsMap[sendId];
    };
    Interpreter2.prototype.exec = function(action, state, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = this.machine.options.actions;
      }
      this._exec(action, state.context, state._event, actionFunctionMap);
    };
    Interpreter2.prototype.removeChild = function(childId) {
      var _a2;
      this.children.delete(childId);
      this.forwardTo.delete(childId);
      (_a2 = this.state) === null || _a2 === void 0 ? true : delete _a2.children[childId];
    };
    Interpreter2.prototype.stopChild = function(childId) {
      var child = this.children.get(childId);
      if (!child) {
        return;
      }
      this.removeChild(childId);
      if (isFunction2(child.stop)) {
        child.stop();
      }
    };
    Interpreter2.prototype.spawn = function(entity, name, options) {
      if (this.status !== InterpreterStatus.Running) {
        return createDeferredActor(entity, name);
      }
      if (isPromiseLike(entity)) {
        return this.spawnPromise(Promise.resolve(entity), name);
      } else if (isFunction2(entity)) {
        return this.spawnCallback(entity, name);
      } else if (isSpawnedActor(entity)) {
        return this.spawnActor(entity, name);
      } else if (isObservable(entity)) {
        return this.spawnObservable(entity, name);
      } else if (isMachine(entity)) {
        return this.spawnMachine(entity, __assign2(__assign2({}, options), {
          id: name
        }));
      } else if (isBehavior(entity)) {
        return this.spawnBehavior(entity, name);
      } else {
        throw new Error('Unable to spawn entity "'.concat(name, '" of type "').concat(typeof entity, '".'));
      }
    };
    Interpreter2.prototype.spawnMachine = function(machine, options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      var childService = new Interpreter2(machine, __assign2(__assign2({}, this.options), {
        parent: this,
        id: options.id || machine.id
      }));
      var resolvedOptions = __assign2(__assign2({}, DEFAULT_SPAWN_OPTIONS), options);
      if (resolvedOptions.sync) {
        childService.onTransition(function(state) {
          _this.send(update, {
            state,
            id: childService.id
          });
        });
      }
      var actor = childService;
      this.children.set(childService.id, actor);
      if (resolvedOptions.autoForward) {
        this.forwardTo.add(childService.id);
      }
      childService.onDone(function(doneEvent) {
        _this.removeChild(childService.id);
        _this.send(toSCXMLEvent(doneEvent, {
          origin: childService.id
        }));
      }).start();
      return actor;
    };
    Interpreter2.prototype.spawnBehavior = function(behavior, id) {
      var actorRef = spawnBehavior(behavior, {
        id,
        parent: this
      });
      this.children.set(id, actorRef);
      return actorRef;
    };
    Interpreter2.prototype.spawnPromise = function(promise, id) {
      var _a2;
      var _this = this;
      var canceled = false;
      var resolvedData;
      promise.then(function(response) {
        if (!canceled) {
          resolvedData = response;
          _this.removeChild(id);
          _this.send(toSCXMLEvent(doneInvoke(id, response), {
            origin: id
          }));
        }
      }, function(errorData) {
        if (!canceled) {
          _this.removeChild(id);
          var errorEvent = error2(id, errorData);
          try {
            _this.send(toSCXMLEvent(errorEvent, {
              origin: id
            }));
          } catch (error3) {
            reportUnhandledExceptionOnInvocation(errorData, error3, id);
            if (_this.devTools) {
              _this.devTools.send(errorEvent, _this.state);
            }
            if (_this.machine.strict) {
              _this.stop();
            }
          }
        }
      });
      var actor = (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function(next, handleError, complete) {
          var observer = toObserver(next, handleError, complete);
          var unsubscribed = false;
          promise.then(function(response) {
            if (unsubscribed) {
              return;
            }
            observer.next(response);
            if (unsubscribed) {
              return;
            }
            observer.complete();
          }, function(err) {
            if (unsubscribed) {
              return;
            }
            observer.error(err);
          });
          return {
            unsubscribe: function() {
              return unsubscribed = true;
            }
          };
        },
        stop: function() {
          canceled = true;
        },
        toJSON: function() {
          return {
            id
          };
        },
        getSnapshot: function() {
          return resolvedData;
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnCallback = function(callback, id) {
      var _a2;
      var _this = this;
      var canceled = false;
      var receivers = /* @__PURE__ */ new Set();
      var listeners = /* @__PURE__ */ new Set();
      var emitted;
      var receive = function(e) {
        emitted = e;
        listeners.forEach(function(listener) {
          return listener(e);
        });
        if (canceled) {
          return;
        }
        _this.send(toSCXMLEvent(e, {
          origin: id
        }));
      };
      var callbackStop;
      try {
        callbackStop = callback(receive, function(newListener) {
          receivers.add(newListener);
        });
      } catch (err) {
        this.send(error2(id, err));
      }
      if (isPromiseLike(callbackStop)) {
        return this.spawnPromise(callbackStop, id);
      }
      var actor = (_a2 = {
        id,
        send: function(event2) {
          return receivers.forEach(function(receiver) {
            return receiver(event2);
          });
        },
        subscribe: function(next) {
          var observer = toObserver(next);
          listeners.add(observer.next);
          return {
            unsubscribe: function() {
              listeners.delete(observer.next);
            }
          };
        },
        stop: function() {
          canceled = true;
          if (isFunction2(callbackStop)) {
            callbackStop();
          }
        },
        toJSON: function() {
          return {
            id
          };
        },
        getSnapshot: function() {
          return emitted;
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnObservable = function(source, id) {
      var _a2;
      var _this = this;
      var emitted;
      var subscription = source.subscribe(function(value) {
        emitted = value;
        _this.send(toSCXMLEvent(value, {
          origin: id
        }));
      }, function(err) {
        _this.removeChild(id);
        _this.send(toSCXMLEvent(error2(id, err), {
          origin: id
        }));
      }, function() {
        _this.removeChild(id);
        _this.send(toSCXMLEvent(doneInvoke(id), {
          origin: id
        }));
      });
      var actor = (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function(next, handleError, complete) {
          return source.subscribe(next, handleError, complete);
        },
        stop: function() {
          return subscription.unsubscribe();
        },
        getSnapshot: function() {
          return emitted;
        },
        toJSON: function() {
          return {
            id
          };
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnActor = function(actor, name) {
      this.children.set(name, actor);
      return actor;
    };
    Interpreter2.prototype.spawnActivity = function(activity) {
      var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : void 0;
      if (!implementation) {
        if (!IS_PRODUCTION) {
          warn(false, "No implementation found for activity '".concat(activity.type, "'"));
        }
        return;
      }
      var dispose = implementation(this.state.context, activity);
      this.spawnEffect(activity.id, dispose);
    };
    Interpreter2.prototype.spawnEffect = function(id, dispose) {
      var _a2;
      this.children.set(id, (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function() {
          return {
            unsubscribe: function() {
              return void 0;
            }
          };
        },
        stop: dispose || void 0,
        getSnapshot: function() {
          return void 0;
        },
        toJSON: function() {
          return {
            id
          };
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2));
    };
    Interpreter2.prototype.attachDev = function() {
      var global2 = getGlobal();
      if (this.options.devTools && global2) {
        if (global2.__REDUX_DEVTOOLS_EXTENSION__) {
          var devToolsOptions = typeof this.options.devTools === "object" ? this.options.devTools : void 0;
          this.devTools = global2.__REDUX_DEVTOOLS_EXTENSION__.connect(__assign2(__assign2({
            name: this.id,
            autoPause: true,
            stateSanitizer: function(state) {
              return {
                value: state.value,
                context: state.context,
                actions: state.actions
              };
            }
          }, devToolsOptions), {
            features: __assign2({
              jump: false,
              skip: false
            }, devToolsOptions ? devToolsOptions.features : void 0)
          }), this.machine);
          this.devTools.init(this.state);
        }
        registerService(this);
      }
    };
    Interpreter2.prototype.toJSON = function() {
      return {
        id: this.id
      };
    };
    Interpreter2.prototype[symbolObservable] = function() {
      return this;
    };
    Interpreter2.prototype.getSnapshot = function() {
      if (this.status === InterpreterStatus.NotStarted) {
        return this.initialState;
      }
      return this._state;
    };
    Interpreter2.defaultOptions = {
      execute: true,
      deferEvents: true,
      clock: {
        setTimeout: function(fn, ms) {
          return setTimeout(fn, ms);
        },
        clearTimeout: function(id) {
          return clearTimeout(id);
        }
      },
      logger: console.log.bind(console),
      devTools: false
    };
    Interpreter2.interpret = interpret;
    return Interpreter2;
  }()
);
var resolveSpawnOptions = function(nameOrOptions) {
  if (isString2(nameOrOptions)) {
    return __assign2(__assign2({}, DEFAULT_SPAWN_OPTIONS), {
      name: nameOrOptions
    });
  }
  return __assign2(__assign2(__assign2({}, DEFAULT_SPAWN_OPTIONS), {
    name: uniqueId()
  }), nameOrOptions);
};
function spawn(entity, nameOrOptions) {
  var resolvedOptions = resolveSpawnOptions(nameOrOptions);
  return consume(function(service) {
    if (!IS_PRODUCTION) {
      var isLazyEntity = isMachine(entity) || isFunction2(entity);
      warn(!!service || isLazyEntity, 'Attempted to spawn an Actor (ID: "'.concat(isMachine(entity) ? entity.id : "undefined", '") outside of a service. This will have no effect.'));
    }
    if (service) {
      return service.spawn(entity, resolvedOptions.name, resolvedOptions);
    } else {
      return createDeferredActor(entity, resolvedOptions.name);
    }
  });
}
function interpret(machine, options) {
  var interpreter = new Interpreter(machine, options);
  return interpreter;
}

// node_modules/xstate/es/invokeUtils.js
function toInvokeSource2(src) {
  if (typeof src === "string") {
    var simpleSrc = {
      type: src
    };
    simpleSrc.toString = function() {
      return src;
    };
    return simpleSrc;
  }
  return src;
}
function toInvokeDefinition(invokeConfig) {
  return __assign2(__assign2({
    type: invoke
  }, invokeConfig), {
    toJSON: function() {
      invokeConfig.onDone;
      invokeConfig.onError;
      var invokeDef = __rest(invokeConfig, ["onDone", "onError"]);
      return __assign2(__assign2({}, invokeDef), {
        type: invoke,
        src: toInvokeSource2(invokeConfig.src)
      });
    }
  });
}

// node_modules/xstate/es/StateNode.js
var NULL_EVENT = "";
var STATE_IDENTIFIER = "#";
var WILDCARD = "*";
var EMPTY_OBJECT = {};
var isStateId = function(str) {
  return str[0] === STATE_IDENTIFIER;
};
var createDefaultOptions = function() {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};
var validateArrayifiedTransitions = function(stateNode, event2, transitions) {
  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {
    return !("cond" in transition) && !("in" in transition) && (isString2(transition.target) || isMachine(transition.target));
  });
  var eventText = event2 === NULL_EVENT ? "the transient event" : "event '".concat(event2, "'");
  warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};
var StateNode = (
  /** @class */
  function() {
    function StateNode2(config, options, _context, _stateInfo) {
      if (_context === void 0) {
        _context = "context" in config ? config.context : void 0;
      }
      var _this = this;
      var _a2;
      this.config = config;
      this._context = _context;
      this.order = -1;
      this.__xstatenode = true;
      this.__cache = {
        events: void 0,
        relativeValue: /* @__PURE__ */ new Map(),
        initialStateValue: void 0,
        initialState: void 0,
        on: void 0,
        transitions: void 0,
        candidates: {},
        delayedTransitions: void 0
      };
      this.idMap = {};
      this.tags = [];
      this.options = Object.assign(createDefaultOptions(), options);
      this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
      this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || "(machine)";
      this.machine = this.parent ? this.parent.machine : this;
      this.path = this.parent ? this.parent.path.concat(this.key) : [];
      this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
      this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);
      this.version = this.parent ? this.parent.version : this.config.version;
      this.type = this.config.type || (this.config.parallel ? "parallel" : this.config.states && Object.keys(this.config.states).length ? "compound" : this.config.history ? "history" : "atomic");
      this.schema = this.parent ? this.machine.schema : (_a2 = this.config.schema) !== null && _a2 !== void 0 ? _a2 : {};
      this.description = this.config.description;
      if (!IS_PRODUCTION) {
        warn(!("parallel" in this.config), 'The "parallel" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
      }
      this.initial = this.config.initial;
      this.states = this.config.states ? mapValues(this.config.states, function(stateConfig, key) {
        var _a3;
        var stateNode = new StateNode2(stateConfig, {}, void 0, {
          parent: _this,
          key
        });
        Object.assign(_this.idMap, __assign2((_a3 = {}, _a3[stateNode.id] = stateNode, _a3), stateNode.idMap));
        return stateNode;
      }) : EMPTY_OBJECT;
      var order = 0;
      function dfs(stateNode) {
        var e_1, _a3;
        stateNode.order = order++;
        try {
          for (var _b = __values(getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            dfs(child);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a3 = _b.return))
              _a3.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      dfs(this);
      this.history = this.config.history === true ? "shallow" : this.config.history || false;
      this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a3) {
        var event2 = _a3.event;
        return event2 === NULL_EVENT;
      }) : NULL_EVENT in this.config.on);
      this.strict = !!this.config.strict;
      this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function(action) {
        return toActionObject(action);
      });
      this.onExit = toArray(this.config.exit || this.config.onExit).map(function(action) {
        return toActionObject(action);
      });
      this.meta = this.config.meta;
      this.doneData = this.type === "final" ? this.config.data : void 0;
      this.invoke = toArray(this.config.invoke).map(function(invokeConfig, i) {
        var _a3, _b;
        if (isMachine(invokeConfig)) {
          var invokeId = createInvokeId(_this.id, i);
          _this.machine.options.services = __assign2((_a3 = {}, _a3[invokeId] = invokeConfig, _a3), _this.machine.options.services);
          return toInvokeDefinition({
            src: invokeId,
            id: invokeId
          });
        } else if (isString2(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          return toInvokeDefinition(__assign2(__assign2({}, invokeConfig), {
            id: invokeId,
            src: invokeConfig.src
          }));
        } else if (isMachine(invokeConfig.src) || isFunction2(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          _this.machine.options.services = __assign2((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
          return toInvokeDefinition(__assign2(__assign2({
            id: invokeId
          }, invokeConfig), {
            src: invokeId
          }));
        } else {
          var invokeSource = invokeConfig.src;
          return toInvokeDefinition(__assign2(__assign2({
            id: createInvokeId(_this.id, i)
          }, invokeConfig), {
            src: invokeSource
          }));
        }
      });
      this.activities = toArray(this.config.activities).concat(this.invoke).map(function(activity) {
        return toActivityDefinition(activity);
      });
      this.transition = this.transition.bind(this);
      this.tags = toArray(this.config.tags);
    }
    StateNode2.prototype._init = function() {
      if (this.__cache.transitions) {
        return;
      }
      getAllStateNodes(this).forEach(function(stateNode) {
        return stateNode.on;
      });
    };
    StateNode2.prototype.withConfig = function(options, context) {
      var _a2 = this.options, actions = _a2.actions, activities = _a2.activities, guards = _a2.guards, services = _a2.services, delays = _a2.delays;
      return new StateNode2(this.config, {
        actions: __assign2(__assign2({}, actions), options.actions),
        activities: __assign2(__assign2({}, activities), options.activities),
        guards: __assign2(__assign2({}, guards), options.guards),
        services: __assign2(__assign2({}, services), options.services),
        delays: __assign2(__assign2({}, delays), options.delays)
      }, context !== null && context !== void 0 ? context : this.context);
    };
    StateNode2.prototype.withContext = function(context) {
      return new StateNode2(this.config, this.options, context);
    };
    Object.defineProperty(StateNode2.prototype, "context", {
      get: function() {
        return isFunction2(this._context) ? this._context() : this._context;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "definition", {
      /**
       * The well-structured state node definition.
       */
      get: function() {
        return {
          id: this.id,
          key: this.key,
          version: this.version,
          context: this.context,
          type: this.type,
          initial: this.initial,
          history: this.history,
          states: mapValues(this.states, function(state) {
            return state.definition;
          }),
          on: this.on,
          transitions: this.transitions,
          entry: this.onEntry,
          exit: this.onExit,
          activities: this.activities || [],
          meta: this.meta,
          order: this.order || -1,
          data: this.doneData,
          invoke: this.invoke,
          description: this.description,
          tags: this.tags
        };
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.toJSON = function() {
      return this.definition;
    };
    Object.defineProperty(StateNode2.prototype, "on", {
      /**
       * The mapping of events to transitions.
       */
      get: function() {
        if (this.__cache.on) {
          return this.__cache.on;
        }
        var transitions = this.transitions;
        return this.__cache.on = transitions.reduce(function(map, transition) {
          map[transition.eventType] = map[transition.eventType] || [];
          map[transition.eventType].push(transition);
          return map;
        }, {});
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "after", {
      get: function() {
        return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "transitions", {
      /**
       * All the transitions that can be taken from this state node.
       */
      get: function() {
        return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getCandidates = function(eventName) {
      if (this.__cache.candidates[eventName]) {
        return this.__cache.candidates[eventName];
      }
      var transient = eventName === NULL_EVENT;
      var candidates = this.transitions.filter(function(transition) {
        var sameEventType = transition.eventType === eventName;
        return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
      });
      this.__cache.candidates[eventName] = candidates;
      return candidates;
    };
    StateNode2.prototype.getDelayedTransitions = function() {
      var _this = this;
      var afterConfig = this.config.after;
      if (!afterConfig) {
        return [];
      }
      var mutateEntryExit = function(delay, i) {
        var delayRef = isFunction2(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
        var eventType = after2(delayRef, _this.id);
        _this.onEntry.push(send2(eventType, {
          delay
        }));
        _this.onExit.push(cancel2(eventType));
        return eventType;
      };
      var delayedTransitions = isArray2(afterConfig) ? afterConfig.map(function(transition, i) {
        var eventType = mutateEntryExit(transition.delay, i);
        return __assign2(__assign2({}, transition), {
          event: eventType
        });
      }) : flatten(Object.keys(afterConfig).map(function(delay, i) {
        var configTransition = afterConfig[delay];
        var resolvedTransition = isString2(configTransition) ? {
          target: configTransition
        } : configTransition;
        var resolvedDelay = !isNaN(+delay) ? +delay : delay;
        var eventType = mutateEntryExit(resolvedDelay, i);
        return toArray(resolvedTransition).map(function(transition) {
          return __assign2(__assign2({}, transition), {
            event: eventType,
            delay: resolvedDelay
          });
        });
      }));
      return delayedTransitions.map(function(delayedTransition) {
        var delay = delayedTransition.delay;
        return __assign2(__assign2({}, _this.formatTransition(delayedTransition)), {
          delay
        });
      });
    };
    StateNode2.prototype.getStateNodes = function(state) {
      var _a2;
      var _this = this;
      if (!state) {
        return [];
      }
      var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);
      if (isString2(stateValue)) {
        var initialStateValue = this.getStateNode(stateValue).initial;
        return initialStateValue !== void 0 ? this.getStateNodes((_a2 = {}, _a2[stateValue] = initialStateValue, _a2)) : [this, this.states[stateValue]];
      }
      var subStateKeys = Object.keys(stateValue);
      var subStateNodes = [this];
      subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function(subStateKey) {
        return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
      }))), false));
      return subStateNodes;
    };
    StateNode2.prototype.handles = function(event2) {
      var eventType = getEventType(event2);
      return this.events.includes(eventType);
    };
    StateNode2.prototype.resolveState = function(state) {
      var stateFromConfig = state instanceof State ? state : State.create(state);
      var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));
      return new State(__assign2(__assign2({}, stateFromConfig), {
        value: this.resolve(stateFromConfig.value),
        configuration,
        done: isInFinalState(configuration, this),
        tags: getTagsFromConfiguration(configuration),
        machine: this.machine
      }));
    };
    StateNode2.prototype.transitionLeafNode = function(stateValue, state, _event) {
      var stateNode = this.getStateNode(stateValue);
      var next = stateNode.next(state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode2.prototype.transitionCompoundNode = function(stateValue, state, _event) {
      var subStateKeys = Object.keys(stateValue);
      var stateNode = this.getStateNode(subStateKeys[0]);
      var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode2.prototype.transitionParallelNode = function(stateValue, state, _event) {
      var e_2, _a2;
      var transitionMap = {};
      try {
        for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subStateKey = _c.value;
          var subStateValue = stateValue[subStateKey];
          if (!subStateValue) {
            continue;
          }
          var subStateNode = this.getStateNode(subStateKey);
          var next = subStateNode._transition(subStateValue, state, _event);
          if (next) {
            transitionMap[subStateKey] = next;
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      var stateTransitions = Object.keys(transitionMap).map(function(key) {
        return transitionMap[key];
      });
      var enabledTransitions = flatten(stateTransitions.map(function(st) {
        return st.transitions;
      }));
      var willTransition = stateTransitions.some(function(st) {
        return st.transitions.length > 0;
      });
      if (!willTransition) {
        return this.next(state, _event);
      }
      var configuration = flatten(Object.keys(transitionMap).map(function(key) {
        return transitionMap[key].configuration;
      }));
      return {
        transitions: enabledTransitions,
        exitSet: flatten(stateTransitions.map(function(t2) {
          return t2.exitSet;
        })),
        configuration,
        source: state,
        actions: flatten(Object.keys(transitionMap).map(function(key) {
          return transitionMap[key].actions;
        }))
      };
    };
    StateNode2.prototype._transition = function(stateValue, state, _event) {
      if (isString2(stateValue)) {
        return this.transitionLeafNode(stateValue, state, _event);
      }
      if (Object.keys(stateValue).length === 1) {
        return this.transitionCompoundNode(stateValue, state, _event);
      }
      return this.transitionParallelNode(stateValue, state, _event);
    };
    StateNode2.prototype.getTransitionData = function(state, event2) {
      return this._transition(state.value, state, toSCXMLEvent(event2));
    };
    StateNode2.prototype.next = function(state, _event) {
      var e_3, _a2;
      var _this = this;
      var eventName = _event.name;
      var actions = [];
      var nextStateNodes = [];
      var selectedTransition;
      try {
        for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var candidate = _c.value;
          var cond = candidate.cond, stateIn = candidate.in;
          var resolvedContext = state.context;
          var isInState = stateIn ? isString2(stateIn) && isStateId(stateIn) ? (
            // Check if in state by ID
            state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter))
          ) : (
            // Check if in state by relative grandparent
            matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value))
          ) : true;
          var guardPassed = false;
          try {
            guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
          } catch (err) {
            throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
          }
          if (guardPassed && isInState) {
            if (candidate.target !== void 0) {
              nextStateNodes = candidate.target;
            }
            actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));
            selectedTransition = candidate;
            break;
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      if (!selectedTransition) {
        return void 0;
      }
      if (!nextStateNodes.length) {
        return {
          transitions: [selectedTransition],
          exitSet: [],
          configuration: state.value ? [this] : [],
          source: state,
          actions
        };
      }
      var allNextStateNodes = flatten(nextStateNodes.map(function(stateNode) {
        return _this.getRelativeStateNodes(stateNode, state.historyValue);
      }));
      var isInternal = !!selectedTransition.internal;
      return {
        transitions: [selectedTransition],
        exitSet: isInternal ? [] : flatten(nextStateNodes.map(function(targetNode) {
          return _this.getPotentiallyReenteringNodes(targetNode);
        })),
        configuration: allNextStateNodes,
        source: state,
        actions
      };
    };
    StateNode2.prototype.getPotentiallyReenteringNodes = function(targetNode) {
      if (this.order < targetNode.order) {
        return [this];
      }
      var nodes = [];
      var marker = this;
      var possibleAncestor = targetNode;
      while (marker && marker !== possibleAncestor) {
        nodes.push(marker);
        marker = marker.parent;
      }
      if (marker !== possibleAncestor) {
        return [];
      }
      nodes.push(possibleAncestor);
      return nodes;
    };
    StateNode2.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
      var e_4, _a2, e_5, _b;
      var _this = this;
      var prevConfig = prevState ? getConfiguration([], this.getStateNodes(prevState.value)) : [];
      var entrySet = /* @__PURE__ */ new Set();
      try {
        for (var _c = __values(Array.from(resolvedConfig).sort(function(a, b) {
          return a.order - b.order;
        })), _d = _c.next(); !_d.done; _d = _c.next()) {
          var sn = _d.value;
          if (!has2(prevConfig, sn) || has2(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
            entrySet.add(sn);
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return))
            _a2.call(_c);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      try {
        for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
          var sn = prevConfig_1_1.value;
          if (!has2(resolvedConfig, sn) || has2(transition.exitSet, sn.parent)) {
            transition.exitSet.push(sn);
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return))
            _b.call(prevConfig_1);
        } finally {
          if (e_5)
            throw e_5.error;
        }
      }
      transition.exitSet.sort(function(a, b) {
        return b.order - a.order;
      });
      var entryStates = Array.from(entrySet).sort(function(a, b) {
        return a.order - b.order;
      });
      var exitStates = new Set(transition.exitSet);
      var doneEvents = flatten(entryStates.map(function(sn2) {
        var events = [];
        if (sn2.type !== "final") {
          return events;
        }
        var parent = sn2.parent;
        if (!parent.parent) {
          return events;
        }
        events.push(
          done(sn2.id, sn2.doneData),
          // TODO: deprecate - final states should not emit done events for their own state.
          done(parent.id, sn2.doneData ? mapContext(sn2.doneData, currentContext, _event) : void 0)
        );
        var grandparent = parent.parent;
        if (grandparent.type === "parallel") {
          if (getChildren(grandparent).every(function(parentNode) {
            return isInFinalState(transition.configuration, parentNode);
          })) {
            events.push(done(grandparent.id));
          }
        }
        return events;
      }));
      var entryActions = entryStates.map(function(stateNode) {
        var entryActions2 = stateNode.onEntry;
        var invokeActions = stateNode.activities.map(function(activity) {
          return start2(activity);
        });
        return {
          type: "entry",
          actions: toActionObjects(predictableExec ? __spreadArray(__spreadArray([], __read(entryActions2), false), __read(invokeActions), false) : __spreadArray(__spreadArray([], __read(invokeActions), false), __read(entryActions2), false), _this.machine.options.actions)
        };
      }).concat({
        type: "state_done",
        actions: doneEvents.map(function(event2) {
          return raise2(event2);
        })
      });
      var exitActions = Array.from(exitStates).map(function(stateNode) {
        return {
          type: "exit",
          actions: toActionObjects(__spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function(activity) {
            return stop2(activity);
          })), false), _this.machine.options.actions)
        };
      });
      var actions = exitActions.concat({
        type: "transition",
        actions: toActionObjects(transition.actions, this.machine.options.actions)
      }).concat(entryActions);
      if (isDone) {
        var stopActions = toActionObjects(flatten(__spreadArray([], __read(resolvedConfig), false).sort(function(a, b) {
          return b.order - a.order;
        }).map(function(stateNode) {
          return stateNode.onExit;
        })), this.machine.options.actions).filter(function(action) {
          return !isRaisableAction(action);
        });
        return actions.concat({
          type: "stop",
          actions: stopActions
        });
      }
      return actions;
    };
    StateNode2.prototype.transition = function(state, event2, context, exec) {
      if (state === void 0) {
        state = this.initialState;
      }
      var _event = toSCXMLEvent(event2);
      var currentState;
      if (state instanceof State) {
        currentState = context === void 0 ? state : this.resolveState(State.from(state, context));
      } else {
        var resolvedStateValue = isString2(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
        var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
        currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
      }
      if (!IS_PRODUCTION && _event.name === WILDCARD) {
        throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
      }
      if (this.strict) {
        if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
          throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
        }
      }
      var stateTransition = this._transition(currentState.value, currentState, _event) || {
        transitions: [],
        configuration: [],
        exitSet: [],
        source: currentState,
        actions: []
      };
      var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
      var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
      stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);
      return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
    };
    StateNode2.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {
      var _a2;
      var currentActions = state.actions;
      state = this.transition(state, _event, void 0, predictableExec);
      state._event = originalEvent;
      state.event = originalEvent.data;
      (_a2 = state.actions).unshift.apply(_a2, __spreadArray([], __read(currentActions), false));
      return state;
    };
    StateNode2.prototype.resolveTransition = function(stateTransition, currentState, context, predictableExec, _event) {
      var e_6, _a2, e_7, _b;
      var _this = this;
      if (_event === void 0) {
        _event = initEvent;
      }
      var configuration = stateTransition.configuration;
      var willTransition = !currentState || stateTransition.transitions.length > 0;
      var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
      var isDone = isInFinalState(resolvedConfiguration, this);
      var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : void 0;
      var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : void 0 : void 0;
      var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);
      var activities = currentState ? __assign2({}, currentState.activities) : {};
      try {
        for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
          var block = actionBlocks_1_1.value;
          try {
            for (var _c = (e_7 = void 0, __values(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var action = _d.value;
              if (action.type === start) {
                activities[action.activity.id || action.activity.type] = action;
              } else if (action.type === stop) {
                activities[action.activity.id || action.activity.type] = false;
              }
            }
          } catch (e_7_1) {
            e_7 = {
              error: e_7_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_b = _c.return))
                _b.call(_c);
            } finally {
              if (e_7)
                throw e_7.error;
            }
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a2 = actionBlocks_1.return))
            _a2.call(actionBlocks_1);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      var _e = __read(resolveActions(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];
      var _f = __read(partition(resolvedActions, isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];
      var invokeActions = resolvedActions.filter(function(action2) {
        var _a3;
        return action2.type === start && ((_a3 = action2.activity) === null || _a3 === void 0 ? void 0 : _a3.type) === invoke;
      });
      var children2 = invokeActions.reduce(function(acc, action2) {
        acc[action2.activity.id] = createInvocableActor(action2.activity, _this.machine, updatedContext, _event);
        return acc;
      }, currentState ? __assign2({}, currentState.children) : {});
      var nextState = new State({
        value: resolvedStateValue || currentState.value,
        context: updatedContext,
        _event,
        // Persist _sessionid between states
        _sessionid: currentState ? currentState._sessionid : null,
        historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : void 0 : currentState ? currentState.historyValue : void 0,
        history: !resolvedStateValue || stateTransition.source ? currentState : void 0,
        actions: resolvedStateValue ? nonRaisedActions : [],
        activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
        events: [],
        configuration: resolvedConfiguration,
        transitions: stateTransition.transitions,
        children: children2,
        done: isDone,
        tags: getTagsFromConfiguration(resolvedConfiguration),
        machine: this
      });
      var didUpdateContext = context !== updatedContext;
      nextState.changed = _event.name === update || didUpdateContext;
      var history = nextState.history;
      if (history) {
        delete history.history;
      }
      var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {
        return stateNode._transient;
      }));
      if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
        return nextState;
      }
      var maybeNextState = nextState;
      if (!isDone) {
        if (hasAlwaysTransitions) {
          maybeNextState = this.resolveRaisedTransition(maybeNextState, {
            type: nullEvent
          }, _event, predictableExec);
        }
        while (raisedEvents.length) {
          var raisedEvent = raisedEvents.shift();
          maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
        }
      }
      var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : void 0);
      maybeNextState.changed = changed;
      maybeNextState.history = history;
      return maybeNextState;
    };
    StateNode2.prototype.getStateNode = function(stateKey) {
      if (isStateId(stateKey)) {
        return this.machine.getStateNodeById(stateKey);
      }
      if (!this.states) {
        throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
      }
      var result = this.states[stateKey];
      if (!result) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return result;
    };
    StateNode2.prototype.getStateNodeById = function(stateId) {
      var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;
      if (resolvedStateId === this.id) {
        return this;
      }
      var stateNode = this.machine.idMap[resolvedStateId];
      if (!stateNode) {
        throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
      }
      return stateNode;
    };
    StateNode2.prototype.getStateNodeByPath = function(statePath) {
      if (typeof statePath === "string" && isStateId(statePath)) {
        try {
          return this.getStateNodeById(statePath.slice(1));
        } catch (e) {
        }
      }
      var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
      var currentStateNode = this;
      while (arrayStatePath.length) {
        var key = arrayStatePath.shift();
        if (!key.length) {
          break;
        }
        currentStateNode = currentStateNode.getStateNode(key);
      }
      return currentStateNode;
    };
    StateNode2.prototype.resolve = function(stateValue) {
      var _a2;
      var _this = this;
      if (!stateValue) {
        return this.initialStateValue || EMPTY_OBJECT;
      }
      switch (this.type) {
        case "parallel":
          return mapValues(this.initialStateValue, function(subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
          });
        case "compound":
          if (isString2(stateValue)) {
            var subStateNode = this.getStateNode(stateValue);
            if (subStateNode.type === "parallel" || subStateNode.type === "compound") {
              return _a2 = {}, _a2[stateValue] = subStateNode.initialStateValue, _a2;
            }
            return stateValue;
          }
          if (!Object.keys(stateValue).length) {
            return this.initialStateValue || {};
          }
          return mapValues(stateValue, function(subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
          });
        default:
          return stateValue || EMPTY_OBJECT;
      }
    };
    StateNode2.prototype.getResolvedPath = function(stateIdentifier) {
      if (isStateId(stateIdentifier)) {
        var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];
        if (!stateNode) {
          throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
        }
        return stateNode.path;
      }
      return toStatePath(stateIdentifier, this.delimiter);
    };
    Object.defineProperty(StateNode2.prototype, "initialStateValue", {
      get: function() {
        var _a2;
        if (this.__cache.initialStateValue) {
          return this.__cache.initialStateValue;
        }
        var initialStateValue;
        if (this.type === "parallel") {
          initialStateValue = mapFilterValues(this.states, function(state) {
            return state.initialStateValue || EMPTY_OBJECT;
          }, function(stateNode) {
            return !(stateNode.type === "history");
          });
        } else if (this.initial !== void 0) {
          if (!this.states[this.initial]) {
            throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
          }
          initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a2 = {}, _a2[this.initial] = this.states[this.initial].initialStateValue, _a2);
        } else {
          initialStateValue = {};
        }
        this.__cache.initialStateValue = initialStateValue;
        return this.__cache.initialStateValue;
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getInitialState = function(stateValue, context) {
      this._init();
      var configuration = this.getStateNodes(stateValue);
      return this.resolveTransition({
        configuration,
        exitSet: [],
        transitions: [],
        source: void 0,
        actions: []
      }, void 0, context !== null && context !== void 0 ? context : this.machine.context, void 0);
    };
    Object.defineProperty(StateNode2.prototype, "initialState", {
      /**
       * The initial State instance, which includes all actions to be executed from
       * entering the initial state.
       */
      get: function() {
        var initialStateValue = this.initialStateValue;
        if (!initialStateValue) {
          throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
        }
        return this.getInitialState(initialStateValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "target", {
      /**
       * The target state value of the history state node, if it exists. This represents the
       * default state value to transition to if no history value exists yet.
       */
      get: function() {
        var target;
        if (this.type === "history") {
          var historyConfig = this.config;
          if (isString2(historyConfig.target)) {
            target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
          } else {
            target = historyConfig.target;
          }
        }
        return target;
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {
      if (resolve === void 0) {
        resolve = true;
      }
      return resolve ? relativeStateId.type === "history" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
    };
    Object.defineProperty(StateNode2.prototype, "initialStateNodes", {
      get: function() {
        var _this = this;
        if (isLeafNode(this)) {
          return [this];
        }
        if (this.type === "compound" && !this.initial) {
          if (!IS_PRODUCTION) {
            warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
          }
          return [this];
        }
        var initialStateNodePaths = toStatePaths(this.initialStateValue);
        return flatten(initialStateNodePaths.map(function(initialPath) {
          return _this.getFromRelativePath(initialPath);
        }));
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getFromRelativePath = function(relativePath) {
      if (!relativePath.length) {
        return [this];
      }
      var _a2 = __read(relativePath), stateKey = _a2[0], childStatePath = _a2.slice(1);
      if (!this.states) {
        throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
      }
      var childStateNode = this.getStateNode(stateKey);
      if (childStateNode.type === "history") {
        return childStateNode.resolveHistory();
      }
      if (!this.states[stateKey]) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return this.states[stateKey].getFromRelativePath(childStatePath);
    };
    StateNode2.prototype.historyValue = function(relativeStateValue) {
      if (!Object.keys(this.states).length) {
        return void 0;
      }
      return {
        current: relativeStateValue || this.initialStateValue,
        states: mapFilterValues(this.states, function(stateNode, key) {
          if (!relativeStateValue) {
            return stateNode.historyValue();
          }
          var subStateValue = isString2(relativeStateValue) ? void 0 : relativeStateValue[key];
          return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
        }, function(stateNode) {
          return !stateNode.history;
        })
      };
    };
    StateNode2.prototype.resolveHistory = function(historyValue) {
      var _this = this;
      if (this.type !== "history") {
        return [this];
      }
      var parent = this.parent;
      if (!historyValue) {
        var historyTarget = this.target;
        return historyTarget ? flatten(toStatePaths(historyTarget).map(function(relativeChildPath) {
          return parent.getFromRelativePath(relativeChildPath);
        })) : parent.initialStateNodes;
      }
      var subHistoryValue = nestedPath(parent.path, "states")(historyValue).current;
      if (isString2(subHistoryValue)) {
        return [parent.getStateNode(subHistoryValue)];
      }
      return flatten(toStatePaths(subHistoryValue).map(function(subStatePath) {
        return _this.history === "deep" ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
      }));
    };
    Object.defineProperty(StateNode2.prototype, "stateIds", {
      /**
       * All the state node IDs of this state node and its descendant state nodes.
       */
      get: function() {
        var _this = this;
        var childStateIds = flatten(Object.keys(this.states).map(function(stateKey) {
          return _this.states[stateKey].stateIds;
        }));
        return [this.id].concat(childStateIds);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "events", {
      /**
       * All the event types accepted by this state node and its descendants.
       */
      get: function() {
        var e_8, _a2, e_9, _b;
        if (this.__cache.events) {
          return this.__cache.events;
        }
        var states = this.states;
        var events = new Set(this.ownEvents);
        if (states) {
          try {
            for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var stateId = _d.value;
              var state = states[stateId];
              if (state.states) {
                try {
                  for (var _e = (e_9 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var event_1 = _f.value;
                    events.add("".concat(event_1));
                  }
                } catch (e_9_1) {
                  e_9 = {
                    error: e_9_1
                  };
                } finally {
                  try {
                    if (_f && !_f.done && (_b = _e.return))
                      _b.call(_e);
                  } finally {
                    if (e_9)
                      throw e_9.error;
                  }
                }
              }
            }
          } catch (e_8_1) {
            e_8 = {
              error: e_8_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_a2 = _c.return))
                _a2.call(_c);
            } finally {
              if (e_8)
                throw e_8.error;
            }
          }
        }
        return this.__cache.events = Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "ownEvents", {
      /**
       * All the events that have transitions directly from this state node.
       *
       * Excludes any inert events.
       */
      get: function() {
        var events = new Set(this.transitions.filter(function(transition) {
          return !(!transition.target && !transition.actions.length && transition.internal);
        }).map(function(transition) {
          return transition.eventType;
        }));
        return Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.resolveTarget = function(_target) {
      var _this = this;
      if (_target === void 0) {
        return void 0;
      }
      return _target.map(function(target) {
        if (!isString2(target)) {
          return target;
        }
        var isInternalTarget = target[0] === _this.delimiter;
        if (isInternalTarget && !_this.parent) {
          return _this.getStateNodeByPath(target.slice(1));
        }
        var resolvedTarget = isInternalTarget ? _this.key + target : target;
        if (_this.parent) {
          try {
            var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
            return targetStateNode;
          } catch (err) {
            throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
          }
        } else {
          return _this.getStateNodeByPath(resolvedTarget);
        }
      });
    };
    StateNode2.prototype.formatTransition = function(transitionConfig) {
      var _this = this;
      var normalizedTarget = normalizeTarget(transitionConfig.target);
      var internal = "internal" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {
        return isString2(_target) && _target[0] === _this.delimiter;
      }) : true;
      var guards = this.machine.options.guards;
      var target = this.resolveTarget(normalizedTarget);
      var transition = __assign2(__assign2({}, transitionConfig), {
        actions: toActionObjects(toArray(transitionConfig.actions)),
        cond: toGuard(transitionConfig.cond, guards),
        target,
        source: this,
        internal,
        eventType: transitionConfig.event,
        toJSON: function() {
          return __assign2(__assign2({}, transition), {
            target: transition.target ? transition.target.map(function(t2) {
              return "#".concat(t2.id);
            }) : void 0,
            source: "#".concat(_this.id)
          });
        }
      });
      return transition;
    };
    StateNode2.prototype.formatTransitions = function() {
      var e_10, _a2;
      var _this = this;
      var onConfig;
      if (!this.config.on) {
        onConfig = [];
      } else if (Array.isArray(this.config.on)) {
        onConfig = this.config.on;
      } else {
        var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
        onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function(key) {
          if (!IS_PRODUCTION && key === NULL_EVENT) {
            warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + 'Please check the `on` configuration for "#'.concat(_this.id, '".'));
          }
          var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);
          if (!IS_PRODUCTION) {
            validateArrayifiedTransitions(_this, key, transitionConfigArray);
          }
          return transitionConfigArray;
        }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));
      }
      var eventlessConfig = this.config.always ? toTransitionConfigArray("", this.config.always) : [];
      var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];
      if (!IS_PRODUCTION) {
        warn(!(this.config.onDone && !this.parent), 'Root nodes cannot have an ".onDone" transition. Please check the config of "'.concat(this.id, '".'));
      }
      var invokeConfig = flatten(this.invoke.map(function(invokeDef) {
        var settleTransitions = [];
        if (invokeDef.onDone) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
        }
        if (invokeDef.onError) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error2(invokeDef.id)), invokeDef.onError)), false));
        }
        return settleTransitions;
      }));
      var delayedTransitions = this.after;
      var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function(transitionConfig) {
        return toArray(transitionConfig).map(function(transition) {
          return _this.formatTransition(transition);
        });
      }));
      try {
        for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
          var delayedTransition = delayedTransitions_1_1.value;
          formattedTransitions.push(delayedTransition);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a2 = delayedTransitions_1.return))
            _a2.call(delayedTransitions_1);
        } finally {
          if (e_10)
            throw e_10.error;
        }
      }
      return formattedTransitions;
    };
    return StateNode2;
  }()
);

// node_modules/xstate/es/Machine.js
var warned = false;
function createMachine(config, options) {
  if (!IS_PRODUCTION && !("predictableActionArguments" in config) && !warned) {
    warned = true;
    console.warn("It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html");
  }
  return new StateNode(config, options);
}

// node_modules/xstate/es/index.js
var assign3 = assign2;
var sendUpdate2 = sendUpdate;
var forwardTo2 = forwardTo;

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/utils.mjs
var import_pickBy = __toESM(require_pickBy(), 1);
var DEFAULT_AUTO_SIGN_IN = true;
var EMPTY_STRING = "";
var sanitizePhoneNumber = (dialCode, phoneNumber) => `${dialCode}${phoneNumber}`.replace(/[^A-Z0-9+]/gi, "");
var selectUserAttributes = (_, key) => {
  switch (key) {
    case "address":
    case "birthdate":
    case "email":
    case "family_name":
    case "gender":
    case "given_name":
    case "locale":
    case "middle_name":
    case "name":
    case "nickname":
    case "phone_number":
    case "picture":
    case "preferred_username":
    case "profile":
    case "updated_at":
    case "website":
    case "zoneinfo":
      return true;
    default:
      return key.startsWith("custom:");
  }
};
var getUserAttributes = (formValues) => {
  const { phone_number, ...userAttributes } = (0, import_pickBy.default)(formValues, selectUserAttributes);
  if (isString(phone_number) && phone_number !== EMPTY_STRING) {
    const { country_code } = formValues;
    return {
      ...userAttributes,
      phone_number: sanitizePhoneNumber(country_code, phone_number)
    };
  }
  return userAttributes;
};
var getSignUpInput = (username, formValues, loginMechanism) => {
  const { password, ...values } = formValues;
  const attributes = getUserAttributes(values);
  const options = {
    autoSignIn: DEFAULT_AUTO_SIGN_IN,
    userAttributes: {
      // use `username` value for `phone_number`
      ...loginMechanism === "phone_number" ? { ...attributes, phone_number: username } : attributes
    }
  };
  return { username, password, options };
};
var getUsernameSignUp = ({ formValues, loginMechanisms }) => {
  const loginMechanism = loginMechanisms[0];
  if (loginMechanism === "phone_number") {
    const { country_code, phone_number } = formValues;
    return sanitizePhoneNumber(country_code, phone_number);
  }
  return formValues[loginMechanism];
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actions.mjs
var { assign: assign4 } = actions_exports;
var clearActorDoneData = assign4({ actorDoneData: void 0 });
var clearChallengeName = assign4({ challengeName: void 0 });
var clearMissingAttributes = assign4({ missingAttributes: void 0 });
var clearError = assign4({ remoteError: void 0 });
var clearFormValues = assign4({ formValues: {} });
var clearTouched = assign4({ touched: {} });
var clearUser = assign4({ user: void 0 });
var clearValidationError = assign4({ validationError: {} });
var setTotpSecretCode = assign4({
  totpSecretCode: (_, { data }) => {
    var _a2;
    const { sharedSecret } = ((_a2 = data.nextStep) == null ? void 0 : _a2.totpSetupDetails) ?? {};
    return sharedSecret;
  }
});
var setSignInStep = assign4({ step: "SIGN_IN" });
var setShouldVerifyUserAttributeStep = assign4({
  step: "SHOULD_CONFIRM_USER_ATTRIBUTE"
});
var setConfirmAttributeCompleteStep = assign4({
  step: "CONFIRM_ATTRIBUTE_COMPLETE"
});
var setChallengeName = assign4({
  challengeName: (_, { data }) => {
    const { signInStep } = data.nextStep;
    return signInStep === "CONFIRM_SIGN_IN_WITH_SMS_CODE" ? "SMS_MFA" : signInStep === "CONFIRM_SIGN_IN_WITH_TOTP_CODE" ? "SOFTWARE_TOKEN_MFA" : void 0;
  }
});
var setUsernameForgotPassword = assign4({
  username: ({ formValues, loginMechanisms }) => {
    const loginMechanism = loginMechanisms[0];
    const { username, country_code } = formValues;
    if (loginMechanism === "phone_number") {
      return sanitizePhoneNumber(country_code, username);
    }
    return username;
  }
});
var setUsernameSignUp = assign4({ username: getUsernameSignUp });
var setUsernameSignIn = assign4({
  username: ({ formValues, loginMechanisms }) => {
    const loginMechanism = loginMechanisms[0];
    const { username, country_code } = formValues;
    if (loginMechanism === "phone_number") {
      return sanitizePhoneNumber(country_code, username);
    }
    return username;
  }
});
var setNextSignInStep = assign4({
  step: (_, { data }) => data.nextStep.signInStep === "DONE" ? "SIGN_IN_COMPLETE" : data.nextStep.signInStep
});
var setNextSignUpStep = assign4({
  step: (_, { data }) => data.nextStep.signUpStep === "DONE" ? "SIGN_UP_COMPLETE" : data.nextStep.signUpStep
});
var setNextResetPasswordStep = assign4({
  step: (_, { data }) => data.nextStep.resetPasswordStep === "DONE" ? "RESET_PASSWORD_COMPLETE" : data.nextStep.resetPasswordStep
});
var setMissingAttributes = assign4({
  missingAttributes: (_, { data }) => {
    var _a2;
    return (_a2 = data.nextStep) == null ? void 0 : _a2.missingAttributes;
  }
});
var setFieldErrors = assign4({
  validationError: (_, { data }) => data
});
var setRemoteError = assign4({
  remoteError: (_, { data }) => {
    if (data.name === "NoUserPoolError") {
      return `Configuration error (see console) – please contact the administrator`;
    }
    return (data == null ? void 0 : data.message) || data;
  }
});
var setUser = assign4({ user: (_, { data }) => data });
var resolveCodeDeliveryDetails = (details) => ({
  Destination: details.destination,
  DeliveryMedium: details.deliveryMedium,
  AttributeName: details.attributName
});
var setCodeDeliveryDetails = assign4({
  codeDeliveryDetails: (_, { data }) => {
    var _a2;
    if ((_a2 = data == null ? void 0 : data.nextStep) == null ? void 0 : _a2.codeDeliveryDetails) {
      return resolveCodeDeliveryDetails(data.nextStep.codeDeliveryDetails);
    }
    return resolveCodeDeliveryDetails(data);
  }
});
var handleInput = assign4({
  formValues: (context, { data }) => {
    const { name, value } = data;
    return { ...context["formValues"], [name]: value };
  }
});
var handleSubmit = assign4({
  formValues: (context, { data }) => (
    // do not trim password
    trimValues({ ...context["formValues"], ...data }, "password")
  )
});
var handleBlur = assign4({
  touched: (context, { data }) => ({
    ...context["touched"],
    [data.name]: true
  })
});
var setUnverifiedUserAttributes = assign4({
  unverifiedUserAttributes: (_, { data }) => {
    const { email, phone_number } = data;
    const unverifiedUserAttributes = {
      ...email && { email },
      ...phone_number && { phone_number }
    };
    return unverifiedUserAttributes;
  }
});
var clearSelectedUserAttribute = assign4({ selectedUserAttribute: void 0 });
var setSelectedUserAttribute = assign4({
  selectedUserAttribute: (context) => {
    var _a2;
    return (_a2 = context.formValues) == null ? void 0 : _a2.unverifiedAttr;
  }
});
var setConfirmSignUpSignUpStep = assign4({ step: "CONFIRM_SIGN_UP" });
var ACTIONS = {
  clearActorDoneData,
  clearChallengeName,
  clearError,
  clearFormValues,
  clearMissingAttributes,
  clearSelectedUserAttribute,
  clearTouched,
  clearUser,
  clearValidationError,
  handleBlur,
  handleInput,
  handleSubmit,
  setChallengeName,
  setCodeDeliveryDetails,
  setFieldErrors,
  setMissingAttributes,
  setNextResetPasswordStep,
  setNextSignInStep,
  setNextSignUpStep,
  setRemoteError,
  setConfirmAttributeCompleteStep,
  setConfirmSignUpSignUpStep,
  setShouldVerifyUserAttributeStep,
  setSelectedUserAttribute,
  setSignInStep,
  setTotpSecretCode,
  setUser,
  setUnverifiedUserAttributes,
  setUsernameForgotPassword,
  setUsernameSignIn,
  setUsernameSignUp
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/guards.mjs
var SIGN_IN_STEP_MFA_CONFIRMATION = [
  "CONFIRM_SIGN_IN_WITH_SMS_CODE",
  "CONFIRM_SIGN_IN_WITH_TOTP_CODE"
];
var shouldConfirmSignInWithNewPassword = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED";
var shouldResetPasswordFromSignIn = (_, { data }) => {
  var _a2;
  return ((_a2 = data == null ? void 0 : data.nextStep) == null ? void 0 : _a2.signInStep) === "RESET_PASSWORD";
};
var shouldConfirmSignUpFromSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "CONFIRM_SIGN_UP";
var shouldAutoSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signUpStep) === "COMPLETE_AUTO_SIGN_IN";
var hasCompletedSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "DONE";
var hasCompletedSignUp = (_, { data }) => (data == null ? void 0 : data.nextStep.signUpStep) === "DONE";
var hasCompletedResetPassword = (_, { data }) => (data == null ? void 0 : data.nextStep.resetPasswordStep) === "DONE";
var hasCompletedAttributeConfirmation = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_ATTRIBUTE_COMPLETE";
var isConfirmUserAttributeStep = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_ATTRIBUTE_WITH_CODE";
var isShouldConfirmUserAttributeStep = (_, { data }) => (data == null ? void 0 : data.step) === "SHOULD_CONFIRM_USER_ATTRIBUTE";
var isResetPasswordStep = (_, { data }) => (data == null ? void 0 : data.step) === "RESET_PASSWORD";
var isConfirmSignUpStep = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_SIGN_UP";
var shouldConfirmSignIn = ({ step }) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);
var shouldSetupTotp = ({ step }) => step === "CONTINUE_SIGN_IN_WITH_TOTP_SETUP";
var shouldResetPassword = ({ step }) => step === "RESET_PASSWORD";
var shouldConfirmResetPassword = ({ step }) => step === "CONFIRM_RESET_PASSWORD_WITH_CODE";
var shouldConfirmSignUp = ({ step }) => step === "CONFIRM_SIGN_UP";
var shouldVerifyAttribute = (_, { data }) => {
  const { phone_number_verified, email_verified } = data;
  const emailNotVerified = email_verified === void 0 || email_verified === "false";
  const phoneNotVerified = phone_number_verified === void 0 || phone_number_verified === "false";
  return emailNotVerified && phoneNotVerified;
};
var isUserAlreadyConfirmed = (_, { data }) => data.message === "User is already confirmed.";
var GUARDS = {
  hasCompletedAttributeConfirmation,
  hasCompletedResetPassword,
  hasCompletedSignIn,
  hasCompletedSignUp,
  isConfirmSignUpStep,
  isConfirmUserAttributeStep,
  isResetPasswordStep,
  isShouldConfirmUserAttributeStep,
  isUserAlreadyConfirmed,
  shouldAutoSignIn,
  shouldConfirmResetPassword,
  shouldConfirmSignIn,
  shouldConfirmSignInWithNewPassword,
  shouldConfirmSignUp,
  shouldConfirmSignUpFromSignIn,
  shouldResetPassword,
  shouldResetPasswordFromSignIn,
  shouldSetupTotp,
  shouldVerifyAttribute
};

// node_modules/@aws-amplify/ui/dist/esm/validators/index.mjs
var import_merge = __toESM(require_merge(), 1);
var runValidators = async (formData, touchData, passwordSettings, validators) => {
  const errors = await Promise.all(validators.map((validator) => validator(formData, touchData, passwordSettings)));
  const mergedError = (0, import_merge.default)({}, ...errors);
  if (isEmpty(mergedError)) {
    return Promise.resolve();
  } else {
    return Promise.reject(mergedError);
  }
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/defaultServices.mjs
var DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;
var isInvalidUserAtributes = (userAttributes) => Array.isArray(userAttributes);
var parseUserAttributes = (userAttributes) => {
  if (!userAttributes) {
    return void 0;
  }
  if (isInvalidUserAtributes(userAttributes)) {
    return Object.entries(userAttributes).map(([_, value]) => Object.keys(value)[0]);
  }
  return Object.keys(userAttributes);
};
var defaultServices = {
  async getAmplifyConfig() {
    var _a2, _b, _c, _d;
    const result = DefaultAmplify.getConfig();
    const cliConfig = (_a2 = result.Auth) == null ? void 0 : _a2.Cognito;
    const { loginWith, userAttributes } = ((_b = result.Auth) == null ? void 0 : _b.Cognito) ?? {};
    const parsedLoginMechanisms = loginWith ? Object.entries(loginWith).filter(([key, _value]) => key !== "oauth").filter(([_key, value]) => !!value).map((keyValueArray) => {
      return keyValueArray[0] === "phone" ? "phone_number" : keyValueArray[0];
    }) : void 0;
    const parsedSignupAttributes = parseUserAttributes(userAttributes);
    const parsedSocialProviders = ((_c = loginWith == null ? void 0 : loginWith.oauth) == null ? void 0 : _c.providers) ? (_d = loginWith.oauth.providers) == null ? void 0 : _d.map((provider) => provider.toString().toLowerCase()) : void 0;
    return {
      ...cliConfig,
      loginMechanisms: parsedLoginMechanisms,
      signUpAttributes: parsedSignupAttributes,
      socialProviders: parsedSocialProviders
    };
  },
  getCurrentUser,
  handleSignIn: signIn,
  handleSignUp: signUp,
  handleConfirmSignIn: confirmSignIn,
  handleConfirmSignUp: confirmSignUp,
  handleForgotPasswordSubmit: confirmResetPassword,
  handleForgotPassword: resetPassword,
  // Validation hooks for overriding
  async validateCustomSignUp(formData, touchData) {
  },
  async validateFormPassword(formData, touchData, passwordSettings) {
    const { password } = formData;
    const { password: touched_password } = touchData;
    if (!touched_password || !passwordSettings)
      return null;
    const password_complexity = [];
    const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;
    if (password.length < policyMinLength) {
      password_complexity.push(`Password must have at least ${policyMinLength} characters`);
    }
    if (passwordSettings.requireLowercase && !/[a-z]/.test(password))
      password_complexity.push("Password must have lower case letters");
    if (passwordSettings.requireUppercase && !/[A-Z]/.test(password))
      password_complexity.push("Password must have upper case letters");
    if (passwordSettings.requireNumbers && !/[0-9]/.test(password))
      password_complexity.push("Password must have numbers");
    if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password))
      password_complexity.push("Password must have special characters");
    return password_complexity.length !== 0 ? { password: password_complexity } : null;
  },
  async validateConfirmPassword(formData, touchData) {
    const { password, confirm_password } = formData;
    const { confirm_password: touched_confirm_password, password: touched_password } = touchData;
    if (!password && !confirm_password) {
      return null;
    } else if ((password || confirm_password) && password !== confirm_password && (touched_confirm_password && touched_password || (password == null ? void 0 : password.length) >= 6 && (confirm_password == null ? void 0 : confirm_password.length) >= 6)) {
      return {
        confirm_password: "Your passwords must match"
      };
    }
  },
  async validatePreferredUsername(formData, touchData) {
  }
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/forgotPassword.mjs
function forgotPasswordActor({ services }) {
  return createMachine({
    id: "forgotPasswordActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldResetPassword",
            target: "confirmResetPassword"
          },
          {
            cond: "shouldConfirmResetPassword",
            target: "confirmResetPassword"
          },
          {
            target: "forgotPassword"
          }
        ]
      },
      forgotPassword: {
        initial: "edit",
        entry: "sendUpdate",
        exit: ["clearError", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["sendUpdate", "clearError", "setUsernameForgotPassword"],
            invoke: {
              src: "handleResetPassword",
              onDone: {
                actions: [
                  "setCodeDeliveryDetails",
                  "setNextResetPasswordStep"
                ],
                target: "#forgotPasswordActor.confirmResetPassword"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmResetPassword: {
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" },
                  RESEND: "resendCode",
                  CHANGE: { actions: "handleInput" },
                  BLUR: { actions: "handleBlur" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "pending",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "idle",
                    actions: "setFieldErrors"
                  }
                }
              },
              resendCode: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleResetPassword",
                  onDone: { target: "idle" },
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleConfirmResetPassword",
                  onDone: [
                    {
                      cond: "hasCompletedResetPassword",
                      actions: "setNextResetPasswordStep",
                      target: "#forgotPasswordActor.resolved"
                    },
                    {
                      actions: "setSignInStep",
                      target: "#forgotPasswordActor.resolved"
                    }
                  ],
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: ({ step }) => ({ step })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      handleResetPassword({ username }) {
        return services.handleForgotPassword({ username });
      },
      handleConfirmResetPassword({ formValues, username }) {
        const { confirmation_code: confirmationCode, password: newPassword } = formValues;
        return services.handleForgotPasswordSubmit({
          confirmationCode,
          newPassword,
          username
        });
      },
      validateFields(context) {
        return runValidators(context.formValues, context.touched, context.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/utils.mjs
var getFederatedSignInState = (target) => ({
  entry: ["sendUpdate", "clearError"],
  invoke: {
    src: "signInWithRedirect",
    onDone: { target },
    onError: { actions: "setRemoteError", target }
  }
});

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signIn.mjs
var handleSignInResponse = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: ["setMissingAttributes", "setNextSignInStep"],
      target: "#signInActor.forceChangePassword"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resendSignUpCode"
    },
    {
      actions: [
        "setChallengeName",
        "setMissingAttributes",
        "setNextSignInStep",
        "setTotpSecretCode"
      ],
      target: "#signInActor.init"
    }
  ],
  onError: { actions: "setRemoteError", target: "edit" }
};
var handleFetchUserAttributesResponse = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signInActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signInActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signInActor.resolved"
  }
};
function signInActor({ services }) {
  return createMachine({
    id: "signInActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldConfirmSignIn",
            target: "confirmSignIn"
          },
          {
            cond: "shouldSetupTotp",
            target: "setupTotp"
          },
          {
            cond: ({ step }) => step === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED",
            actions: "setActorDoneData",
            target: "forceChangePassword"
          },
          { target: "signIn" }
        ]
      },
      federatedSignIn: getFederatedSignInState("signIn"),
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...handleFetchUserAttributesResponse
        }
      },
      resendSignUpCode: {
        invoke: {
          src: "handleResendSignUpCode",
          onDone: {
            actions: "setCodeDeliveryDetails",
            target: "#signInActor.resolved"
          },
          onError: {
            actions: "setRemoteError",
            target: "#signInActor.signIn"
          }
        }
      },
      resetPassword: {
        invoke: {
          src: "resetPassword",
          onDone: [
            {
              actions: "setCodeDeliveryDetails",
              target: "#signInActor.resolved"
            }
          ],
          onError: { actions: ["setRemoteError", "sendUpdate"] }
        }
      },
      signIn: {
        initial: "edit",
        exit: "clearTouched",
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              CHANGE: { actions: "handleInput" },
              FEDERATED_SIGN_IN: { target: "#signInActor.federatedSignIn" },
              SUBMIT: { actions: "handleSubmit", target: "submit" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate", "setUsernameSignIn"],
            exit: "clearFormValues",
            invoke: { src: "handleSignIn", ...handleSignInResponse }
          }
        }
      },
      confirmSignIn: {
        initial: "edit",
        exit: [
          "clearChallengeName",
          "clearFormValues",
          "clearError",
          "clearTouched"
        ],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SIGN_IN: "#signInActor.signIn",
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmSignIn",
              ...handleSignInResponse
            }
          }
        }
      },
      forceChangePassword: {
        entry: "sendUpdate",
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              SIGN_IN: {
                actions: "setSignInStep",
                target: "#signInActor.resolved"
              },
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submit: {
            initial: "edit",
            entry: "clearError",
            states: {
              edit: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    actions: "clearValidationError",
                    target: "pending"
                  },
                  onError: { actions: "setFieldErrors", target: "edit" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["sendUpdate", "clearError"],
                invoke: {
                  src: "handleForceChangePassword",
                  ...handleSignInResponse
                }
              }
            }
          }
        }
      },
      setupTotp: {
        initial: "edit",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SIGN_IN: "#signInActor.signIn",
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["sendUpdate", "clearError"],
            invoke: { src: "confirmSignIn", ...handleSignInResponse }
          }
        }
      },
      resolved: {
        type: "final",
        data: (context) => ({
          codeDeliveryDetails: context.codeDeliveryDetails,
          remoteError: context.remoteError,
          step: context.step,
          unverifiedUserAttributes: context.unverifiedUserAttributes,
          username: context.username
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      async fetchUserAttributes() {
        return fetchUserAttributes();
      },
      resetPassword({ username }) {
        return resetPassword({ username });
      },
      handleResendSignUpCode({ username }) {
        return resendSignUpCode({ username });
      },
      handleSignIn({ formValues, username }) {
        const { password } = formValues;
        return services.handleSignIn({ username, password });
      },
      confirmSignIn({ formValues }) {
        const { confirmation_code: challengeResponse } = formValues;
        return services.handleConfirmSignIn({ challengeResponse });
      },
      async handleForceChangePassword({ formValues }) {
        let {
          password: challengeResponse,
          phone_number,
          country_code,
          // destructure and toss UI confirm_password field
          // to prevent error from sending to confirmSignIn
          confirm_password,
          ...userAttributes
        } = formValues;
        let phoneNumberWithCountryCode;
        if (phone_number) {
          phoneNumberWithCountryCode = `${country_code}${phone_number}`.replace(/[^A-Z0-9+]/gi, "");
          userAttributes = {
            ...userAttributes,
            phone_number: phoneNumberWithCountryCode
          };
        }
        const input2 = {
          challengeResponse,
          options: { userAttributes }
        };
        return confirmSignIn(input2);
      },
      signInWithRedirect(_, { data }) {
        return signInWithRedirect(data);
      },
      async validateFields(context) {
        return runValidators(context.formValues, context.touched, context.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signUp.mjs
var handleResetPasswordResponse = {
  onDone: [
    { actions: "setCodeDeliveryDetails", target: "#signUpActor.resolved" }
  ],
  onError: { actions: ["setRemoteError", "sendUpdate"] }
};
var handleAutoSignInResponse = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: "setNextSignInStep",
      target: "#signUpActor.resolved"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resendSignUpCode"
    },
    {
      actions: [
        "setNextSignInStep",
        "setChallengeName",
        "setMissingAttributes",
        "setTotpSecretCode"
      ],
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setRemoteError",
    target: "#signUpActor.resolved"
  }
};
var handleFetchUserAttributesResponse2 = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signUpActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signUpActor.resolved"
  }
};
function signUpActor({ services }) {
  return createMachine({
    id: "signUpActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          { cond: "shouldConfirmSignUp", target: "confirmSignUp" },
          { target: "signUp" }
        ]
      },
      autoSignIn: {
        tags: "pending",
        invoke: { src: "autoSignIn", ...handleAutoSignInResponse }
      },
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...handleFetchUserAttributesResponse2
        }
      },
      federatedSignIn: getFederatedSignInState("signUp"),
      resetPassword: {
        invoke: { src: "resetPassword", ...handleResetPasswordResponse }
      },
      resendSignUpCode: {
        tags: "pending",
        entry: "sendUpdate",
        exit: "sendUpdate",
        invoke: {
          src: "resendSignUpCode",
          onDone: {
            actions: ["setCodeDeliveryDetails", "sendUpdate"],
            target: "#signUpActor.confirmSignUp"
          },
          onError: [
            {
              cond: "isUserAlreadyConfirmed",
              target: "#signUpActor.resolved"
            },
            { actions: ["setRemoteError", "sendUpdate"] }
          ]
        }
      },
      signUp: {
        type: "parallel",
        exit: "clearTouched",
        on: {
          FEDERATED_SIGN_IN: { target: "federatedSignIn" }
        },
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    actions: "clearValidationError",
                    target: "valid"
                  },
                  onError: { actions: "setFieldErrors", target: "invalid" }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              BLUR: { actions: "handleBlur", target: ".pending" },
              CHANGE: { actions: "handleInput", target: ".pending" }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: ["sendUpdate"],
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    target: "handleSignUp",
                    actions: "clearValidationError"
                  },
                  onError: { actions: "setFieldErrors", target: "idle" }
                }
              },
              handleSignUp: {
                tags: "pending",
                entry: ["setUsernameSignUp", "clearError"],
                exit: "sendUpdate",
                invoke: {
                  src: "handleSignUp",
                  onDone: [
                    {
                      cond: "hasCompletedSignUp",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.resolved"
                    },
                    {
                      cond: "shouldAutoSignIn",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.autoSignIn"
                    },
                    {
                      actions: [
                        "setCodeDeliveryDetails",
                        "setNextSignUpStep"
                      ],
                      target: "#signUpActor.init"
                    }
                  ],
                  onError: {
                    actions: ["sendUpdate", "setRemoteError"],
                    target: "idle"
                  }
                }
              }
            }
          }
        }
      },
      confirmSignUp: {
        initial: "edit",
        entry: "sendUpdate",
        states: {
          edit: {
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" },
              RESEND: "#signUpActor.resendSignUpCode"
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmSignUp",
              onDone: [
                {
                  cond: "shouldAutoSignIn",
                  actions: ["setNextSignUpStep", "clearFormValues"],
                  target: "#signUpActor.autoSignIn"
                },
                {
                  actions: "setNextSignUpStep",
                  target: "#signUpActor.init"
                }
              ],
              onError: {
                actions: ["setRemoteError", "sendUpdate"],
                target: "edit"
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: (context) => ({
          challengeName: context.challengeName,
          missingAttributes: context.missingAttributes,
          remoteError: context.remoteError,
          step: context.step,
          totpSecretCode: context.totpSecretCode,
          username: context.username,
          unverifiedUserAttributes: context.unverifiedUserAttributes
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      autoSignIn() {
        return autoSignIn();
      },
      async fetchUserAttributes() {
        return fetchUserAttributes();
      },
      confirmSignUp({ formValues, username }) {
        const { confirmation_code: confirmationCode } = formValues;
        const input2 = { username, confirmationCode };
        return services.handleConfirmSignUp(input2);
      },
      resendSignUpCode({ username }) {
        return resendSignUpCode({ username });
      },
      signInWithRedirect(_, { data }) {
        return signInWithRedirect(data);
      },
      handleSignUp(context) {
        const { formValues, loginMechanisms, username } = context;
        const loginMechanism = loginMechanisms[0];
        const input2 = getSignUpInput(username, formValues, loginMechanism);
        return services.handleSignUp(input2);
      },
      async validateSignUp(context) {
        return runValidators(context.formValues, context.touched, context.passwordSettings, [
          // Validation of password
          services.validateFormPassword,
          // Validation for default form fields
          services.validateConfirmPassword,
          services.validatePreferredUsername,
          // Validation for any custom Sign Up fields
          services.validateCustomSignUp
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signOut.mjs
var signOutActor = () => {
  return createMachine({
    initial: "pending",
    id: "signOutActor",
    predictableActionArguments: true,
    states: {
      pending: {
        tags: "pending",
        invoke: {
          src: "signOut",
          onDone: "resolved",
          onError: "rejected"
        }
      },
      resolved: { type: "final" },
      rejected: { type: "final" }
    }
  }, {
    services: {
      signOut: () => signOut()
    }
  });
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/verifyUserAttributes.mjs
function verifyUserAttributesActor() {
  return createMachine({
    id: "verifyUserAttributesActor",
    initial: "selectUserAttributes",
    predictableActionArguments: true,
    states: {
      selectUserAttributes: {
        initial: "edit",
        exit: ["clearError", "clearTouched", "sendUpdate"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: { target: "#verifyUserAttributesActor.resolved" },
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "sendUserAttributeVerificationCode",
              onDone: {
                actions: [
                  "setSelectedUserAttribute",
                  "setCodeDeliveryDetails"
                ],
                target: "#verifyUserAttributesActor.confirmVerifyUserAttribute"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmVerifyUserAttribute: {
        initial: "edit",
        exit: ["clearError", "clearFormValues", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: "#verifyUserAttributesActor.resolved",
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmVerifyUserAttribute",
              onDone: {
                actions: [
                  "setConfirmAttributeCompleteStep",
                  "clearSelectedUserAttribute"
                ],
                target: "#verifyUserAttributesActor.resolved"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      resolved: { type: "final", data: ({ step }) => ({ step }) }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    services: {
      sendUserAttributeVerificationCode({ formValues: { unverifiedAttr } }) {
        const input2 = {
          userAttributeKey: unverifiedAttr
        };
        return sendUserAttributeVerificationCode(input2);
      },
      async confirmVerifyUserAttribute({ formValues: { confirmation_code: confirmationCode }, selectedUserAttribute }) {
        const input2 = {
          confirmationCode,
          userAttributeKey: selectedUserAttribute
        };
        return confirmUserAttribute(input2);
      },
      async validateFields(context) {
        return runValidators(context.formValues, context.touched, context.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/index.mjs
var getActorContext2 = (context, defaultStep) => {
  var _a2, _b, _c, _d, _e, _f;
  return {
    ...context.actorDoneData,
    step: ((_a2 = context == null ? void 0 : context.actorDoneData) == null ? void 0 : _a2.step) ?? defaultStep,
    // initialize empty objects on actor start
    formValues: {},
    touched: {},
    validationError: {},
    // values included on `context.config` that should be available in actors
    formFields: (_b = context.config) == null ? void 0 : _b.formFields,
    loginMechanisms: (_c = context.config) == null ? void 0 : _c.loginMechanisms,
    passwordSettings: (_d = context.config) == null ? void 0 : _d.passwordSettings,
    signUpAttributes: (_e = context.config) == null ? void 0 : _e.signUpAttributes,
    socialProviders: (_f = context.config) == null ? void 0 : _f.socialProviders
  };
};
var { choose: choose3, stop: stop3 } = actions_exports;
var stopActor = (machineId) => stop3(machineId);
var LEGACY_WAIT_CONFIG = {
  on: {
    INIT: {
      actions: "configure",
      target: "getConfig"
    },
    SIGN_OUT: "#authenticator.signOut"
  }
};
var NEXT_WAIT_CONFIG = {
  always: { actions: "configure", target: "getConfig" }
};
function createAuthenticatorMachine(options) {
  const { useNextWaitConfig, ...overrideConfigServices } = options ?? {};
  const initConfig = useNextWaitConfig ? NEXT_WAIT_CONFIG : LEGACY_WAIT_CONFIG;
  return createMachine({
    id: "authenticator",
    initial: "idle",
    context: {
      user: void 0,
      config: {},
      services: defaultServices,
      actorRef: void 0,
      hasSetup: false
    },
    predictableActionArguments: true,
    states: {
      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises
      idle: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: { actions: "setUser", target: "setup" },
          onError: { target: "setup" }
        }
      },
      setup: {
        initial: "initConfig",
        states: {
          initConfig,
          getConfig: {
            invoke: {
              src: "getAmplifyConfig",
              onDone: [
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  cond: "hasUser",
                  target: "#authenticator.authenticated"
                },
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  target: "goToInitialState"
                }
              ]
            }
          },
          goToInitialState: {
            always: [
              {
                cond: "isInitialStateSignUp",
                target: "#authenticator.signUpActor"
              },
              {
                cond: "isInitialStateResetPassword",
                target: "#authenticator.forgotPasswordActor"
              },
              { target: "#authenticator.signInActor" }
            ]
          }
        }
      },
      getCurrentUser: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: {
            actions: "setUser",
            target: "#authenticator.authenticated"
          },
          onError: { target: "#authenticator.setup" }
        }
      },
      signInActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignInActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signInActor")
          }
        },
        on: {
          FORGOT_PASSWORD: "forgotPasswordActor",
          SIGN_IN: "signInActor",
          SIGN_UP: "signUpActor",
          "done.invoke.signInActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isResetPasswordStep",
              actions: "setActorDoneData",
              target: "#authenticator.forgotPasswordActor"
            },
            {
              cond: "isConfirmSignUpStep",
              actions: "setActorDoneData",
              target: "#authenticator.signUpActor"
            }
          ]
        }
      },
      signUpActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignUpActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signUpActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.signUpActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isConfirmUserAttributeStep",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              actions: "setActorDoneData",
              target: "#authenticator.signInActor"
            }
          ]
        }
      },
      forgotPasswordActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnForgotPasswordActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("forgotPasswordActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.forgotPasswordActor": [
            { target: "#authenticator.signInActor" }
          ]
        }
      },
      verifyUserAttributesActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnVerifyUserAttributesActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("verifyUserAttributesActor")
          }
        },
        on: {
          "done.invoke.verifyUserAttributesActor": [
            {
              actions: "setActorDoneData",
              target: "#authenticator.getCurrentUser"
            }
          ]
        }
      },
      authenticated: {
        initial: "idle",
        states: {
          idle: { on: { TOKEN_REFRESH: "refreshUser" } },
          refreshUser: {
            invoke: {
              src: "#authenticator.getCurrentUser",
              onDone: { actions: "setUser", target: "idle" },
              onError: { target: "#authenticator.signOut" }
            }
          }
        },
        on: { SIGN_OUT: "signOut" }
      },
      signOut: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignOutActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signOutActor")
          }
        },
        on: {
          "done.invoke.signOutActor": {
            actions: "clearUser",
            target: "setup.getConfig"
          }
        }
      }
    },
    on: {
      SIGN_IN_WITH_REDIRECT: { target: "#authenticator.getCurrentUser" },
      CHANGE: { actions: "forwardToActor" },
      BLUR: { actions: "forwardToActor" },
      SUBMIT: { actions: "forwardToActor" },
      FEDERATED_SIGN_IN: { actions: "forwardToActor" },
      RESEND: { actions: "forwardToActor" },
      SIGN_IN: { actions: "forwardToActor" },
      SKIP: { actions: "forwardToActor" }
    }
  }, {
    actions: {
      ...ACTIONS,
      forwardToActor: choose3([
        { cond: "hasActor", actions: forwardTo2(({ actorRef }) => actorRef) }
      ]),
      setActorDoneData: assign3({
        actorDoneData: (context, event2) => ({
          challengeName: event2.data.challengeName,
          codeDeliveryDetails: event2.data.codeDeliveryDetails,
          missingAttributes: event2.data.missingAttributes,
          remoteError: event2.data.remoteError,
          username: event2.data.username,
          step: event2.data.step,
          totpSecretCode: event2.data.totpSecretCode,
          unverifiedUserAttributes: event2.data.unverifiedUserAttributes
        })
      }),
      applyAmplifyConfig: assign3({
        config(context, { data: cliConfig }) {
          const { loginMechanisms = cliConfig.loginMechanisms ?? [], signUpAttributes = cliConfig.signUpAttributes ?? [], socialProviders = cliConfig.socialProviders ?? [], initialState, formFields: _formFields, passwordSettings = cliConfig.passwordFormat ?? {} } = context.config;
          if (loginMechanisms.length === 0) {
            loginMechanisms.push("username");
          }
          const formFields = convertFormFields(_formFields) ?? {};
          return {
            formFields,
            initialState,
            loginMechanisms,
            passwordSettings,
            signUpAttributes,
            socialProviders
          };
        }
      }),
      spawnSignInActor: assign3({
        actorRef: (context, _) => {
          const { services } = context;
          const actor = signInActor({ services }).withContext(getActorContext2(context, "SIGN_IN"));
          return spawn(actor, { name: "signInActor" });
        }
      }),
      spawnSignUpActor: assign3({
        actorRef: (context, _) => {
          const { services } = context;
          const actor = signUpActor({ services }).withContext(getActorContext2(context, "SIGN_UP"));
          return spawn(actor, { name: "signUpActor" });
        }
      }),
      spawnForgotPasswordActor: assign3({
        actorRef: (context, _) => {
          const { services } = context;
          const actor = forgotPasswordActor({ services }).withContext(getActorContext2(context, "FORGOT_PASSWORD"));
          return spawn(actor, { name: "forgotPasswordActor" });
        }
      }),
      spawnVerifyUserAttributesActor: assign3({
        actorRef: (context) => {
          const actor = verifyUserAttributesActor().withContext(getActorContext2(context));
          return spawn(actor, { name: "verifyUserAttributesActor" });
        }
      }),
      spawnSignOutActor: assign3({
        actorRef: (context) => {
          const actor = signOutActor().withContext({ user: context == null ? void 0 : context.user });
          return spawn(actor, { name: "signOutActor" });
        }
      }),
      configure: assign3((_, event2) => {
        const { services: customServices, ...config } = !isEmptyObject(overrideConfigServices) ? overrideConfigServices : event2.data ?? {};
        return {
          services: { ...defaultServices, ...customServices },
          config
        };
      }),
      setHasSetup: assign3({ hasSetup: true })
    },
    guards: {
      ...GUARDS,
      hasActor: ({ actorRef }) => !!actorRef,
      isInitialStateSignUp: ({ config }) => config.initialState === "signUp",
      isInitialStateResetPassword: ({ config }) => config.initialState === "forgotPassword",
      shouldSetup: ({ hasSetup }) => !hasSetup,
      hasUser: ({ user }) => {
        return !!user;
      }
    },
    services: {
      getAmplifyConfig: ({ services }) => services.getAmplifyConfig(),
      handleGetCurrentUser: ({ services }) => services.getCurrentUser()
    }
  });
}
function convertFormFields(formFields) {
  if (formFields) {
    Object.keys(formFields).forEach((component) => {
      Object.keys(formFields[component]).forEach((inputName) => {
        let ff = formFields[component][inputName];
        ff.required = ff.isRequired;
      });
    });
  }
  return formFields;
}

// node_modules/@aws-amplify/ui/dist/esm/types/primitives/componentClassName.mjs
var ComponentClassName = {
  Accordion: "amplify-accordion",
  AccordionItem: "amplify-accordion__item",
  AccordionItemTrigger: "amplify-accordion__item__trigger",
  AccordionItemContent: "amplify-accordion__item__content",
  AccordionItemIcon: "amplify-accordion__item__icon",
  Alert: "amplify-alert",
  AlertIcon: "amplify-alert__icon",
  AlertHeading: "amplify-alert__heading",
  AlertBody: "amplify-alert__body",
  AlertDismiss: "amplify-alert__dismiss",
  Autocomplete: "amplify-autocomplete",
  AutocompleteMenu: "amplify-autocomplete__menu",
  AutocompleteMenuEmpty: "amplify-autocomplete__menu--empty",
  AutocompleteMenuFooter: "amplify-autocomplete__menu__footer",
  AutocompleteMenuHeader: "amplify-autocomplete__menu__header",
  AutocompleteMenuLoading: "amplify-autocomplete__menu--loading",
  AutocompleteMenuOption: "amplify-autocomplete__menu__option",
  AutocompleteMenuOptions: "amplify-autocomplete__menu__options",
  Badge: "amplify-badge",
  Breadcrumbs: "amplify-breadcrumbs",
  BreadcrumbsList: "amplify-breadcrumbs__list",
  BreadcrumbsItem: "amplify-breadcrumbs__item",
  BreadcrumbsSeparator: "amplify-breadcrumbs__separator",
  BreadcrumbsLink: "amplify-breadcrumbs__link",
  Button: "amplify-button",
  ButtonGroup: "amplify-buttongroup",
  ButtonLoaderWrapper: "amplify-button__loader-wrapper",
  Card: "amplify-card",
  Checkbox: "amplify-checkbox",
  CheckboxButton: "amplify-checkbox__button",
  CheckboxIcon: "amplify-checkbox__icon",
  CheckboxInput: "amplify-checkbox__input",
  CheckboxLabel: "amplify-checkbox__label",
  CheckboxField: "amplify-checkboxfield",
  Collection: "amplify-collection",
  CollectionItems: "amplify-collection-items",
  CollectionSearch: "amplify-collection-search",
  CollectionPagination: "amplify-collection-pagination",
  CountryCodeSelect: "amplify-countrycodeselect",
  DialCodeSelect: "amplify-dialcodeselect",
  Divider: "amplify-divider",
  DividerLabel: "amplify-divider--label",
  DropZone: "amplify-dropzone",
  Field: "amplify-field",
  FieldDescription: "amplify-field__description",
  FieldErrorMessage: "amplify-field__error-message",
  FieldGroup: "amplify-field-group",
  FieldGroupControl: "amplify-field-group__control",
  FieldGroupOuterEnd: "amplify-field-group__outer-end",
  FieldGroupOuterStart: "amplify-field-group__outer-start",
  FieldGroupInnerEnd: "amplify-field-group__inner-end",
  FieldGroupInnerStart: "amplify-field-group__inner-start",
  FieldGroupIcon: "amplify-field-group__icon",
  FieldGroupIconButton: "amplify-field-group__icon-button",
  FieldGroupHasInnerEnd: "amplify-field-group--has-inner-end",
  FieldGroupHasInnerStart: "amplify-field-group--has-inner-start",
  FieldShowPassword: "amplify-field__show-password",
  FieldGroupFieldWrapper: "amplify-field-group__field-wrapper",
  Fieldset: "amplify-fieldset",
  FieldsetLegend: "amplify-fieldset__legend",
  Flex: "amplify-flex",
  Grid: "amplify-grid",
  Heading: "amplify-heading",
  HighlightMatch: "amplify-highlightmatch",
  HighlightMatchHighlighted: "amplify-highlightmatch__highlighted",
  Icon: "amplify-icon",
  Image: "amplify-image",
  Input: "amplify-input",
  Label: "amplify-label",
  Link: "amplify-link",
  Loader: "amplify-loader",
  LoaderLabel: "amplify-loader__label",
  MenuContent: "amplify-menu__content",
  MenuItem: "amplify-menu__content__item",
  MenuTrigger: "amplify-menu__trigger",
  MenuWrapper: "amplify-menu__wrapper",
  Message: "amplify-message",
  MessageIcon: "amplify-message__icon",
  MessageHeading: "amplify-message__heading",
  MessageBody: "amplify-message__body",
  MessageContent: "amplify-message__content",
  MessageDismiss: "amplify-message__dismiss",
  Pagination: "amplify-pagination",
  PaginationItem: "amplify-pagination__item",
  PasswordField: "amplify-passwordfield",
  PhoneNumberField: "amplify-phonenumberfield",
  Placeholder: "amplify-placeholder",
  Radio: "amplify-radio",
  RadioButton: "amplify-radio__button",
  RadioInput: "amplify-radio__input",
  RadioLabel: "amplify-radio__label",
  RadioGroupField: "amplify-radiogroupfield",
  RadioGroup: "amplify-radiogroup",
  Rating: "amplify-rating",
  RatingItem: "amplify-rating__item",
  RatingIcon: "amplify-rating__icon",
  RatingLabel: "amplify-rating__label",
  ScrollView: "amplify-scrollview",
  SearchField: "amplify-searchfield",
  SearchFieldClear: "amplify-searchfield__clear",
  SearchFieldSearch: "amplify-searchfield__search",
  Select: "amplify-select",
  SelectField: "amplify-selectfield",
  SelectWrapper: "amplify-select__wrapper",
  SelectIcon: "amplify-select__icon",
  SliderField: "amplify-sliderfield",
  SliderFieldGroup: "amplify-sliderfield__group",
  SliderFieldLabel: "amplify-sliderfield__label",
  SliderFieldRange: "amplify-sliderfield__range",
  SliderFieldRoot: "amplify-sliderfield__root",
  SliderFieldThumb: "amplify-sliderfield__thumb",
  SliderFieldTrack: "amplify-sliderfield__track",
  StepperField: "amplify-stepperfield",
  StepperFieldButtonDecrease: "amplify-stepperfield__button--decrease",
  StepperFieldButtonIncrease: "amplify-stepperfield__button--increase",
  StepperFieldInput: "amplify-stepperfield__input",
  StorageImage: "amplify-storageimage",
  StorageManager: "amplify-storagemanager",
  StorageManagerDropZone: "amplify-storagemanager__dropzone",
  StorageManagerDropZoneIcon: "amplify-storagemanager__dropzone__icon",
  StorageManagerDropZoneText: "amplify-storagemanager__dropzone__text",
  StorageManagerFilePicker: "amplify-storagemanager__file__picker",
  StorageManagerFile: "amplify-storagemanager__file",
  StorageManagerFileWrapper: "amplify-storagemanager__file__wrapper",
  StorageManagerFileList: "amplify-storagemanager__file__list",
  StorageManagerFileName: "amplify-storagemanager__file__name",
  StorageManagerFileSize: "amplify-storagemanager__file__size",
  StorageManagerFileInfo: "amplify-storagemanager__file__info",
  StorageManagerFileImage: "amplify-storagemanager__file__image",
  StorageManagerFileMain: "amplify-storagemanager__file__main",
  StorageManagerFileStatus: "amplify-storagemanager__file__status",
  StorageManagerLoader: "amplify-storagemanager__loader",
  StorageManagerPreviewer: "amplify-storagemanager__previewer",
  StorageManagerPreviewerText: "amplify-storagemanager__previewer__text",
  StorageManagerPreviewerActions: "amplify-storagemanager__previewer__actions",
  StorageManagerPreviewerFooter: "amplify-storagemanager__previewer__footer",
  SwitchField: "amplify-switchfield",
  SwitchLabel: "amplify-switch__label",
  SwitchThumb: "amplify-switch__thumb",
  SwitchTrack: "amplify-switch__track",
  SwitchWrapper: "amplify-switch__wrapper",
  Table: "amplify-table",
  TableCaption: "amplify-table__caption",
  TableBody: "amplify-table__body",
  TableTd: "amplify-table__td",
  TableTh: "amplify-table__th",
  TableFoot: "amplify-table__foot",
  TableHead: "amplify-table__head",
  TableRow: "amplify-table__row",
  Tabs: "amplify-tabs",
  TabsList: "amplify-tabs__list",
  TabsItem: "amplify-tabs__item",
  TabsPanel: "amplify-tabs__panel",
  Text: "amplify-text",
  Textarea: "amplify-textarea",
  TextAreaField: "amplify-textareafield",
  TextField: "amplify-textfield",
  ToggleButton: "amplify-togglebutton",
  ToggleButtonGroup: "amplify-togglebuttongroup",
  VisuallyHidden: "amplify-visually-hidden"
};

// node_modules/@aws-amplify/ui/dist/esm/utils/setUserAgent/setUserAgent.mjs
var setUserAgent = ({ componentName, packageName, version }) => {
  const packageData = [`ui-${packageName}`, version];
  switch (componentName) {
    case "Authenticator": {
      setCustomUserAgent({
        ...AUTHENTICATOR_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "ChangePassword":
    case "DeleteUser": {
      setCustomUserAgent({
        ...ACCOUNT_SETTINGS_INPUT_BASE,
        additionalDetails: [["AccountSettings"], packageData]
      });
      break;
    }
    case "InAppMessaging": {
      setCustomUserAgent({
        ...IN_APP_MESSAGING_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "LocationSearch": {
      setCustomUserAgent({
        ...LOCATION_SEARCH_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "MapView": {
      setCustomUserAgent({
        ...MAP_VIEW_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "StorageManager": {
      setCustomUserAgent({
        ...STORAGE_MANAGER_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
  }
  return noop;
};

// node_modules/@aws-amplify/ui/dist/esm/utils/classNames.mjs
var classNames = (...args) => {
  const classes = [];
  for (const arg of args) {
    if (!arg) {
      continue;
    }
    if (isString(arg)) {
      classes.push(arg);
      continue;
    }
    if (typeof arg === "number") {
      classes.push(arg.toString());
      continue;
    }
    if (Array.isArray(arg)) {
      classes.push(classNames(...arg));
      continue;
    }
    if (isObject(arg)) {
      if (arg.toString !== Object.prototype.toString && arg.toString() !== "[object Object]") {
        classes.push(arg.toString());
        continue;
      }
      for (const key in arg) {
        if (has(arg, key) && arg[key]) {
          classes.push(key);
        }
      }
    }
  }
  return classes.join(" ");
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs
var import_react7 = __toESM(require_react(), 1);

// node_modules/@xstate/react/es/useMachine.js
var import_react3 = __toESM(require_react());
var import_with_selector = __toESM(require_with_selector());

// node_modules/@xstate/react/es/useInterpret.js
var import_react2 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react = __toESM(require_react());
var index = import_react.useLayoutEffect;
var use_isomorphic_layout_effect_browser_esm_default = index;

// node_modules/@xstate/react/es/useConstant.js
var React = __toESM(require_react());
function useConstant(fn) {
  var ref = React.useRef();
  if (!ref.current) {
    ref.current = { v: fn() };
  }
  return ref.current.v;
}

// node_modules/@xstate/react/es/useInterpret.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error3) {
    e = { error: error3 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function useIdleInterpreter(getMachine, options) {
  var machine = useConstant(function() {
    return typeof getMachine === "function" ? getMachine() : getMachine;
  });
  if (typeof getMachine !== "function") {
    var _a2 = __read2((0, import_react2.useState)(machine), 1), initialMachine = _a2[0];
    if (getMachine !== initialMachine) {
      console.warn("Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\nPlease make sure that you pass the same Machine as argument each time.");
    }
  }
  var context = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = __rest2(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
  var service = useConstant(function() {
    var machineConfig = {
      context,
      guards,
      actions,
      activities,
      services,
      delays
    };
    var machineWithConfig = machine.withConfig(machineConfig, function() {
      return __assign3(__assign3({}, machine.context), context);
    });
    return interpret(machineWithConfig, interpreterOptions);
  });
  use_isomorphic_layout_effect_browser_esm_default(function() {
    Object.assign(service.machine.options.actions, actions);
    Object.assign(service.machine.options.guards, guards);
    Object.assign(service.machine.options.activities, activities);
    Object.assign(service.machine.options.services, services);
    Object.assign(service.machine.options.delays, delays);
  }, [actions, guards, activities, services, delays]);
  return service;
}
function useInterpret(getMachine) {
  var _a2 = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    _a2[_i - 1] = arguments[_i];
  }
  var _b = __read2(_a2, 2), _c = _b[0], options = _c === void 0 ? {} : _c, observerOrListener = _b[1];
  var service = useIdleInterpreter(getMachine, options);
  (0, import_react2.useEffect)(function() {
    if (!observerOrListener) {
      return;
    }
    var sub = service.subscribe(toObserver(observerOrListener));
    return function() {
      sub.unsubscribe();
    };
  }, [observerOrListener]);
  (0, import_react2.useEffect)(function() {
    var rehydratedState = options.state;
    service.start(rehydratedState ? State.create(rehydratedState) : void 0);
    return function() {
      service.stop();
      service.status = InterpreterStatus.NotStarted;
    };
  }, []);
  return service;
}

// node_modules/@xstate/react/es/utils.js
function getServiceSnapshot(service) {
  return service.status !== 0 ? service.getSnapshot() : service.machine.initialState;
}
function isService(actor) {
  return "state" in actor && "machine" in actor;
}

// node_modules/@xstate/react/es/useActor.js
var import_react4 = __toESM(require_react());
var import_with_selector2 = __toESM(require_with_selector());
function isActorWithState(actorRef) {
  return "state" in actorRef;
}

// node_modules/@xstate/react/es/useSelector.js
var import_react5 = __toESM(require_react());
var import_with_selector3 = __toESM(require_with_selector());
var defaultCompare = function(a, b) {
  return a === b;
};
var defaultGetSnapshot = function(a, initialStateCacheRef) {
  if (isService(a)) {
    if (a.status === 0 && initialStateCacheRef.current) {
      return initialStateCacheRef.current;
    }
    var snapshot = getServiceSnapshot(a);
    initialStateCacheRef.current = a.status === 0 ? snapshot : null;
    return snapshot;
  }
  return isActorWithState(a) ? a.state : void 0;
};
function useSelector(actor, selector, compare, getSnapshot) {
  if (compare === void 0) {
    compare = defaultCompare;
  }
  var initialStateCacheRef = (0, import_react5.useRef)(null);
  var subscribe = (0, import_react5.useCallback)(function(handleStoreChange) {
    var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;
    return unsubscribe;
  }, [actor]);
  var boundGetSnapshot = (0, import_react5.useCallback)(function() {
    if (getSnapshot) {
      return getSnapshot(actor);
    }
    return defaultGetSnapshot(actor, initialStateCacheRef);
  }, [actor, getSnapshot]);
  var selectedSnapshot = (0, import_with_selector3.useSyncExternalStoreWithSelector)(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);
  return selectedSnapshot;
}

// node_modules/@xstate/react/es/createActorContext.js
var React2 = __toESM(require_react());

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorContext.mjs
var import_react6 = __toESM(require_react(), 1);
var AuthenticatorContext = import_react6.default.createContext(null);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/constants.mjs
var USE_AUTHENTICATOR_ERROR = "`useAuthenticator` must be used inside an `Authenticator.Provider`.";

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/constants.mjs
var COMPONENT_ROUTE_KEYS = [
  "confirmResetPassword",
  "confirmSignIn",
  "confirmSignUp",
  "confirmVerifyUser",
  "forceNewPassword",
  "forgotPassword",
  "setupTotp",
  "signIn",
  "signUp",
  "verifyUser"
];

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/utils.mjs
var isComponentRouteKey = (route) => COMPONENT_ROUTE_KEYS.some((componentRoute) => componentRoute === route);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs
var defaultComparator = () => false;
function areSelectorDepsEqual(currentDeps, nextDeps) {
  if (currentDeps.length !== nextDeps.length) {
    return false;
  }
  return currentDeps.every((currentDep, index2) => {
    const nextDep = nextDeps[index2];
    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {
      return true;
    }
    return currentDep === nextDep;
  });
}
var getComparator = (selector) => (currentFacade, nextFacade) => {
  const currentSelectorDeps = selector(currentFacade);
  const nextSelectorDeps = selector(nextFacade);
  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);
};
var getQRFields = (state) => {
  var _a2, _b, _c;
  return {
    ...(_c = (_b = (_a2 = getActorContext(state)) == null ? void 0 : _a2.formFields) == null ? void 0 : _b.setupTotp) == null ? void 0 : _c.QR
  };
};
var flattenFormFields = (fields) => fields.flatMap(([name, options]) => ({ name, ...options }));
var convertContactMethodsToFields = (unverifiedUserAttributes) => {
  return unverifiedUserAttributes && Object.entries(unverifiedUserAttributes).map(([name, value]) => {
    const valueIsString = isString(value);
    if (!valueIsString || !name) {
      return {};
    }
    return { name, label: value, type: "radio", value };
  });
};
var getMachineFields = (route, state, unverifiedUserAttributes) => {
  if (isComponentRouteKey(route)) {
    return route === "verifyUser" ? convertContactMethodsToFields(unverifiedUserAttributes) : flattenFormFields(getSortedFormFields(route, state));
  }
  return [];
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs
function useAuthenticator(selector) {
  const context = import_react7.default.useContext(AuthenticatorContext);
  if (!context) {
    throw new Error(USE_AUTHENTICATOR_ERROR);
  }
  const { service } = context;
  const { send: send3 } = service;
  const xstateSelector = (0, import_react7.useCallback)((state) => ({ ...getServiceFacade({ send: send3, state }) }), [send3]);
  const comparator = selector ? getComparator(selector) : defaultComparator;
  const { authStatus } = context;
  const facade = useSelector(service, xstateSelector, comparator);
  const { route, totpSecretCode, unverifiedUserAttributes, user, ...rest } = facade;
  const serviceSnapshot = service.getSnapshot();
  const QRFields = route === "setupTotp" ? getQRFields(serviceSnapshot) : null;
  const fields = getMachineFields(route, serviceSnapshot, unverifiedUserAttributes);
  return {
    ...rest,
    authStatus,
    route,
    totpSecretCode,
    unverifiedUserAttributes,
    user,
    /** @deprecated For internal use only */
    fields,
    QRFields
  };
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs
var import_react9 = __toESM(require_react(), 1);
var createHubHandler = (options) => (data, service) => {
  defaultAuthHubHandler(data, service, options);
};
function AuthenticatorProvider({ children: children2 }) {
  const [authStatus, setAuthStatus] = import_react9.default.useState("configuring");
  import_react9.default.useEffect(() => {
    getCurrentUser().then(() => {
      setAuthStatus("authenticated");
    }).catch(() => {
      setAuthStatus("unauthenticated");
    });
  }, []);
  const parentProviderVal = (0, import_react9.useContext)(AuthenticatorContext);
  const service = useInterpret(createAuthenticatorMachine);
  const value = (0, import_react9.useMemo)(() => !parentProviderVal ? { authStatus, service } : parentProviderVal, [authStatus, parentProviderVal, service]);
  const { service: activeService } = value;
  (0, import_react9.useEffect)(() => {
    const onSignIn = () => {
      setAuthStatus("authenticated");
    };
    const onSignOut = () => {
      setAuthStatus("unauthenticated");
    };
    const unsubscribe = listenToAuthHub(activeService, createHubHandler({ onSignIn, onSignOut }));
    return unsubscribe;
  }, [activeService]);
  return import_react9.default.createElement(AuthenticatorContext.Provider, { value }, children2);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/utils.mjs
var import_react13 = __toESM(require_react(), 1);

// node_modules/react-hook-form/dist/index.esm.mjs
var import_react11 = __toESM(require_react(), 1);
var isCheckBoxInput = (element) => element.type === "checkbox";
var isDateObject = (value) => value instanceof Date;
var isNullOrUndefined = (value) => value == null;
var isObjectType = (value) => typeof value === "object";
var isObject2 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
var getEventValue = (event2) => isObject2(event2) && event2.target ? isCheckBoxInput(event2.target) ? event2.target.checked : event2.target.value : event2;
var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
var isPlainObject = (tempObject) => {
  const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
  return isObject2(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
};
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
function cloneObject(data) {
  let copy2;
  const isArray3 = Array.isArray(data);
  if (data instanceof Date) {
    copy2 = new Date(data);
  } else if (data instanceof Set) {
    copy2 = new Set(data);
  } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray3 || isObject2(data))) {
    copy2 = isArray3 ? [] : {};
    if (!isArray3 && !isPlainObject(data)) {
      copy2 = data;
    } else {
      for (const key in data) {
        if (data.hasOwnProperty(key)) {
          copy2[key] = cloneObject(data[key]);
        }
      }
    }
  } else {
    return data;
  }
  return copy2;
}
var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
var isUndefined2 = (val) => val === void 0;
var get = (object, path2, defaultValue) => {
  if (!path2 || !isObject2(object)) {
    return defaultValue;
  }
  const result = compact(path2.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
  return isUndefined2(result) || result === object ? isUndefined2(object[path2]) ? defaultValue : object[path2] : result;
};
var isBoolean = (value) => typeof value === "boolean";
var EVENTS = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
};
var VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
var INPUT_VALIDATION_RULES = {
  max: "max",
  min: "min",
  maxLength: "maxLength",
  minLength: "minLength",
  pattern: "pattern",
  required: "required",
  validate: "validate"
};
var HookFormContext = import_react11.default.createContext(null);
var FormProvider = (props) => {
  const { children: children2, ...data } = props;
  return import_react11.default.createElement(HookFormContext.Provider, { value: data }, children2);
};
var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
  const result = {
    defaultValues: control._defaultValues
  };
  for (const key in formState) {
    Object.defineProperty(result, key, {
      get: () => {
        const _key = key;
        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
        }
        localProxyFormState && (localProxyFormState[_key] = true);
        return formState[_key];
      }
    });
  }
  return result;
};
var isEmptyObject2 = (value) => isObject2(value) && !Object.keys(value).length;
var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
  updateFormState(formStateData);
  const { name, ...formState } = formStateData;
  return isEmptyObject2(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
};
var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
function useSubscribe(props) {
  const _props = import_react11.default.useRef(props);
  _props.current = props;
  import_react11.default.useEffect(() => {
    const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
      next: _props.current.next
    });
    return () => {
      subscription && subscription.unsubscribe();
    };
  }, [props.disabled]);
}
var isString3 = (value) => typeof value === "string";
var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
  if (isString3(names)) {
    isGlobal && _names.watch.add(names);
    return get(formValues, names, defaultValue);
  }
  if (Array.isArray(names)) {
    return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
  }
  isGlobal && (_names.watchAll = true);
  return formValues;
};
var isKey = (value) => /^\w*$/.test(value);
var stringToPath = (input2) => compact(input2.replace(/["|']|\]/g, "").split(/\.|\[/));
var set = (object, path2, value) => {
  let index2 = -1;
  const tempPath = isKey(path2) ? [path2] : stringToPath(path2);
  const length = tempPath.length;
  const lastIndex = length - 1;
  while (++index2 < length) {
    const key = tempPath[index2];
    let newValue = value;
    if (index2 !== lastIndex) {
      const objValue = object[key];
      newValue = isObject2(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
    }
    object[key] = newValue;
    object = object[key];
  }
  return object;
};
var appendErrors = (name, validateAllFieldCriteria, errors, type, message2) => validateAllFieldCriteria ? {
  ...errors[name],
  types: {
    ...errors[name] && errors[name].types ? errors[name].types : {},
    [type]: message2 || true
  }
} : {};
var getValidationModes = (mode) => ({
  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
  isOnBlur: mode === VALIDATION_MODE.onBlur,
  isOnChange: mode === VALIDATION_MODE.onChange,
  isOnAll: mode === VALIDATION_MODE.all,
  isOnTouch: mode === VALIDATION_MODE.onTouched
});
var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
var iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
  for (const key of fieldsNames || Object.keys(fields)) {
    const field2 = get(fields, key);
    if (field2) {
      const { _f, ...currentField } = field2;
      if (_f) {
        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
          break;
        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
          break;
        } else {
          iterateFieldsByAction(currentField, action);
        }
      } else if (isObject2(currentField)) {
        iterateFieldsByAction(currentField, action);
      }
    }
  }
};
var updateFieldArrayRootError = (errors, error3, name) => {
  const fieldArrayErrors = compact(get(errors, name));
  set(fieldArrayErrors, "root", error3[name]);
  set(errors, name, fieldArrayErrors);
  return errors;
};
var isFileInput = (element) => element.type === "file";
var isFunction3 = (value) => typeof value === "function";
var isHTMLElement = (value) => {
  if (!isWeb) {
    return false;
  }
  const owner = value ? value.ownerDocument : 0;
  return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
};
var isMessage = (value) => isString3(value);
var isRadioInput = (element) => element.type === "radio";
var isRegex = (value) => value instanceof RegExp;
var defaultResult = {
  value: false,
  isValid: false
};
var validResult = { value: true, isValid: true };
var getCheckboxValue = (options) => {
  if (Array.isArray(options)) {
    if (options.length > 1) {
      const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
      return { value: values, isValid: !!values.length };
    }
    return options[0].checked && !options[0].disabled ? (
      // @ts-expect-error expected to work in the browser
      options[0].attributes && !isUndefined2(options[0].attributes.value) ? isUndefined2(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
    ) : defaultResult;
  }
  return defaultResult;
};
var defaultReturn = {
  isValid: false,
  value: null
};
var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
  isValid: true,
  value: option.value
} : previous, defaultReturn) : defaultReturn;
function getValidateError(result, ref, type = "validate") {
  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
    return {
      type,
      message: isMessage(result) ? result : "",
      ref
    };
  }
}
var getValueAndMessage = (validationData) => isObject2(validationData) && !isRegex(validationData) ? validationData : {
  value: validationData,
  message: ""
};
var validateField = async (field2, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
  const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled } = field2._f;
  const inputValue = get(formValues, name);
  if (!mount || disabled) {
    return {};
  }
  const inputRef = refs ? refs[0] : ref;
  const setCustomValidity = (message2) => {
    if (shouldUseNativeValidation && inputRef.reportValidity) {
      inputRef.setCustomValidity(isBoolean(message2) ? "" : message2 || "");
      inputRef.reportValidity();
    }
  };
  const error3 = {};
  const isRadio = isRadioInput(ref);
  const isCheckBox = isCheckBoxInput(ref);
  const isRadioOrCheckbox2 = isRadio || isCheckBox;
  const isEmpty2 = (valueAsNumber || isFileInput(ref)) && isUndefined2(ref.value) && isUndefined2(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error3);
  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
    const message2 = exceedMax ? maxLengthMessage : minLengthMessage;
    error3[name] = {
      type: exceedMax ? maxType : minType,
      message: message2,
      ref,
      ...appendErrorsCurry(exceedMax ? maxType : minType, message2)
    };
  };
  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty2 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
    const { value, message: message2 } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
    if (value) {
      error3[name] = {
        type: INPUT_VALIDATION_RULES.required,
        message: message2,
        ref: inputRef,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message2)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message2);
        return error3;
      }
    }
  }
  if (!isEmpty2 && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {
    let exceedMax;
    let exceedMin;
    const maxOutput = getValueAndMessage(max);
    const minOutput = getValueAndMessage(min);
    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
      if (!isNullOrUndefined(maxOutput.value)) {
        exceedMax = valueNumber > maxOutput.value;
      }
      if (!isNullOrUndefined(minOutput.value)) {
        exceedMin = valueNumber < minOutput.value;
      }
    } else {
      const valueDate = ref.valueAsDate || new Date(inputValue);
      const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
      const isTime = ref.type == "time";
      const isWeek = ref.type == "week";
      if (isString3(maxOutput.value) && inputValue) {
        exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
      }
      if (isString3(minOutput.value) && inputValue) {
        exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
      }
    }
    if (exceedMax || exceedMin) {
      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error3[name].message);
        return error3;
      }
    }
  }
  if ((maxLength || minLength) && !isEmpty2 && (isString3(inputValue) || isFieldArray && Array.isArray(inputValue))) {
    const maxLengthOutput = getValueAndMessage(maxLength);
    const minLengthOutput = getValueAndMessage(minLength);
    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
    if (exceedMax || exceedMin) {
      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error3[name].message);
        return error3;
      }
    }
  }
  if (pattern && !isEmpty2 && isString3(inputValue)) {
    const { value: patternValue, message: message2 } = getValueAndMessage(pattern);
    if (isRegex(patternValue) && !inputValue.match(patternValue)) {
      error3[name] = {
        type: INPUT_VALIDATION_RULES.pattern,
        message: message2,
        ref,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message2)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message2);
        return error3;
      }
    }
  }
  if (validate) {
    if (isFunction3(validate)) {
      const result = await validate(inputValue, formValues);
      const validateError = getValidateError(result, inputRef);
      if (validateError) {
        error3[name] = {
          ...validateError,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(validateError.message);
          return error3;
        }
      }
    } else if (isObject2(validate)) {
      let validationResult = {};
      for (const key in validate) {
        if (!isEmptyObject2(validationResult) && !validateAllFieldCriteria) {
          break;
        }
        const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
        if (validateError) {
          validationResult = {
            ...validateError,
            ...appendErrorsCurry(key, validateError.message)
          };
          setCustomValidity(validateError.message);
          if (validateAllFieldCriteria) {
            error3[name] = validationResult;
          }
        }
      }
      if (!isEmptyObject2(validationResult)) {
        error3[name] = {
          ref: inputRef,
          ...validationResult
        };
        if (!validateAllFieldCriteria) {
          return error3;
        }
      }
    }
  }
  setCustomValidity(true);
  return error3;
};
function baseGet(object, updatePath) {
  const length = updatePath.slice(0, -1).length;
  let index2 = 0;
  while (index2 < length) {
    object = isUndefined2(object) ? index2++ : object[updatePath[index2++]];
  }
  return object;
}
function isEmptyArray2(obj) {
  for (const key in obj) {
    if (obj.hasOwnProperty(key) && !isUndefined2(obj[key])) {
      return false;
    }
  }
  return true;
}
function unset(object, path2) {
  const paths = Array.isArray(path2) ? path2 : isKey(path2) ? [path2] : stringToPath(path2);
  const childObject = paths.length === 1 ? object : baseGet(object, paths);
  const index2 = paths.length - 1;
  const key = paths[index2];
  if (childObject) {
    delete childObject[key];
  }
  if (index2 !== 0 && (isObject2(childObject) && isEmptyObject2(childObject) || Array.isArray(childObject) && isEmptyArray2(childObject))) {
    unset(object, paths.slice(0, -1));
  }
  return object;
}
var createSubject = () => {
  let _observers = [];
  const next = (value) => {
    for (const observer of _observers) {
      observer.next && observer.next(value);
    }
  };
  const subscribe = (observer) => {
    _observers.push(observer);
    return {
      unsubscribe: () => {
        _observers = _observers.filter((o) => o !== observer);
      }
    };
  };
  const unsubscribe = () => {
    _observers = [];
  };
  return {
    get observers() {
      return _observers;
    },
    next,
    subscribe,
    unsubscribe
  };
};
var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
function deepEqual(object1, object2) {
  if (isPrimitive(object1) || isPrimitive(object2)) {
    return object1 === object2;
  }
  if (isDateObject(object1) && isDateObject(object2)) {
    return object1.getTime() === object2.getTime();
  }
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    const val1 = object1[key];
    if (!keys2.includes(key)) {
      return false;
    }
    if (key !== "ref") {
      const val2 = object2[key];
      if (isDateObject(val1) && isDateObject(val2) || isObject2(val1) && isObject2(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
        return false;
      }
    }
  }
  return true;
}
var isMultipleSelect = (element) => element.type === `select-multiple`;
var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
var live = (ref) => isHTMLElement(ref) && ref.isConnected;
var objectHasFunction = (data) => {
  for (const key in data) {
    if (isFunction3(data[key])) {
      return true;
    }
  }
  return false;
};
function markFieldsDirty(data, fields = {}) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        fields[key] = Array.isArray(data[key]) ? [] : {};
        markFieldsDirty(data[key], fields[key]);
      } else if (!isNullOrUndefined(data[key])) {
        fields[key] = true;
      }
    }
  }
  return fields;
}
function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        if (isUndefined2(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
        } else {
          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
        }
      } else {
        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
      }
    }
  }
  return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined2(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString3(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
function getFieldValue(_f) {
  const ref = _f.ref;
  if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
    return;
  }
  if (isFileInput(ref)) {
    return ref.files;
  }
  if (isRadioInput(ref)) {
    return getRadioValue(_f.refs).value;
  }
  if (isMultipleSelect(ref)) {
    return [...ref.selectedOptions].map(({ value }) => value);
  }
  if (isCheckBoxInput(ref)) {
    return getCheckboxValue(_f.refs).value;
  }
  return getFieldValueAs(isUndefined2(ref.value) ? _f.ref.value : ref.value, _f);
}
var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
  const fields = {};
  for (const name of fieldsNames) {
    const field2 = get(_fields, name);
    field2 && set(fields, name, field2._f);
  }
  return {
    criteriaMode,
    names: [...fieldsNames],
    fields,
    shouldUseNativeValidation
  };
};
var getRuleValue = (rule) => isUndefined2(rule) ? rule : isRegex(rule) ? rule.source : isObject2(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
function schemaErrorLookup(errors, _fields, name) {
  const error3 = get(errors, name);
  if (error3 || isKey(name)) {
    return {
      error: error3,
      name
    };
  }
  const names = name.split(".");
  while (names.length) {
    const fieldName = names.join(".");
    const field2 = get(_fields, fieldName);
    const foundError = get(errors, fieldName);
    if (field2 && !Array.isArray(field2) && name !== fieldName) {
      return { name };
    }
    if (foundError && foundError.type) {
      return {
        name: fieldName,
        error: foundError
      };
    }
    names.pop();
  }
  return {
    name
  };
}
var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
  if (mode.isOnAll) {
    return false;
  } else if (!isSubmitted && mode.isOnTouch) {
    return !(isTouched || isBlurEvent);
  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
    return !isBlurEvent;
  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
    return isBlurEvent;
  }
  return true;
};
var unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);
var defaultOptions2 = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};
function createFormControl(props = {}) {
  let _options = {
    ...defaultOptions2,
    ...props
  };
  let _formState = {
    submitCount: 0,
    isDirty: false,
    isLoading: isFunction3(_options.defaultValues),
    isValidating: false,
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    touchedFields: {},
    dirtyFields: {},
    validatingFields: {},
    errors: _options.errors || {},
    disabled: _options.disabled || false
  };
  let _fields = {};
  let _defaultValues = isObject2(_options.defaultValues) || isObject2(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
  let _state = {
    action: false,
    mount: false,
    watch: false
  };
  let _names = {
    mount: /* @__PURE__ */ new Set(),
    unMount: /* @__PURE__ */ new Set(),
    array: /* @__PURE__ */ new Set(),
    watch: /* @__PURE__ */ new Set()
  };
  let delayErrorCallback;
  let timer = 0;
  const _proxyFormState = {
    isDirty: false,
    dirtyFields: false,
    validatingFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  };
  const _subjects = {
    values: createSubject(),
    array: createSubject(),
    state: createSubject()
  };
  const validationModeBeforeSubmit = getValidationModes(_options.mode);
  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
  const debounce = (callback) => (wait) => {
    clearTimeout(timer);
    timer = setTimeout(callback, wait);
  };
  const _updateValid = async (shouldUpdateValid) => {
    if (_proxyFormState.isValid || shouldUpdateValid) {
      const isValid = _options.resolver ? isEmptyObject2((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
      if (isValid !== _formState.isValid) {
        _subjects.state.next({
          isValid
        });
      }
    }
  };
  const _updateIsValidating = (names, isValidating) => {
    if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {
      (names || Array.from(_names.mount)).forEach((name) => {
        if (name) {
          isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
        }
      });
      _subjects.state.next({
        validatingFields: _formState.validatingFields,
        isValidating: !isEmptyObject2(_formState.validatingFields)
      });
    }
  };
  const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
    if (args && method) {
      _state.action = true;
      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
        const fieldValues = method(get(_fields, name), args.argA, args.argB);
        shouldSetValues && set(_fields, name, fieldValues);
      }
      if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {
        const errors = method(get(_formState.errors, name), args.argA, args.argB);
        shouldSetValues && set(_formState.errors, name, errors);
        unsetEmptyArray(_formState.errors, name);
      }
      if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {
        const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
        shouldSetValues && set(_formState.touchedFields, name, touchedFields);
      }
      if (_proxyFormState.dirtyFields) {
        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
      }
      _subjects.state.next({
        name,
        isDirty: _getDirty(name, values),
        dirtyFields: _formState.dirtyFields,
        errors: _formState.errors,
        isValid: _formState.isValid
      });
    } else {
      set(_formValues, name, values);
    }
  };
  const updateErrors = (name, error3) => {
    set(_formState.errors, name, error3);
    _subjects.state.next({
      errors: _formState.errors
    });
  };
  const _setErrors = (errors) => {
    _formState.errors = errors;
    _subjects.state.next({
      errors: _formState.errors,
      isValid: false
    });
  };
  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
    const field2 = get(_fields, name);
    if (field2) {
      const defaultValue = get(_formValues, name, isUndefined2(value) ? get(_defaultValues, name) : value);
      isUndefined2(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field2._f)) : setFieldValue(name, defaultValue);
      _state.mount && _updateValid();
    }
  };
  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
    let shouldUpdateField = false;
    let isPreviousDirty = false;
    const output = {
      name
    };
    const disabledField = !!(get(_fields, name) && get(_fields, name)._f.disabled);
    if (!isBlurEvent || shouldDirty) {
      if (_proxyFormState.isDirty) {
        isPreviousDirty = _formState.isDirty;
        _formState.isDirty = output.isDirty = _getDirty();
        shouldUpdateField = isPreviousDirty !== output.isDirty;
      }
      const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);
      isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));
      isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
      output.dirtyFields = _formState.dirtyFields;
      shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
    }
    if (isBlurEvent) {
      const isPreviousFieldTouched = get(_formState.touchedFields, name);
      if (!isPreviousFieldTouched) {
        set(_formState.touchedFields, name, isBlurEvent);
        output.touchedFields = _formState.touchedFields;
        shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
      }
    }
    shouldUpdateField && shouldRender && _subjects.state.next(output);
    return shouldUpdateField ? output : {};
  };
  const shouldRenderByError = (name, isValid, error3, fieldState) => {
    const previousFieldError = get(_formState.errors, name);
    const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
    if (props.delayError && error3) {
      delayErrorCallback = debounce(() => updateErrors(name, error3));
      delayErrorCallback(props.delayError);
    } else {
      clearTimeout(timer);
      delayErrorCallback = null;
      error3 ? set(_formState.errors, name, error3) : unset(_formState.errors, name);
    }
    if ((error3 ? !deepEqual(previousFieldError, error3) : previousFieldError) || !isEmptyObject2(fieldState) || shouldUpdateValid) {
      const updatedFormState = {
        ...fieldState,
        ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
        errors: _formState.errors,
        name
      };
      _formState = {
        ..._formState,
        ...updatedFormState
      };
      _subjects.state.next(updatedFormState);
    }
  };
  const _executeSchema = async (name) => {
    _updateIsValidating(name, true);
    const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    _updateIsValidating(name);
    return result;
  };
  const executeSchemaAndUpdateState = async (names) => {
    const { errors } = await _executeSchema(names);
    if (names) {
      for (const name of names) {
        const error3 = get(errors, name);
        error3 ? set(_formState.errors, name, error3) : unset(_formState.errors, name);
      }
    } else {
      _formState.errors = errors;
    }
    return errors;
  };
  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
    valid: true
  }) => {
    for (const name in fields) {
      const field2 = fields[name];
      if (field2) {
        const { _f, ...fieldValue } = field2;
        if (_f) {
          const isFieldArrayRoot = _names.array.has(_f.name);
          _updateIsValidating([name], true);
          const fieldError = await validateField(field2, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
          _updateIsValidating([name]);
          if (fieldError[_f.name]) {
            context.valid = false;
            if (shouldOnlyCheckValid) {
              break;
            }
          }
          !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
        }
        fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
      }
    }
    return context.valid;
  };
  const _removeUnmounted = () => {
    for (const name of _names.unMount) {
      const field2 = get(_fields, name);
      field2 && (field2._f.refs ? field2._f.refs.every((ref) => !live(ref)) : !live(field2._f.ref)) && unregister(name);
    }
    _names.unMount = /* @__PURE__ */ new Set();
  };
  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));
  const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
    ..._state.mount ? _formValues : isUndefined2(defaultValue) ? _defaultValues : isString3(names) ? { [names]: defaultValue } : defaultValue
  }, isGlobal, defaultValue);
  const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));
  const setFieldValue = (name, value, options = {}) => {
    const field2 = get(_fields, name);
    let fieldValue = value;
    if (field2) {
      const fieldReference = field2._f;
      if (fieldReference) {
        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
        fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
        if (isMultipleSelect(fieldReference.ref)) {
          [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
        } else if (fieldReference.refs) {
          if (isCheckBoxInput(fieldReference.ref)) {
            fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
          } else {
            fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
          }
        } else if (isFileInput(fieldReference.ref)) {
          fieldReference.ref.value = "";
        } else {
          fieldReference.ref.value = fieldValue;
          if (!fieldReference.ref.type) {
            _subjects.values.next({
              name,
              values: { ..._formValues }
            });
          }
        }
      }
    }
    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
    options.shouldValidate && trigger(name);
  };
  const setValues = (name, value, options) => {
    for (const fieldKey in value) {
      const fieldValue = value[fieldKey];
      const fieldName = `${name}.${fieldKey}`;
      const field2 = get(_fields, fieldName);
      (_names.array.has(name) || !isPrimitive(fieldValue) || field2 && !field2._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
    }
  };
  const setValue = (name, value, options = {}) => {
    const field2 = get(_fields, name);
    const isFieldArray = _names.array.has(name);
    const cloneValue = cloneObject(value);
    set(_formValues, name, cloneValue);
    if (isFieldArray) {
      _subjects.array.next({
        name,
        values: { ..._formValues }
      });
      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
        _subjects.state.next({
          name,
          dirtyFields: getDirtyFields(_defaultValues, _formValues),
          isDirty: _getDirty(name, cloneValue)
        });
      }
    } else {
      field2 && !field2._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
    }
    isWatched(name, _names) && _subjects.state.next({ ..._formState });
    _subjects.values.next({
      name: _state.mount ? name : void 0,
      values: { ..._formValues }
    });
  };
  const onChange = async (event2) => {
    const target = event2.target;
    let name = target.name;
    let isFieldValueUpdated = true;
    const field2 = get(_fields, name);
    const getCurrentFieldValue = () => target.type ? getFieldValue(field2._f) : getEventValue(event2);
    const _updateIsFieldValueUpdated = (fieldValue) => {
      isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get(_formValues, name, fieldValue);
    };
    if (field2) {
      let error3;
      let isValid;
      const fieldValue = getCurrentFieldValue();
      const isBlurEvent = event2.type === EVENTS.BLUR || event2.type === EVENTS.FOCUS_OUT;
      const shouldSkipValidation = !hasValidation(field2._f) && !_options.resolver && !get(_formState.errors, name) && !field2._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
      const watched = isWatched(name, _names, isBlurEvent);
      set(_formValues, name, fieldValue);
      if (isBlurEvent) {
        field2._f.onBlur && field2._f.onBlur(event2);
        delayErrorCallback && delayErrorCallback(0);
      } else if (field2._f.onChange) {
        field2._f.onChange(event2);
      }
      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
      const shouldRender = !isEmptyObject2(fieldState) || watched;
      !isBlurEvent && _subjects.values.next({
        name,
        type: event2.type,
        values: { ..._formValues }
      });
      if (shouldSkipValidation) {
        _proxyFormState.isValid && _updateValid();
        return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
      }
      !isBlurEvent && watched && _subjects.state.next({ ..._formState });
      if (_options.resolver) {
        const { errors } = await _executeSchema([name]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
          error3 = errorLookupResult.error;
          name = errorLookupResult.name;
          isValid = isEmptyObject2(errors);
        }
      } else {
        _updateIsValidating([name], true);
        error3 = (await validateField(field2, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
        _updateIsValidating([name]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          if (error3) {
            isValid = false;
          } else if (_proxyFormState.isValid) {
            isValid = await executeBuiltInValidation(_fields, true);
          }
        }
      }
      if (isFieldValueUpdated) {
        field2._f.deps && trigger(field2._f.deps);
        shouldRenderByError(name, isValid, error3, fieldState);
      }
    }
  };
  const _focusInput = (ref, key) => {
    if (get(_formState.errors, key) && ref.focus) {
      ref.focus();
      return 1;
    }
    return;
  };
  const trigger = async (name, options = {}) => {
    let isValid;
    let validationResult;
    const fieldNames = convertToArrayPayload(name);
    if (_options.resolver) {
      const errors = await executeSchemaAndUpdateState(isUndefined2(name) ? name : fieldNames);
      isValid = isEmptyObject2(errors);
      validationResult = name ? !fieldNames.some((name2) => get(errors, name2)) : isValid;
    } else if (name) {
      validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
        const field2 = get(_fields, fieldName);
        return await executeBuiltInValidation(field2 && field2._f ? { [fieldName]: field2 } : field2);
      }))).every(Boolean);
      !(!validationResult && !_formState.isValid) && _updateValid();
    } else {
      validationResult = isValid = await executeBuiltInValidation(_fields);
    }
    _subjects.state.next({
      ...!isString3(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name },
      ..._options.resolver || !name ? { isValid } : {},
      errors: _formState.errors
    });
    options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
    return validationResult;
  };
  const getValues = (fieldNames) => {
    const values = {
      ..._defaultValues,
      ..._state.mount ? _formValues : {}
    };
    return isUndefined2(fieldNames) ? values : isString3(fieldNames) ? get(values, fieldNames) : fieldNames.map((name) => get(values, name));
  };
  const getFieldState = (name, formState) => ({
    invalid: !!get((formState || _formState).errors, name),
    isDirty: !!get((formState || _formState).dirtyFields, name),
    isTouched: !!get((formState || _formState).touchedFields, name),
    isValidating: !!get((formState || _formState).validatingFields, name),
    error: get((formState || _formState).errors, name)
  });
  const clearErrors = (name) => {
    name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
    _subjects.state.next({
      errors: name ? _formState.errors : {}
    });
  };
  const setError = (name, error3, options) => {
    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
    set(_formState.errors, name, {
      ...error3,
      ref
    });
    _subjects.state.next({
      name,
      errors: _formState.errors,
      isValid: false
    });
    options && options.shouldFocus && ref && ref.focus && ref.focus();
  };
  const watch = (name, defaultValue) => isFunction3(name) ? _subjects.values.subscribe({
    next: (payload) => name(_getWatch(void 0, defaultValue), payload)
  }) : _getWatch(name, defaultValue, true);
  const unregister = (name, options = {}) => {
    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
      _names.mount.delete(fieldName);
      _names.array.delete(fieldName);
      if (!options.keepValue) {
        unset(_fields, fieldName);
        unset(_formValues, fieldName);
      }
      !options.keepError && unset(_formState.errors, fieldName);
      !options.keepDirty && unset(_formState.dirtyFields, fieldName);
      !options.keepTouched && unset(_formState.touchedFields, fieldName);
      !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
      !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
    }
    _subjects.values.next({
      values: { ..._formValues }
    });
    _subjects.state.next({
      ..._formState,
      ...!options.keepDirty ? {} : { isDirty: _getDirty() }
    });
    !options.keepIsValid && _updateValid();
  };
  const _updateDisabledField = ({ disabled, name, field: field2, fields, value }) => {
    if (isBoolean(disabled)) {
      const inputValue = disabled ? void 0 : isUndefined2(value) ? getFieldValue(field2 ? field2._f : get(fields, name)._f) : value;
      set(_formValues, name, inputValue);
      updateTouchAndDirty(name, inputValue, false, false, true);
    }
  };
  const register = (name, options = {}) => {
    let field2 = get(_fields, name);
    const disabledIsDefined = isBoolean(options.disabled);
    set(_fields, name, {
      ...field2 || {},
      _f: {
        ...field2 && field2._f ? field2._f : { ref: { name } },
        name,
        mount: true,
        ...options
      }
    });
    _names.mount.add(name);
    if (field2) {
      _updateDisabledField({
        field: field2,
        disabled: options.disabled,
        name,
        value: options.value
      });
    } else {
      updateValidAndValue(name, true, options.value);
    }
    return {
      ...disabledIsDefined ? { disabled: options.disabled } : {},
      ..._options.progressive ? {
        required: !!options.required,
        min: getRuleValue(options.min),
        max: getRuleValue(options.max),
        minLength: getRuleValue(options.minLength),
        maxLength: getRuleValue(options.maxLength),
        pattern: getRuleValue(options.pattern)
      } : {},
      name,
      onChange,
      onBlur: onChange,
      ref: (ref) => {
        if (ref) {
          register(name, options);
          field2 = get(_fields, name);
          const fieldRef = isUndefined2(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
          const refs = field2._f.refs || [];
          if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field2._f.ref) {
            return;
          }
          set(_fields, name, {
            _f: {
              ...field2._f,
              ...radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get(_defaultValues, name)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name }
              } : { ref: fieldRef }
            }
          });
          updateValidAndValue(name, false, void 0, fieldRef);
        } else {
          field2 = get(_fields, name, {});
          if (field2._f) {
            field2._f.mount = false;
          }
          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
        }
      }
    };
  };
  const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
  const _disableForm = (disabled) => {
    if (isBoolean(disabled)) {
      _subjects.state.next({ disabled });
      iterateFieldsByAction(_fields, (ref, name) => {
        let requiredDisabledState = disabled;
        const currentField = get(_fields, name);
        if (currentField && isBoolean(currentField._f.disabled)) {
          requiredDisabledState || (requiredDisabledState = currentField._f.disabled);
        }
        ref.disabled = requiredDisabledState;
      }, 0, false);
    }
  };
  const handleSubmit2 = (onValid, onInvalid) => async (e) => {
    let onValidError = void 0;
    if (e) {
      e.preventDefault && e.preventDefault();
      e.persist && e.persist();
    }
    let fieldValues = cloneObject(_formValues);
    _subjects.state.next({
      isSubmitting: true
    });
    if (_options.resolver) {
      const { errors, values } = await _executeSchema();
      _formState.errors = errors;
      fieldValues = values;
    } else {
      await executeBuiltInValidation(_fields);
    }
    unset(_formState.errors, "root");
    if (isEmptyObject2(_formState.errors)) {
      _subjects.state.next({
        errors: {}
      });
      try {
        await onValid(fieldValues, e);
      } catch (error3) {
        onValidError = error3;
      }
    } else {
      if (onInvalid) {
        await onInvalid({ ..._formState.errors }, e);
      }
      _focusError();
      setTimeout(_focusError);
    }
    _subjects.state.next({
      isSubmitted: true,
      isSubmitting: false,
      isSubmitSuccessful: isEmptyObject2(_formState.errors) && !onValidError,
      submitCount: _formState.submitCount + 1,
      errors: _formState.errors
    });
    if (onValidError) {
      throw onValidError;
    }
  };
  const resetField = (name, options = {}) => {
    if (get(_fields, name)) {
      if (isUndefined2(options.defaultValue)) {
        setValue(name, cloneObject(get(_defaultValues, name)));
      } else {
        setValue(name, options.defaultValue);
        set(_defaultValues, name, cloneObject(options.defaultValue));
      }
      if (!options.keepTouched) {
        unset(_formState.touchedFields, name);
      }
      if (!options.keepDirty) {
        unset(_formState.dirtyFields, name);
        _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get(_defaultValues, name))) : _getDirty();
      }
      if (!options.keepError) {
        unset(_formState.errors, name);
        _proxyFormState.isValid && _updateValid();
      }
      _subjects.state.next({ ..._formState });
    }
  };
  const _reset = (formValues, keepStateOptions = {}) => {
    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
    const cloneUpdatedValues = cloneObject(updatedValues);
    const isEmptyResetValues = isEmptyObject2(formValues);
    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
    if (!keepStateOptions.keepDefaultValues) {
      _defaultValues = updatedValues;
    }
    if (!keepStateOptions.keepValues) {
      if (keepStateOptions.keepDirtyValues) {
        for (const fieldName of _names.mount) {
          get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));
        }
      } else {
        if (isWeb && isUndefined2(formValues)) {
          for (const name of _names.mount) {
            const field2 = get(_fields, name);
            if (field2 && field2._f) {
              const fieldReference = Array.isArray(field2._f.refs) ? field2._f.refs[0] : field2._f.ref;
              if (isHTMLElement(fieldReference)) {
                const form = fieldReference.closest("form");
                if (form) {
                  form.reset();
                  break;
                }
              }
            }
          }
        }
        _fields = {};
      }
      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
      _subjects.array.next({
        values: { ...values }
      });
      _subjects.values.next({
        values: { ...values }
      });
    }
    _names = {
      mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set(),
      watchAll: false,
      focus: ""
    };
    _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
    _state.watch = !!props.shouldUnregister;
    _subjects.state.next({
      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
      isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
      dirtyFields: isEmptyResetValues ? [] : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
      errors: keepStateOptions.keepErrors ? _formState.errors : {},
      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
      isSubmitting: false
    });
  };
  const reset = (formValues, keepStateOptions) => _reset(isFunction3(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
  const setFocus = (name, options = {}) => {
    const field2 = get(_fields, name);
    const fieldReference = field2 && field2._f;
    if (fieldReference) {
      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
      if (fieldRef.focus) {
        fieldRef.focus();
        options.shouldSelect && fieldRef.select();
      }
    }
  };
  const _updateFormState = (updatedFormState) => {
    _formState = {
      ..._formState,
      ...updatedFormState
    };
  };
  const _resetDefaultValues = () => isFunction3(_options.defaultValues) && _options.defaultValues().then((values) => {
    reset(values, _options.resetOptions);
    _subjects.state.next({
      isLoading: false
    });
  });
  return {
    control: {
      register,
      unregister,
      getFieldState,
      handleSubmit: handleSubmit2,
      setError,
      _executeSchema,
      _getWatch,
      _getDirty,
      _updateValid,
      _removeUnmounted,
      _updateFieldArray,
      _updateDisabledField,
      _getFieldArray,
      _reset,
      _resetDefaultValues,
      _updateFormState,
      _disableForm,
      _subjects,
      _proxyFormState,
      _setErrors,
      get _fields() {
        return _fields;
      },
      get _formValues() {
        return _formValues;
      },
      get _state() {
        return _state;
      },
      set _state(value) {
        _state = value;
      },
      get _defaultValues() {
        return _defaultValues;
      },
      get _names() {
        return _names;
      },
      set _names(value) {
        _names = value;
      },
      get _formState() {
        return _formState;
      },
      set _formState(value) {
        _formState = value;
      },
      get _options() {
        return _options;
      },
      set _options(value) {
        _options = {
          ..._options,
          ...value
        };
      }
    },
    trigger,
    register,
    handleSubmit: handleSubmit2,
    watch,
    setValue,
    getValues,
    reset,
    resetField,
    clearErrors,
    unregister,
    setError,
    setFocus,
    getFieldState
  };
}
function useForm(props = {}) {
  const _formControl = import_react11.default.useRef();
  const _values = import_react11.default.useRef();
  const [formState, updateFormState] = import_react11.default.useState({
    isDirty: false,
    isValidating: false,
    isLoading: isFunction3(props.defaultValues),
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    submitCount: 0,
    dirtyFields: {},
    touchedFields: {},
    validatingFields: {},
    errors: props.errors || {},
    disabled: props.disabled || false,
    defaultValues: isFunction3(props.defaultValues) ? void 0 : props.defaultValues
  });
  if (!_formControl.current) {
    _formControl.current = {
      ...createFormControl(props),
      formState
    };
  }
  const control = _formControl.current.control;
  control._options = props;
  useSubscribe({
    subject: control._subjects.state,
    next: (value) => {
      if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
        updateFormState({ ...control._formState });
      }
    }
  });
  import_react11.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
  import_react11.default.useEffect(() => {
    if (control._proxyFormState.isDirty) {
      const isDirty = control._getDirty();
      if (isDirty !== formState.isDirty) {
        control._subjects.state.next({
          isDirty
        });
      }
    }
  }, [control, formState.isDirty]);
  import_react11.default.useEffect(() => {
    if (props.values && !deepEqual(props.values, _values.current)) {
      control._reset(props.values, control._options.resetOptions);
      _values.current = props.values;
      updateFormState((state) => ({ ...state }));
    } else {
      control._resetDefaultValues();
    }
  }, [props.values, control]);
  import_react11.default.useEffect(() => {
    if (props.errors) {
      control._setErrors(props.errors);
    }
  }, [props.errors, control]);
  import_react11.default.useEffect(() => {
    if (!control._state.mount) {
      control._updateValid();
      control._state.mount = true;
    }
    if (control._state.watch) {
      control._state.watch = false;
      control._subjects.state.next({ ...control._formState });
    }
    control._removeUnmounted();
  });
  import_react11.default.useEffect(() => {
    props.shouldUnregister && control._subjects.values.next({
      values: control._getWatch()
    });
  }, [props.shouldUnregister, control]);
  _formControl.current.formState = getProxyFormState(formState, control);
  return _formControl.current;
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/FormProvider.mjs
var import_react12 = __toESM(require_react(), 1);
var DEFAULT_MODE = "onTouched";
var FormProvider2 = import_react12.default.forwardRef(function FormProvider3({ children: children2, defaultValues, mode = DEFAULT_MODE }, ref) {
  const formProviderProps = useForm({
    defaultValues,
    mode
  });
  const { getValues, reset } = formProviderProps;
  import_react12.default.useImperativeHandle(ref, () => ({ getValues, reset: () => reset(defaultValues) }), [defaultValues, getValues, reset]);
  return import_react12.default.createElement(FormProvider, { ...formProviderProps }, children2);
});

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/constants.mjs
var COMMON_ROUTE_MACHINE_KEYS = [
  "error",
  "isPending",
  "submitForm",
  "updateBlur",
  "updateForm"
];
var CONFIRM_RESET_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "resendCode",
  "validationErrors"
];
var CONFIRM_SIGN_IN_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "challengeName",
  "toSignIn"
];
var CONFIRM_SIGN_UP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "codeDeliveryDetails",
  "resendCode"
];
var CONFIRM_VERIFY_USER_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "skipVerification"
];
var FORCE_NEW_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "toSignIn",
  "validationErrors"
];
var RESET_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "toSignIn"
];
var SIGN_IN_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "socialProviders",
  "toFederatedSignIn",
  "toForgotPassword",
  "toSignUp"
];
var SIGN_UP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "socialProviders",
  "toFederatedSignIn",
  "toSignIn",
  "validationErrors"
];
var SETUP_TOTP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "toSignIn",
  "totpSecretCode",
  "username"
];
var VERIFY_USER_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "skipVerification"
];

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorInitMachine/useAuthenticatorInitMachine.mjs
var import_react15 = __toESM(require_react(), 1);
var routeSelector2 = ({ route }) => [route];
function useAuthenticatorInitMachine(data) {
  const { route, initializeMachine } = useAuthenticator(routeSelector2);
  const hasInitialized = import_react15.default.useRef(false);
  import_react15.default.useEffect(() => {
    if (!hasInitialized.current && route === "setup") {
      initializeMachine(data);
      hasInitialized.current = true;
    }
  }, [initializeMachine, route, data]);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/useForm.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/withFormProvider.mjs
var import_react17 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useDeprecationWarning.mjs
var React4 = __toESM(require_react(), 1);
var useDeprecationWarning = ({ shouldWarn, message: message2 }) => {
  React4.useEffect(() => {
    if (shouldWarn) {
      console.warn(message2);
    }
  }, [shouldWarn, message2]);
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/usePreviousValue.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useSetUserAgent.mjs
var import_react19 = __toESM(require_react(), 1);
function useSetUserAgent({ componentName, packageName, version }) {
  (0, import_react19.useEffect)(() => {
    const clearUserAgent = setUserAgent({
      componentName,
      packageName,
      version
    });
    return clearUserAgent;
  }, [componentName, packageName, version]);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useTimeout.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/utils/createContextUtilities.mjs
var import_react21 = __toESM(require_react(), 1);

export {
  sanitizeNamespaceImport,
  isString,
  isFunction,
  classNameModifier,
  classNameModifierByFlag,
  isTypedFunction,
  countryDialCodes,
  defaultFormFieldOptions,
  FederatedIdentityProviders,
  getErrors,
  censorContactMethod,
  getTotpCodeURL,
  translate,
  translations,
  authenticatorTextUtil,
  getLogger,
  changePassword,
  deleteUser2 as deleteUser,
  getDefaultPasswordValidators,
  getDefaultConfirmPasswordValidators,
  runFieldValidators,
  require_root,
  require_isObject,
  require_baseIsEqual,
  require_isSymbol,
  defaultTheme,
  cssNameTransform,
  isDesignToken,
  createTheme,
  defaultDarkModeOverride,
  ComponentClassName,
  classNames,
  AuthenticatorProvider,
  useAuthenticator,
  useAuthenticatorInitMachine,
  useDeprecationWarning,
  useSetUserAgent
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

xstate/es/_virtual/_tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=chunk-ZFYDVO7N.js.map
