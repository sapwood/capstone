{"version":3,"file":"util.mjs","sources":["../../src/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport booleanClockwise from '@turf/boolean-clockwise';\nimport { Category, getAmplifyUserAgent, getAmplifyUserAgentObject, } from '@aws-amplify/core/internals/utils';\nexport function validateCoordinates(lng, lat) {\n    if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n        throw new Error(`Invalid coordinates: [${lng},${lat}]`);\n    }\n    if (lat < -90 || lat > 90) {\n        throw new Error('Latitude must be between -90 and 90 degrees inclusive.');\n    }\n    else if (lng < -180 || lng > 180) {\n        throw new Error('Longitude must be between -180 and 180 degrees inclusive.');\n    }\n}\nexport function validateGeofenceId(geofenceId) {\n    const geofenceIdRegex = /^[-._\\p{L}\\p{N}]+$/iu;\n    // Check if geofenceId is valid\n    if (!geofenceIdRegex.test(geofenceId)) {\n        throw new Error(`Invalid geofenceId: '${geofenceId}' - IDs can only contain alphanumeric characters, hyphens, underscores and periods.`);\n    }\n}\nexport function validateLinearRing(linearRing, geofenceId) {\n    const errorPrefix = geofenceId ? `${geofenceId}: ` : '';\n    // Validate LinearRing size, must be at least 4 points\n    if (linearRing.length < 4) {\n        throw new Error(`${errorPrefix}LinearRing must contain 4 or more coordinates.`);\n    }\n    // Validate all coordinates are valid, error with which ones are bad\n    const badCoordinates = [];\n    linearRing.forEach(coordinates => {\n        try {\n            validateCoordinates(coordinates[0], coordinates[1]);\n        }\n        catch (error) {\n            badCoordinates.push({ coordinates, error: error.message });\n        }\n    });\n    if (badCoordinates.length > 0) {\n        throw new Error(`${errorPrefix}One or more of the coordinates in the Polygon LinearRing are not valid: ${JSON.stringify(badCoordinates)}`);\n    }\n    // Validate first and last coordinates are the same\n    const [lngA, latA] = linearRing[0];\n    const [lngB, latB] = linearRing[linearRing.length - 1];\n    if (lngA !== lngB || latA !== latB) {\n        throw new Error(`${errorPrefix}LinearRing's first and last coordinates are not the same`);\n    }\n    if (booleanClockwise(linearRing)) {\n        throw new Error(`${errorPrefix}LinearRing coordinates must be wound counterclockwise`);\n    }\n}\nexport function validatePolygon(polygon, geofenceId) {\n    const errorPrefix = geofenceId ? `${geofenceId}: ` : '';\n    if (!Array.isArray(polygon)) {\n        throw new Error(`${errorPrefix}Polygon is of incorrect structure. It should be an array of LinearRings`);\n    }\n    if (polygon.length < 1) {\n        throw new Error(`${errorPrefix}Polygon must have a single LinearRing array.`);\n    }\n    if (polygon.length > 1) {\n        throw new Error(`${errorPrefix}Polygon must have a single LinearRing array. Note: We do not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian.`);\n    }\n    const verticesCount = polygon.reduce((prev, linearRing) => prev + linearRing.length, 0);\n    if (verticesCount > 1000) {\n        throw new Error(`${errorPrefix}Polygon has more than the maximum 1000 vertices.`);\n    }\n    polygon.forEach(linearRing => {\n        validateLinearRing(linearRing, geofenceId);\n    });\n}\nexport function validateGeofencesInput(geofences) {\n    const geofenceIds = {};\n    geofences.forEach((geofence) => {\n        // verify all required properties are present\n        // Validate geofenceId exists\n        if (!geofence.geofenceId) {\n            throw new Error(`Geofence '${geofence}' is missing geofenceId`);\n        }\n        const { geofenceId } = geofence;\n        validateGeofenceId(geofenceId);\n        // Validate geofenceId is unique\n        if (geofenceIds[geofenceId]) {\n            throw new Error(`Duplicate geofenceId: ${geofenceId}`);\n        }\n        else {\n            geofenceIds[geofenceId] = true;\n        }\n        // Validate geometry exists\n        if (!geofence.geometry) {\n            throw new Error(`Geofence '${geofenceId}' is missing geometry`);\n        }\n        const { geometry } = geofence;\n        // Validate polygon exists\n        if (!geometry.polygon) {\n            throw new Error(`Geofence '${geofenceId}' is missing geometry.polygon`);\n        }\n        const { polygon } = geometry;\n        // Validate polygon length and structure\n        try {\n            validatePolygon(polygon, geofenceId);\n        }\n        catch (error) {\n            if (error.message.includes('Polygon has more than the maximum 1000 vertices.')) {\n                throw new Error(`Geofence '${geofenceId}' has more than the maximum of 1000 vertices`);\n            }\n        }\n        // Validate LinearRing length, structure, and coordinates\n        const [linearRing] = polygon;\n        validateLinearRing(linearRing, geofenceId);\n    });\n}\nexport function mapSearchOptions(options, locationServiceInput) {\n    const locationServiceModifiedInput = { ...locationServiceInput };\n    locationServiceModifiedInput.FilterCountries = options.countries;\n    locationServiceModifiedInput.MaxResults = options.maxResults;\n    locationServiceModifiedInput.Language = options.language;\n    if (options.searchIndexName) {\n        locationServiceModifiedInput.IndexName = options.searchIndexName;\n    }\n    if (options.biasPosition && options.searchAreaConstraints) {\n        throw new Error('BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object');\n    }\n    if (options.biasPosition) {\n        locationServiceModifiedInput.BiasPosition = options.biasPosition;\n    }\n    if (options.searchAreaConstraints) {\n        locationServiceModifiedInput.FilterBBox = options.searchAreaConstraints;\n    }\n    return locationServiceModifiedInput;\n}\nexport function getGeoUserAgent(action) {\n    return getAmplifyUserAgentObject({\n        category: Category.Geo,\n        action,\n    });\n}\nexport function getGeoUserAgentString(action) {\n    return getAmplifyUserAgent({\n        category: Category.Geo,\n        action,\n    });\n}\n"],"names":[],"mappings":"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"}