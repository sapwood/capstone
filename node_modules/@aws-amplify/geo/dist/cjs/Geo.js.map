{"version":3,"file":"Geo.js","sources":["../../src/Geo.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Geo = exports.GeoClass = void 0;\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst core_1 = require(\"@aws-amplify/core\");\nconst AmazonLocationServiceProvider_1 = require(\"./providers/location-service/AmazonLocationServiceProvider\");\nconst util_1 = require(\"./util\");\nconst logger = new core_1.ConsoleLogger('Geo');\nconst DEFAULT_PROVIDER = 'AmazonLocationService';\nclass GeoClass {\n    constructor() {\n        this._config = undefined;\n        this._pluggables = [];\n        const amplifyConfig = core_1.Amplify.getConfig() ?? {};\n        this._config = Object.assign({}, this._config, amplifyConfig.Geo);\n        const locationProvider = new AmazonLocationServiceProvider_1.AmazonLocationServiceProvider(amplifyConfig.Geo);\n        this._pluggables.push(locationProvider);\n        logger.debug('Geo Options', this._config);\n    }\n    /**\n     * get the name of the module category\n     * @returns {string} name of the module category\n     */\n    getModuleName() {\n        return GeoClass.MODULE;\n    }\n    /**\n     * add plugin into Geo category\n     * @param {Object} pluggable an instance of the plugin\n     */\n    addPluggable(pluggable) {\n        if (pluggable && pluggable.getCategory() === 'Geo') {\n            this._pluggables.push(pluggable);\n        }\n    }\n    /**\n     * Get the plugin object\n     * @param providerName the name of the plugin\n     */\n    getPluggable(providerName) {\n        const targetPluggable = this._pluggables.find(pluggable => pluggable.getProviderName() === providerName);\n        if (targetPluggable === undefined) {\n            logger.debug('No plugin found with providerName', providerName);\n            throw new Error('No plugin found in Geo for the provider');\n        }\n        else\n            return targetPluggable;\n    }\n    /**\n     * Remove the plugin object\n     * @param providerName the name of the plugin\n     */\n    removePluggable(providerName) {\n        this._pluggables = this._pluggables.filter(pluggable => pluggable.getProviderName() !== providerName);\n    }\n    /**\n     * Get the map resources that are currently available through the provider\n     * @param {string} provider\n     * @returns - Array of available map resources\n     */\n    getAvailableMaps(provider = DEFAULT_PROVIDER) {\n        const prov = this.getPluggable(provider);\n        return prov.getAvailableMaps();\n    }\n    /**\n     * Get the map resource set as default in amplify config\n     * @param {string} provider\n     * @returns - Map resource set as the default in amplify config\n     */\n    getDefaultMap(provider = DEFAULT_PROVIDER) {\n        const prov = this.getPluggable(provider);\n        return prov.getDefaultMap();\n    }\n    /**\n     * Search by text input with optional parameters\n     * @param  {string} text The text string that is to be searched for\n     * @param  {SearchByTextOptions} options Optional parameters to the search\n     * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n     */\n    async searchByText(text, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        try {\n            return await prov.searchByText(text, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Search for search term suggestions based on input text\n     * @param  {string} text The text string that is to be search for\n     * @param  {SearchByTextOptions} options Optional parameters to the search\n     * @returns a `Promise` of {@link SearchForSuggestionsResults} that resolves to an array of search suggestion strings\n     */\n    async searchForSuggestions(text, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        try {\n            return await prov.searchForSuggestions(text, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Search for location by unique ID\n     * @param  {string} placeId Unique ID of the location that is to be searched for\n     * @param  {searchByPlaceIdOptions} options Optional parameters to the search\n     * @returns {Promise<Place>} - Resolves to a place with the given placeId\n     */\n    async searchByPlaceId(placeId, options) {\n        const providerName = DEFAULT_PROVIDER;\n        const prov = this.getPluggable(providerName);\n        try {\n            return await prov.searchByPlaceId(placeId, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Reverse geocoding search via a coordinate point on the map\n     * @param coordinates Coordinates array for the search input\n     * @param options Options parameters for the search\n     * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n     */\n    async searchByCoordinates(coordinates, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        const [lng, lat] = coordinates;\n        try {\n            (0, util_1.validateCoordinates)(lng, lat);\n            return await prov.searchByCoordinates(coordinates, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Create geofences\n     * @param geofences Single or array of geofence objects to create\n     * @param options Optional parameters for creating geofences\n     * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n     *   successes: list of geofences successfully created\n     *   errors: list of geofences that failed to create\n     */\n    async saveGeofences(geofences, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        // If single geofence input, make it an array for batch call\n        let geofenceInputArray;\n        if (!Array.isArray(geofences)) {\n            geofenceInputArray = [geofences];\n        }\n        else {\n            geofenceInputArray = geofences;\n        }\n        try {\n            return await prov.saveGeofences(geofenceInputArray, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Get a single geofence by geofenceId\n     * @param geofenceId The string id of the geofence to get\n     * @param options Optional parameters for getting a geofence\n     * @returns Promise<Geofence> - Promise that resolves to a geofence object\n     */\n    async getGeofence(geofenceId, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        try {\n            return await prov.getGeofence(geofenceId, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * List geofences\n     * @param  options ListGeofenceOptions\n     * @returns a promise that resolves to an object that conforms to {@link ListGeofenceResults}:\n     *   entries: list of geofences - 100 geofences are listed per page\n     *   nextToken: token for next page of geofences\n     */\n    async listGeofences(options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        try {\n            return await prov.listGeofences(options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n    /**\n     * Delete geofences\n     * @param geofenceIds string|string[]\n     * @param options GeofenceOptions\n     * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n     *  successes: list of geofences successfully deleted\n     *  errors: list of geofences that failed to delete\n     */\n    async deleteGeofences(geofenceIds, options) {\n        const { providerName = DEFAULT_PROVIDER } = options || {};\n        const prov = this.getPluggable(providerName);\n        // If single geofence input, make it an array for batch call\n        let geofenceIdsInputArray;\n        if (!Array.isArray(geofenceIds)) {\n            geofenceIdsInputArray = [geofenceIds];\n        }\n        else {\n            geofenceIdsInputArray = geofenceIds;\n        }\n        //  Delete geofences\n        try {\n            return await prov.deleteGeofences(geofenceIdsInputArray, options);\n        }\n        catch (error) {\n            logger.debug(error);\n            throw error;\n        }\n    }\n}\nexports.GeoClass = GeoClass;\nGeoClass.MODULE = 'Geo';\nexports.Geo = new GeoClass();\n"],"names":[],"mappings":"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"}